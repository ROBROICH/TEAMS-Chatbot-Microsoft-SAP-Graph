/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as msrest from '@azure/ms-rest-js';
import * as adal from 'adal-node';
/**
 * General AppCredentials auth implementation and cache. Supports any ADAL client credential flow.
 * Subclasses can implement refreshToken to acquire the token.
 */
export declare abstract class AppCredentials implements msrest.ServiceClientCredentials {
    private static readonly trustedHostNames;
    private static readonly cache;
    appId: string;
    oAuthEndpoint: string;
    private _oAuthScope;
    tokenCacheKey: string;
    protected refreshingToken: Promise<adal.TokenResponse> | null;
    protected readonly authenticationContext: adal.AuthenticationContext;
    constructor(appId: string, channelAuthTenant?: string, oAuthScope?: string);
    oAuthScope: string;
    /**
     * Adds the host of service url to trusted hosts.
     * If expiration time is not provided, the expiration date will be current (utc) date + 1 day.
     * @param  {string} serviceUrl The service url
     * @param  {Date} expiration? The expiration date after which this service url is not trusted anymore
     */
    static trustServiceUrl(serviceUrl: string, expiration?: Date): void;
    /**
     * Checks if the service url is for a trusted host or not.
     * @param  {string} serviceUrl The service url
     * @returns {boolean} True if the host of the service url is trusted; False otherwise.
     */
    static isTrustedServiceUrl(serviceUrl: string): boolean;
    private static isTrustedUrl;
    signRequest(webResource: msrest.WebResource): Promise<msrest.WebResource>;
    getToken(forceRefresh?: boolean): Promise<string>;
    protected abstract refreshToken(): Promise<adal.TokenResponse>;
    private shouldSetToken;
}
