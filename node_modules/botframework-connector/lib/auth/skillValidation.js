"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const jsonwebtoken_1 = require("jsonwebtoken");
const authenticationConstants_1 = require("./authenticationConstants");
const governmentConstants_1 = require("./governmentConstants");
const jwtTokenExtractor_1 = require("./jwtTokenExtractor");
const jwtTokenValidation_1 = require("./jwtTokenValidation");
/**
 * Validates JWT tokens sent to and from a Skill.
 */
var SkillValidation;
(function (SkillValidation) {
    /**
     * TO SKILL FROM BOT and TO BOT FROM SKILL: Token validation parameters when connecting a bot to a skill.
     */
    const _tokenValidationParameters = {
        issuer: [
            'https://sts.windows.net/d6d49420-f39b-4df7-a1dc-d59a935871db/',
            'https://login.microsoftonline.com/d6d49420-f39b-4df7-a1dc-d59a935871db/v2.0',
            'https://sts.windows.net/f8cdef31-a31e-4b4a-93e4-5f571e91255a/',
            'https://login.microsoftonline.com/f8cdef31-a31e-4b4a-93e4-5f571e91255a/v2.0',
            'https://sts.windows.net/72f988bf-86f1-41af-91ab-2d7cd011db47/',
            'https://sts.windows.net/cab8a31a-1906-4287-a0d8-4eef66b95f6e/',
            'https://login.microsoftonline.us/cab8a31a-1906-4287-a0d8-4eef66b95f6e/v2.0',
        ],
        audience: undefined,
        clockTolerance: 5 * 60,
        ignoreExpiration: false
    };
    /**
     * Determines if a given Auth header is from a skill to bot or bot to skill request.
     * @param  {string} authHeader Bearer Token, in the "Bearer [Long String]" Format.
     * @returns {boolean} True, if the token was issued for a skill to bot communication. Otherwise, false.
     */
    function isSkillToken(authHeader) {
        if (!jwtTokenValidation_1.JwtTokenValidation.isValidTokenFormat(authHeader)) {
            return false;
        }
        // We know is a valid token, split it and work with it:
        // [0] = "Bearer"
        // [1] = "[Big Long String]"
        const bearerToken = authHeader.trim().split(' ')[1];
        // Parse the Big Long String into an actual token.
        const payload = jsonwebtoken_1.decode(bearerToken);
        const claims = Object.keys(payload).reduce((acc, key) => {
            acc.push({ type: key, value: payload[key] });
            return acc;
        }, []);
        return isSkillClaim(claims);
    }
    SkillValidation.isSkillToken = isSkillToken;
    /**
     * Checks if the given object of claims represents a skill.
     * @remarks
     * A skill claim should contain:
     *     An "AuthenticationConstants.VersionClaim" claim.
     *     An "AuthenticationConstants.AudienceClaim" claim.
     *     An "AuthenticationConstants.AppIdClaim" claim (v1) or an a "AuthenticationConstants.AuthorizedParty" claim (v2).
     * And the appId claim should be different than the audience claim.
     * The audience claim should be a guid, indicating that it is from another bot/skill.
     * @param claims An object of claims.
     * @returns {boolean} True if the object of claims is a skill claim, false if is not.
     */
    function isSkillClaim(claims) {
        if (!claims) {
            throw new TypeError(`SkillValidation.isSkillClaim(): missing claims.`);
        }
        const versionClaim = claims.find(c => c.type === authenticationConstants_1.AuthenticationConstants.VersionClaim);
        const versionValue = versionClaim && versionClaim.value;
        if (!versionValue) {
            // Must have a version claim.
            return false;
        }
        const audClaim = claims.find(c => c.type === authenticationConstants_1.AuthenticationConstants.AudienceClaim);
        const audienceValue = audClaim && audClaim.value;
        if (!audClaim || authenticationConstants_1.AuthenticationConstants.ToBotFromChannelTokenIssuer === audienceValue || governmentConstants_1.GovernmentConstants.ToBotFromChannelTokenIssuer === audienceValue) {
            // The audience is https://api.botframework.com and not an appId.
            return false;
        }
        const appId = jwtTokenValidation_1.JwtTokenValidation.getAppIdFromClaims(claims);
        if (!appId) {
            return false;
        }
        // Skill claims must contain and app ID and the AppID must be different than the audience.
        return appId !== audienceValue;
    }
    SkillValidation.isSkillClaim = isSkillClaim;
    /**
     * Validates that the incoming Auth Header is a token sent from a bot to a skill or from a skill to a bot.
     * @param authHeader The raw HTTP header in the format: "Bearer [longString]".
     * @param credentials The user defined set of valid credentials, such as the AppId.
     * @param channelService The channelService value that distinguishes public Azure from US Government Azure.
     * @param channelId The ID of the channel to validate.
     * @param authConfig The authentication configuration.
     * @returns {Promise<ClaimsIdentity>} A "ClaimsIdentity" instance if the validation is successful.
     */
    function authenticateChannelToken(authHeader, credentials, channelService, channelId, authConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!authConfig) {
                throw new Error('SkillValidation.authenticateChannelToken(): invalid authConfig parameter');
            }
            const openIdMetadataUrl = jwtTokenValidation_1.JwtTokenValidation.isGovernment(channelService) ?
                governmentConstants_1.GovernmentConstants.ToBotFromEmulatorOpenIdMetadataUrl :
                authenticationConstants_1.AuthenticationConstants.ToBotFromEmulatorOpenIdMetadataUrl;
            const tokenExtractor = new jwtTokenExtractor_1.JwtTokenExtractor(_tokenValidationParameters, openIdMetadataUrl, authenticationConstants_1.AuthenticationConstants.AllowedSigningAlgorithms);
            const parts = authHeader.split(' ');
            const identity = yield tokenExtractor.getIdentity(parts[0], parts[1], channelId, authConfig.requiredEndorsements);
            yield validateIdentity(identity, credentials);
            return identity;
        });
    }
    SkillValidation.authenticateChannelToken = authenticateChannelToken;
    /**
     * @ignore
     * @private
     * @param identity
     * @param credentials
     */
    function validateIdentity(identity, credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!identity) {
                // No valid identity. Not Authorized.
                throw new Error('SkillValidation.validateIdentity(): Invalid identity');
            }
            if (!identity.isAuthenticated) {
                // The token is in some way invalid. Not Authorized.
                throw new Error('SkillValidation.validateIdentity(): Token not authenticated');
            }
            const versionClaim = identity.getClaimValue(authenticationConstants_1.AuthenticationConstants.VersionClaim);
            // const versionClaim = identity.claims.FirstOrDefault(c => c.Type == AuthenticationConstants.VersionClaim);
            if (!versionClaim) {
                // No version claim
                throw new Error(`SkillValidation.validateIdentity(): '${authenticationConstants_1.AuthenticationConstants.VersionClaim}' claim is required on skill Tokens.`);
            }
            // Look for the "aud" claim, but only if issued from the Bot Framework
            const audienceClaim = identity.getClaimValue(authenticationConstants_1.AuthenticationConstants.AudienceClaim);
            if (!audienceClaim) {
                // Claim is not present or doesn't have a value. Not Authorized.
                throw new Error(`SkillValidation.validateIdentity(): '${authenticationConstants_1.AuthenticationConstants.AudienceClaim}' claim is required on skill Tokens.`);
            }
            if (!(yield credentials.isValidAppId(audienceClaim))) {
                // The AppId is not valid. Not Authorized.
                throw new Error('SkillValidation.validateIdentity(): Invalid audience.');
            }
            const appId = jwtTokenValidation_1.JwtTokenValidation.getAppIdFromClaims(identity.claims);
            if (!appId) {
                // Invalid appId
                throw new Error('SkillValidation.validateIdentity(): Invalid appId.');
            }
            // TODO: check the appId against the registered skill client IDs.
            // Check the AppId and ensure that only works against my whitelist authConfig can have info on how to get the
            // whitelist AuthenticationConfiguration
            // We may need to add a ClaimsIdentityValidator delegate or class that allows the dev to inject a custom validator.
        });
    }
    SkillValidation.validateIdentity = validateIdentity;
})(SkillValidation = exports.SkillValidation || (exports.SkillValidation = {}));
//# sourceMappingURL=skillValidation.js.map