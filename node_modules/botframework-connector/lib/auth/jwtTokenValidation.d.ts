/**
 * @module botbuilder
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity } from 'botframework-schema';
import { AuthenticationConfiguration } from './authenticationConfiguration';
import { Claim, ClaimsIdentity } from './claimsIdentity';
import { ICredentialProvider } from './credentialProvider';
export declare namespace JwtTokenValidation {
    /**
     * Authenticates the request and sets the service url in the set of trusted urls.
     * @param  {Activity} activity The incoming Activity from the Bot Framework or the Emulator
     * @param  {string} authHeader The Bearer token included as part of the request
     * @param  {ICredentialProvider} credentials The set of valid credentials, such as the Bot Application ID
     * @returns {Promise<ClaimsIdentity>} Promise with ClaimsIdentity for the request.
     */
    function authenticateRequest(activity: Activity, authHeader: string, credentials: ICredentialProvider, channelService: string, authConfig?: AuthenticationConfiguration): Promise<ClaimsIdentity>;
    function validateAuthHeader(authHeader: string, credentials: ICredentialProvider, channelService: string, channelId: string, serviceUrl?: string, authConfig?: AuthenticationConfiguration): Promise<ClaimsIdentity>;
    /**
     * Gets the AppId from a claims list.
     * @remarks
     * In v1 tokens the AppId is in the "ver" AuthenticationConstants.AppIdClaim claim.
     * In v2 tokens the AppId is in the "azp" AuthenticationConstants.AuthorizedParty claim.
     * If the AuthenticationConstants.VersionClaim is not present, this method will attempt to
     * obtain the attribute from the AuthenticationConstants.AppIdClaim or if present.
     *
     * Throws a TypeError if claims is falsy.
     * @param claims An object containing claims types and their values.
     */
    function getAppIdFromClaims(claims: Claim[]): string;
    function isGovernment(channelService: string): boolean;
    /**
     * Internal helper to check if the token has the shape we expect "Bearer [big long string]".
     * @param authHeader A string containing the token header.
     * @returns {boolean} True if the token is valid, false if not.
     */
    function isValidTokenFormat(authHeader: string): boolean;
}
