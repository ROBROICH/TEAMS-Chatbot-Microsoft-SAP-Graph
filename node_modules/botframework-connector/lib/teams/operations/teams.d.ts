import * as msRest from '@azure/ms-rest-js';
import * as Models from '../models';
import { TeamsConnectorClientContext } from '../';
import { ConversationList, TeamDetails } from 'botframework-schema';
/** Class representing a Teams. */
export declare class Teams {
    private readonly client;
    /**
     * Create a Teams.
     * @param {TeamsConnectorClientContext} client Reference to the service client.
     */
    constructor(client: TeamsConnectorClientContext);
    /**
     * Fetch the channel list.
     * @summary Fetches channel list for a given team
     * @param teamId Team Id
     * @param [options] The optional parameters
     * @returns Promise<Models.TeamsFetchChannelListResponse>
     */
    fetchChannelList(teamId: string, options?: msRest.RequestOptionsBase): Promise<Models.TeamsFetchChannelListResponse>;
    /**
     * @param teamId Team Id
     * @param callback The callback
     */
    fetchChannelList(teamId: string, callback: msRest.ServiceCallback<ConversationList>): void;
    /**
     * @param teamId Team Id
     * @param options The optional parameters
     * @param callback The callback
     */
    fetchChannelList(teamId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<ConversationList>): void;
    /**
     * Fetch details for a team
     * @summary Fetches details related to a team
     * @param teamId Team Id
     * @param [options] The optional parameters
     * @returns Promise<Models.TeamsFetchTeamDetailsResponse>
     */
    fetchTeamDetails(teamId: string, options?: msRest.RequestOptionsBase): Promise<Models.TeamsFetchTeamDetailsResponse>;
    /**
     * @param teamId Team Id
     * @param callback The callback
     */
    fetchTeamDetails(teamId: string, callback: msRest.ServiceCallback<TeamDetails>): void;
    /**
     * @param teamId Team Id
     * @param options The optional parameters
     * @param callback The callback
     */
    fetchTeamDetails(teamId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<TeamDetails>): void;
}
