export declare namespace SpanishNumeric {
    const LangMarker = "Spa";
    const HundredsNumberIntegerRegex = "(cuatrocient[ao]s|trescient[ao]s|seiscient[ao]s|setecient[ao]s|ochocient[ao]s|novecient[ao]s|doscient[ao]s|quinient[ao]s|(?<!por\\s+)(cien(to)?))";
    const RoundNumberIntegerRegex = "(mil millones|mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|cuatrillones|cuatrill[oó]n|quintillones|quintill[oó]n|sextillones|sextill[oó]n|septillones|septill[oó]n)";
    const ZeroToNineIntegerRegex = "(cuatro|cinco|siete|nueve|cero|tres|seis|ocho|dos|un[ao]?)";
    const TenToNineteenIntegerRegex = "(diecisiete|diecinueve|diecis[eé]is|dieciocho|catorce|quince|trece|diez|once|doce)";
    const TwentiesIntegerRegex = "(veinticuatro|veinticinco|veintisiete|veintinueve|veintitr[eé]s|veintis[eé]is|veintiocho|veintid[oó]s|ventiun[ao]|veinti[uú]n[oa]?|veinte)";
    const TensNumberIntegerRegex = "(cincuenta|cuarenta|treinta|sesenta|setenta|ochenta|noventa)";
    const NegativeNumberTermsRegex = "^[.]";
    const NegativeNumberSignRegex: string;
    const DigitsNumberRegex = "\\d|\\d{1,3}(\\.\\d{3})";
    const BelowHundredsRegex: string;
    const BelowThousandsRegex: string;
    const SupportThousandsRegex: string;
    const SeparaIntRegex: string;
    const AllIntRegex: string;
    const PlaceHolderPureNumber = "\\b";
    const PlaceHolderDefault = "\\D|\\b";
    const NumbersWithPlaceHolder: (placeholder: string) => string;
    const NumbersWithSuffix = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(k|M|T|G)(?=\\b)";
    const RoundNumberIntegerRegexWithLocks: string;
    const NumbersWithDozenSuffix = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+docenas?(?=\\b)";
    const AllIntRegexWithLocks: string;
    const AllIntRegexWithDozenSuffixLocks: string;
    const SimpleRoundOrdinalRegex = "(mil[eé]simo|millon[eé]sim[oa]|billon[eé]sim[oa]|trillon[eé]sim[oa]|cuatrillon[eé]sim[oa]|quintillon[eé]sim[oa]|sextillon[eé]sim[oa]|septillon[eé]sim[oa])";
    const OneToNineOrdinalRegex = "(primer[oa]|segund[oa]|tercer[oa]|cuart[oa]|quint[oa]|sext[oa]|s[eé]ptim[oa]|octav[oa]|noven[oa])";
    const TensOrdinalRegex = "(nonag[eé]sim[oa]|octog[eé]sim[oa]|septuag[eé]sim[oa]|sexag[eé]sim[oa]|quincuag[eé]sim[oa]|cuadrag[eé]sim[oa]|trig[eé]sim[oa]|vig[eé]sim[oa]|d[eé]cim[oa])";
    const HundredOrdinalRegex = "(cent[eé]sim[oa]|ducent[eé]sim[oa]|tricent[eé]sim[oa]|cuadringent[eé]sim[oa]|quingent[eé]sim[oa]|sexcent[eé]sim[oa]|septingent[eé]sim[oa]|octingent[eé]sim[oa]|noningent[eé]sim[oa])";
    const SpecialUnderHundredOrdinalRegex = "(und[eé]cim[oa]|duod[eé]cimo|decimoctav[oa])";
    const UnderHundredOrdinalRegex: string;
    const UnderThousandOrdinalRegex: string;
    const OverThousandOrdinalRegex: string;
    const ComplexOrdinalRegex: string;
    const SufixRoundOrdinalRegex: string;
    const ComplexRoundOrdinalRegex: string;
    const AllOrdinalRegex: string;
    const OrdinalSuffixRegex = "(?<=\\b)(\\d*(1r[oa]|2d[oa]|3r[oa]|4t[oa]|5t[oa]|6t[oa]|7m[oa]|8v[oa]|9n[oa]|0m[oa]|11[vm][oa]|12[vm][oa]))(?=\\b)";
    const OrdinalNounRegex: string;
    const SpecialFractionInteger: string;
    const FractionNotationRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNotationWithSpacesRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s+\\d+[/]\\d+(?=(\\b[^/]|$))";
    const FractionNounRegex: string;
    const FractionNounWithArticleRegex: string;
    const FractionPrepositionRegex: string;
    const AllPointRegex: string;
    const AllFloatRegex: string;
    const DoubleDecimalPointRegex: (placeholder: string) => string;
    const DoubleWithoutIntegralRegex: (placeholder: string) => string;
    const DoubleWithMultiplierRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+\\[\\.,])))\\d+[\\.,]\\d+\\s*(K|k|M|G|T)(?=\\b)";
    const DoubleWithRoundNumber: string;
    const DoubleAllFloatRegex: string;
    const DoubleExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)e([+-]*[1-9]\\d*)(?=\\b)";
    const DoubleCaretExponentialNotationRegex = "(((?<!\\d+\\s*)-\\s*)|((?<=\\b)(?<!\\d+[\\.,])))(\\d+([\\.,]\\d+)?)\\^([+-]*[1-9]\\d*)(?=\\b)";
    const NumberWithPrefixPercentage: string;
    const CurrencyRegex = "(((?<=\\W|^)-\\s*)|(?<=\\b))\\d+\\s*(B|b|m|t|g)(?=\\b)";
    const DecimalSeparatorChar = ",";
    const FractionMarkerToken = "sobre";
    const NonDecimalSeparatorChar = ".";
    const HalfADozenText = "seis";
    const WordSeparatorToken = "y";
    const WrittenDecimalSeparatorTexts: string[];
    const WrittenGroupSeparatorTexts: string[];
    const WrittenIntegerSeparatorTexts: string[];
    const WrittenFractionSeparatorTexts: string[];
    const HalfADozenRegex = "media\\s+docena";
    const DigitalNumberRegex = "((?<=\\b)(mil|millones|mill[oó]n|billones|bill[oó]n|trillones|trill[oó]n|docenas?)(?=\\b))|((?<=(\\d|\\b))(k|t|m|g)(?=\\b))";
    const CardinalNumberMap: ReadonlyMap<string, number>;
    const OrdinalNumberMap: ReadonlyMap<string, number>;
    const PrefixCardinalMap: ReadonlyMap<string, number>;
    const SuffixOrdinalMap: ReadonlyMap<string, number>;
    const RoundNumberMap: ReadonlyMap<string, number>;
    const AmbiguousFractionConnectorsRegex = "^[.]";
}
