{"version":3,"file":"recognizers-text.umd.js","sources":["../src/culture.ts","../../../node_modules/xregexp/lib/xregexp.js","../../../node_modules/xregexp/lib/addons/build.js","../../../node_modules/xregexp/lib/addons/matchrecursive.js","../../../node_modules/xregexp/lib/addons/unicode-base.js","../../../node_modules/xregexp/tools/output/blocks.js","../../../node_modules/xregexp/lib/addons/unicode-blocks.js","../../../node_modules/xregexp/tools/output/categories.js","../../../node_modules/xregexp/lib/addons/unicode-categories.js","../../../node_modules/xregexp/tools/output/properties.js","../../../node_modules/xregexp/lib/addons/unicode-properties.js","../../../node_modules/xregexp/tools/output/scripts.js","../../../node_modules/xregexp/lib/addons/unicode-scripts.js","../../../node_modules/xregexp/lib/index.js","../src/utilities.ts","../src/models.ts","../src/recognizer.ts","../src/extractors.ts","../src/parsers.ts","../src/recognizers-text.ts"],"sourcesContent":["export class Culture {\n\n  static readonly English: string = \"en-us\"\n  static readonly Chinese: string = \"zh-cn\"\n  static readonly Spanish: string = \"es-es\"\n  static readonly Portuguese: string = \"pt-br\"\n  static readonly French: string = \"fr-fr\"\n  static readonly German: string = \"de-de\"\n  static readonly Japanese: string = \"ja-jp\"\n  static readonly Dutch: string = \"nl-nl\"\n  static readonly Italian: string = \"it-it\"\n\n  static readonly supportedCultures: Array<Culture> = [\n    new Culture(\"English\", Culture.English),\n    new Culture(\"Chinese\", Culture.Chinese),\n    new Culture(\"Spanish\", Culture.Spanish),\n    new Culture(\"Portuguese\", Culture.Portuguese),\n    new Culture(\"French\", Culture.French),\n    new Culture(\"German\", Culture.German),\n    new Culture(\"Japanese\", Culture.Japanese),\n    new Culture(\"Dutch\", Culture.Dutch),\n    new Culture(\"Italian\", Culture.Italian)\n  ]\n\n  readonly cultureName: string\n  readonly cultureCode: string\n\n  protected constructor(cultureName: string, cultureCode: string) {\n    this.cultureName = cultureName\n    this.cultureCode = cultureCode\n  }\n\n  static getSupportedCultureCodes(): Array<string> {\n    return Culture.supportedCultures.map(c => c.cultureCode)\n  }\n\n  static mapToNearestLanguage(cultureCode: string): string {\n    if (cultureCode !== undefined) {    \n      cultureCode = cultureCode.toLowerCase();\n      var supportedCultureCodes = Culture.getSupportedCultureCodes();\n      \n      if (supportedCultureCodes.indexOf(cultureCode) < 0) {\n        var culturePrefix = cultureCode.split('-')[0].trim();\n\n        supportedCultureCodes.forEach(function(supportedCultureCode) {\n          if (supportedCultureCode.startsWith(culturePrefix)) {\n            cultureCode = supportedCultureCode;\n          }\n        })\n      }\n    }\n\n    return cultureCode;\n  }\n}\n\nexport class CultureInfo {\n  readonly code: string;\n\n  static getCultureInfo(cultureCode: string): CultureInfo {\n    return new CultureInfo(cultureCode);\n  }\n\n  constructor(cultureName: string) {\n    this.code = cultureName;\n  }\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/*!\n * XRegExp 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/**\n * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and\n * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to\n * make your client-side grepping simpler and more powerful, while freeing you from related\n * cross-browser inconsistencies.\n */\n// ==--------------------------==\n// Private stuff\n// ==--------------------------==\n// Property name used for extended regex instance data\nvar REGEX_DATA = 'xregexp'; // Optional features that can be installed and uninstalled\n\nvar features = {\n  astral: false,\n  namespacing: false\n}; // Native methods to use and restore ('native' is an ES3 reserved keyword)\n\nvar nativ = {\n  exec: RegExp.prototype.exec,\n  test: RegExp.prototype.test,\n  match: String.prototype.match,\n  replace: String.prototype.replace,\n  split: String.prototype.split\n}; // Storage for fixed/extended native methods\n\nvar fixed = {}; // Storage for regexes cached by `XRegExp.cache`\n\nvar regexCache = {}; // Storage for pattern details cached by the `XRegExp` constructor\n\nvar patternCache = {}; // Storage for regex syntax tokens added internally or by `XRegExp.addToken`\n\nvar tokens = []; // Token scopes\n\nvar defaultScope = 'default';\nvar classScope = 'class'; // Regexes that match native regex syntax, including octals\n\nvar nativeTokens = {\n  // Any native multicharacter token in default scope, or any single character\n  'default': /\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\\d*|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|\\(\\?(?:[:=!]|<[=!])|[?*+]\\?|{\\d+(?:,\\d*)?}\\??|[\\s\\S]/,\n  // Any native multicharacter token in character class scope, or any single character\n  'class': /\\\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\\dA-Fa-f]{2}|u(?:[\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|c[A-Za-z]|[\\s\\S])|[\\s\\S]/\n}; // Any backreference or dollar-prefixed character in replacement strings\n\nvar replacementToken = /\\$(?:{([\\w$]+)}|<([\\w$]+)>|(\\d\\d?|[\\s\\S]))/g; // Check for correct `exec` handling of nonparticipating capturing groups\n\nvar correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined; // Check for ES6 `flags` prop support\n\nvar hasFlagsProp = /x/.flags !== undefined; // Shortcut to `Object.prototype.toString`\n\nvar _ref = {},\n    toString = _ref.toString;\n\nfunction hasNativeFlag(flag) {\n  // Can't check based on the presence of properties/getters since browsers might support such\n  // properties even when they don't support the corresponding flag in regex construction (tested\n  // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`\n  // throws an error)\n  var isSupported = true;\n\n  try {\n    // Can't use regex literals for testing even in a `try` because regex literals with\n    // unsupported flags cause a compilation error in IE\n    new RegExp('', flag);\n  } catch (exception) {\n    isSupported = false;\n  }\n\n  return isSupported;\n} // Check for ES6 `u` flag support\n\n\nvar hasNativeU = hasNativeFlag('u'); // Check for ES6 `y` flag support\n\nvar hasNativeY = hasNativeFlag('y'); // Tracker for known flags, including addon flags\n\nvar registeredFlags = {\n  g: true,\n  i: true,\n  m: true,\n  u: hasNativeU,\n  y: hasNativeY\n};\n/**\n * Attaches extended data and `XRegExp.prototype` properties to a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to augment.\n * @param {Array} captureNames Array with capture names, or `null`.\n * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.\n * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.\n * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal\n *   operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *   skipping some operations like attaching `XRegExp.prototype` properties.\n * @returns {RegExp} Augmented regex.\n */\n\nfunction augment(regex, captureNames, xSource, xFlags, isInternalOnly) {\n  regex[REGEX_DATA] = {\n    captureNames: captureNames\n  };\n\n  if (isInternalOnly) {\n    return regex;\n  } // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value\n\n\n  if (regex.__proto__) {\n    regex.__proto__ = XRegExp.prototype;\n  } else {\n    for (var p in XRegExp.prototype) {\n      // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this\n      // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`\n      // extensions exist on `regex.prototype` anyway\n      regex[p] = XRegExp.prototype[p];\n    }\n  }\n\n  regex[REGEX_DATA].source = xSource; // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order\n\n  regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;\n  return regex;\n}\n/**\n * Removes any duplicate characters from the provided string.\n *\n * @private\n * @param {String} str String to remove duplicate characters from.\n * @returns {String} String with any duplicate characters removed.\n */\n\n\nfunction clipDuplicates(str) {\n  return nativ.replace.call(str, /([\\s\\S])(?=[\\s\\S]*\\1)/g, '');\n}\n/**\n * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`\n * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing\n * flags g and y while copying the regex.\n *\n * @private\n * @param {RegExp} regex Regex to copy.\n * @param {Object} [options] Options object with optional properties:\n *   - `addG` {Boolean} Add flag g while copying the regex.\n *   - `addY` {Boolean} Add flag y while copying the regex.\n *   - `removeG` {Boolean} Remove flag g while copying the regex.\n *   - `removeY` {Boolean} Remove flag y while copying the regex.\n *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal\n *     operations, and never exposed to users. For internal-only regexes, we can improve perf by\n *     skipping some operations like attaching `XRegExp.prototype` properties.\n *   - `source` {String} Overrides `<regex>.source`, for special cases.\n * @returns {RegExp} Copy of the provided regex, possibly with modified flags.\n */\n\n\nfunction copyRegex(regex, options) {\n  if (!XRegExp.isRegExp(regex)) {\n    throw new TypeError('Type RegExp expected');\n  }\n\n  var xData = regex[REGEX_DATA] || {};\n  var flags = getNativeFlags(regex);\n  var flagsToAdd = '';\n  var flagsToRemove = '';\n  var xregexpSource = null;\n  var xregexpFlags = null;\n  options = options || {};\n\n  if (options.removeG) {\n    flagsToRemove += 'g';\n  }\n\n  if (options.removeY) {\n    flagsToRemove += 'y';\n  }\n\n  if (flagsToRemove) {\n    flags = nativ.replace.call(flags, new RegExp(\"[\".concat(flagsToRemove, \"]+\"), 'g'), '');\n  }\n\n  if (options.addG) {\n    flagsToAdd += 'g';\n  }\n\n  if (options.addY) {\n    flagsToAdd += 'y';\n  }\n\n  if (flagsToAdd) {\n    flags = clipDuplicates(flags + flagsToAdd);\n  }\n\n  if (!options.isInternalOnly) {\n    if (xData.source !== undefined) {\n      xregexpSource = xData.source;\n    } // null or undefined; don't want to add to `flags` if the previous value was null, since\n    // that indicates we're not tracking original precompilation flags\n\n\n    if (xData.flags != null) {\n      // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never\n      // removed for non-internal regexes, so don't need to handle it\n      xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;\n    }\n  } // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid\n  // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and\n  // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the\n  // translation to native regex syntax\n\n\n  regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);\n  return regex;\n}\n/**\n * Converts hexadecimal to decimal.\n *\n * @private\n * @param {String} hex\n * @returns {Number}\n */\n\n\nfunction dec(hex) {\n  return parseInt(hex, 16);\n}\n/**\n * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an\n * inline comment or whitespace with flag x. This is used directly as a token handler function\n * passed to `XRegExp.addToken`.\n *\n * @private\n * @param {String} match Match arg of `XRegExp.addToken` handler\n * @param {String} scope Scope arg of `XRegExp.addToken` handler\n * @param {String} flags Flags arg of `XRegExp.addToken` handler\n * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.\n */\n\n\nfunction getContextualTokenSeparator(match, scope, flags) {\n  if ( // No need to separate tokens if at the beginning or end of a group\n  match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' || // No need to separate tokens if before or after a `|`\n  match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' || // No need to separate tokens if at the beginning or end of the pattern\n  match.index < 1 || match.index + match[0].length >= match.input.length || // No need to separate tokens if at the beginning of a noncapturing group or lookahead.\n  // The way this is written relies on:\n  // - The search regex matching only 3-char strings.\n  // - Although `substr` gives chars from the end of the string if given a negative index,\n  //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`\n  nativ.test.call(/^\\(\\?[:=!]/, match.input.substr(match.index - 3, 3)) || // Avoid separating tokens when the following token is a quantifier\n  isQuantifierNext(match.input, match.index + match[0].length, flags)) {\n    return '';\n  } // Keep tokens separated. This avoids e.g. inadvertedly changing `\\1 1` or `\\1(?#)1` to `\\11`.\n  // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax\n  // error `(? :` into `(?:`.\n\n\n  return '(?:)';\n}\n/**\n * Returns native `RegExp` flags used by a regex object.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {String} Native flags in use.\n */\n\n\nfunction getNativeFlags(regex) {\n  return hasFlagsProp ? regex.flags : // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation\n  // with an empty string) allows this to continue working predictably when\n  // `XRegExp.proptotype.toString` is overridden\n  nativ.exec.call(/\\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];\n}\n/**\n * Determines whether a regex has extended instance data used to track capture names.\n *\n * @private\n * @param {RegExp} regex Regex to check.\n * @returns {Boolean} Whether the regex uses named capture.\n */\n\n\nfunction hasNamedCapture(regex) {\n  return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);\n}\n/**\n * Converts decimal to hexadecimal.\n *\n * @private\n * @param {Number|String} dec\n * @returns {String}\n */\n\n\nfunction hex(dec) {\n  return parseInt(dec, 10).toString(16);\n}\n/**\n * Checks whether the next nonignorable token after the specified position is a quantifier.\n *\n * @private\n * @param {String} pattern Pattern to search within.\n * @param {Number} pos Index in `pattern` to search at.\n * @param {String} flags Flags used by the pattern.\n * @returns {Boolean} Whether the next nonignorable token is a quantifier.\n */\n\n\nfunction isQuantifierNext(pattern, pos, flags) {\n  var inlineCommentPattern = '\\\\(\\\\?#[^)]*\\\\)';\n  var lineCommentPattern = '#[^#\\\\n]*';\n  var quantifierPattern = '[?*+]|{\\\\d+(?:,\\\\d*)?}';\n  return nativ.test.call(flags.indexOf('x') !== -1 ? // Ignore any leading whitespace, line comments, and inline comments\n  /^(?:\\s|#[^#\\n]*|\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/ : // Ignore any leading inline comments\n  /^(?:\\(\\?#[^)]*\\))*(?:[?*+]|{\\d+(?:,\\d*)?})/, pattern.slice(pos));\n}\n/**\n * Determines whether a value is of the specified type, by resolving its internal [[Class]].\n *\n * @private\n * @param {*} value Object to check.\n * @param {String} type Type to check for, in TitleCase.\n * @returns {Boolean} Whether the object matches the type.\n */\n\n\nfunction isType(value, type) {\n  return toString.call(value) === \"[object \".concat(type, \"]\");\n}\n/**\n * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.\n *\n * @private\n * @param {String} str\n * @returns {String}\n */\n\n\nfunction pad4(str) {\n  while (str.length < 4) {\n    str = \"0\".concat(str);\n  }\n\n  return str;\n}\n/**\n * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads\n * the flag preparation logic from the `XRegExp` constructor.\n *\n * @private\n * @param {String} pattern Regex pattern, possibly with a leading mode modifier.\n * @param {String} flags Any combination of flags.\n * @returns {Object} Object with properties `pattern` and `flags`.\n */\n\n\nfunction prepareFlags(pattern, flags) {\n  // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags\n  if (clipDuplicates(flags) !== flags) {\n    throw new SyntaxError(\"Invalid duplicate regex flag \".concat(flags));\n  } // Strip and apply a leading mode modifier with any combination of flags except g or y\n\n\n  pattern = nativ.replace.call(pattern, /^\\(\\?([\\w$]+)\\)/, function ($0, $1) {\n    if (nativ.test.call(/[gy]/, $1)) {\n      throw new SyntaxError(\"Cannot use flag g or y in mode modifier \".concat($0));\n    } // Allow duplicate flags within the mode modifier\n\n\n    flags = clipDuplicates(flags + $1);\n    return '';\n  }); // Throw on unknown native or nonnative flags\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = flags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var flag = _step.value;\n\n      if (!registeredFlags[flag]) {\n        throw new SyntaxError(\"Unknown regex flag \".concat(flag));\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    pattern: pattern,\n    flags: flags\n  };\n}\n/**\n * Prepares an options object from the given value.\n *\n * @private\n * @param {String|Object} value Value to convert to an options object.\n * @returns {Object} Options object.\n */\n\n\nfunction prepareOptions(value) {\n  var options = {};\n\n  if (isType(value, 'String')) {\n    XRegExp.forEach(value, /[^\\s,]+/, function (match) {\n      options[match] = true;\n    });\n    return options;\n  }\n\n  return value;\n}\n/**\n * Registers a flag so it doesn't throw an 'unknown flag' error.\n *\n * @private\n * @param {String} flag Single-character flag to register.\n */\n\n\nfunction registerFlag(flag) {\n  if (!/^[\\w$]$/.test(flag)) {\n    throw new Error('Flag must be a single character A-Za-z0-9_$');\n  }\n\n  registeredFlags[flag] = true;\n}\n/**\n * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified\n * position, until a match is found.\n *\n * @private\n * @param {String} pattern Original pattern from which an XRegExp object is being built.\n * @param {String} flags Flags being used to construct the regex.\n * @param {Number} pos Position to search for tokens within `pattern`.\n * @param {Number} scope Regex scope to apply: 'default' or 'class'.\n * @param {Object} context Context object to use for token handler functions.\n * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.\n */\n\n\nfunction runTokens(pattern, flags, pos, scope, context) {\n  var i = tokens.length;\n  var leadChar = pattern[pos];\n  var result = null;\n  var match;\n  var t; // Run in reverse insertion order\n\n  while (i--) {\n    t = tokens[i];\n\n    if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(flags.indexOf(t.flag) !== -1)) {\n      continue;\n    }\n\n    match = XRegExp.exec(pattern, t.regex, pos, 'sticky');\n\n    if (match) {\n      result = {\n        matchLength: match[0].length,\n        output: t.handler.call(context, match, scope, flags),\n        reparse: t.reparse\n      }; // Finished with token tests\n\n      break;\n    }\n  }\n\n  return result;\n}\n/**\n * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to\n * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if\n * the Unicode Base addon is not available, since flag A is registered by that addon.\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setAstral(on) {\n  features.astral = on;\n}\n/**\n * Adds named capture groups to the `groups` property of match arrays. See here for details:\n * https://github.com/tc39/proposal-regexp-named-groups\n *\n * @private\n * @param {Boolean} on `true` to enable; `false` to disable.\n */\n\n\nfunction setNamespacing(on) {\n  features.namespacing = on;\n}\n/**\n * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow\n * the ES5 abstract operation `ToObject`.\n *\n * @private\n * @param {*} value Object to check and return.\n * @returns {*} The provided object.\n */\n\n\nfunction toObject(value) {\n  // null or undefined\n  if (value == null) {\n    throw new TypeError('Cannot convert null or undefined to object');\n  }\n\n  return value;\n} // ==--------------------------==\n// Constructor\n// ==--------------------------==\n\n/**\n * Creates an extended regular expression object for matching text with a pattern. Differs from a\n * native regular expression in that additional syntax and flags are supported. The returned object\n * is in fact a native `RegExp` and works with all native methods.\n *\n * @class XRegExp\n * @constructor\n * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.\n * @param {String} [flags] Any combination of flags.\n *   Native flags:\n *     - `g` - global\n *     - `i` - ignore case\n *     - `m` - multiline anchors\n *     - `u` - unicode (ES6)\n *     - `y` - sticky (Firefox 3+, ES6)\n *   Additional XRegExp flags:\n *     - `n` - explicit capture\n *     - `s` - dot matches all (aka singleline)\n *     - `x` - free-spacing and line comments (aka extended)\n *     - `A` - astral (requires the Unicode Base addon)\n *   Flags cannot be provided when constructing one `RegExp` from another.\n * @returns {RegExp} Extended regular expression object.\n * @example\n *\n * // With named capture and flag x\n * XRegExp(`(?<year>  [0-9]{4} ) -?  # year\n *          (?<month> [0-9]{2} ) -?  # month\n *          (?<day>   [0-9]{2} )     # day`, 'x');\n *\n * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)\n * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and\n * // have fresh `lastIndex` properties (set to zero).\n * XRegExp(/regex/);\n */\n\n\nfunction XRegExp(pattern, flags) {\n  if (XRegExp.isRegExp(pattern)) {\n    if (flags !== undefined) {\n      throw new TypeError('Cannot supply flags when copying a RegExp');\n    }\n\n    return copyRegex(pattern);\n  } // Copy the argument behavior of `RegExp`\n\n\n  pattern = pattern === undefined ? '' : String(pattern);\n  flags = flags === undefined ? '' : String(flags);\n\n  if (XRegExp.isInstalled('astral') && !(flags.indexOf('A') !== -1)) {\n    // This causes an error to be thrown if the Unicode Base addon is not available\n    flags += 'A';\n  }\n\n  if (!patternCache[pattern]) {\n    patternCache[pattern] = {};\n  }\n\n  if (!patternCache[pattern][flags]) {\n    var context = {\n      hasNamedCapture: false,\n      captureNames: []\n    };\n    var scope = defaultScope;\n    var output = '';\n    var pos = 0;\n    var result; // Check for flag-related errors, and strip/apply flags in a leading mode modifier\n\n    var applied = prepareFlags(pattern, flags);\n    var appliedPattern = applied.pattern;\n    var appliedFlags = applied.flags; // Use XRegExp's tokens to translate the pattern to a native regex pattern.\n    // `appliedPattern.length` may change on each iteration if tokens use `reparse`\n\n    while (pos < appliedPattern.length) {\n      do {\n        // Check for custom tokens at the current position\n        result = runTokens(appliedPattern, appliedFlags, pos, scope, context); // If the matched token used the `reparse` option, splice its output into the\n        // pattern before running tokens again at the same position\n\n        if (result && result.reparse) {\n          appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);\n        }\n      } while (result && result.reparse);\n\n      if (result) {\n        output += result.output;\n        pos += result.matchLength || 1;\n      } else {\n        // Get the native token at the current position\n        var _XRegExp$exec = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky'),\n            _XRegExp$exec2 = _slicedToArray(_XRegExp$exec, 1),\n            token = _XRegExp$exec2[0];\n\n        output += token;\n        pos += token.length;\n\n        if (token === '[' && scope === defaultScope) {\n          scope = classScope;\n        } else if (token === ']' && scope === classScope) {\n          scope = defaultScope;\n        }\n      }\n    }\n\n    patternCache[pattern][flags] = {\n      // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty\n      // groups are sometimes inserted during regex transpilation in order to keep tokens\n      // separated. However, more than one empty group in a row is never needed.\n      pattern: nativ.replace.call(output, /(?:\\(\\?:\\))+/g, '(?:)'),\n      // Strip all but native flags\n      flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),\n      // `context.captureNames` has an item for each capturing group, even if unnamed\n      captures: context.hasNamedCapture ? context.captureNames : null\n    };\n  }\n\n  var generated = patternCache[pattern][flags];\n  return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);\n} // Add `RegExp.prototype` to the prototype chain\n\n\nXRegExp.prototype = /(?:)/; // ==--------------------------==\n// Public properties\n// ==--------------------------==\n\n/**\n * The XRegExp version number as a string containing three dot-separated parts. For example,\n * '2.0.0-beta-3'.\n *\n * @static\n * @memberOf XRegExp\n * @type String\n */\n\nXRegExp.version = '4.2.0'; // ==--------------------------==\n// Public methods\n// ==--------------------------==\n// Intentionally undocumented; used in tests and addons\n\nXRegExp._clipDuplicates = clipDuplicates;\nXRegExp._hasNativeFlag = hasNativeFlag;\nXRegExp._dec = dec;\nXRegExp._hex = hex;\nXRegExp._pad4 = pad4;\n/**\n * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to\n * create XRegExp addons. If more than one token can match the same string, the last added wins.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex object that matches the new token.\n * @param {Function} handler Function that returns a new pattern string (using native regex syntax)\n *   to replace the matched token within all future XRegExp regexes. Has access to persistent\n *   properties of the regex being built, through `this`. Invoked with three arguments:\n *   - The match array, with named backreference properties.\n *   - The regex scope where the match was found: 'default' or 'class'.\n *   - The flags used by the regex, including any flags in a leading mode modifier.\n *   The handler function becomes part of the XRegExp construction process, so be careful not to\n *   construct XRegExps within the function or you will trigger infinite recursion.\n * @param {Object} [options] Options object with optional properties:\n *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.\n *   - `flag` {String} Single-character flag that triggers the token. This also registers the\n *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.\n *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are\n *     not required to trigger the token. This registers the flags, to prevent XRegExp from\n *     throwing an 'unknown flag' error when any of the flags are used.\n *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as\n *     final, and instead be reparseable by other tokens (including the current token). Allows\n *     token chaining or deferring.\n *   - `leadChar` {String} Single character that occurs at the beginning of any successful match\n *     of the token (not always applicable). This doesn't change the behavior of the token unless\n *     you provide an erroneous value. However, providing it can increase the token's performance\n *     since the token can be skipped at any positions where this character doesn't appear.\n * @example\n *\n * // Basic usage: Add \\a for the ALERT control code\n * XRegExp.addToken(\n *   /\\\\a/,\n *   () => '\\\\x07',\n *   {scope: 'all'}\n * );\n * XRegExp('\\\\a[\\\\a-\\\\n]+').test('\\x07\\n\\x07'); // -> true\n *\n * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.\n * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of\n * // character classes only)\n * XRegExp.addToken(\n *   /([?*+]|{\\d+(?:,\\d*)?})(\\??)/,\n *   (match) => `${match[1]}${match[2] ? '' : '?'}`,\n *   {flag: 'U'}\n * );\n * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'\n * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'\n */\n\nXRegExp.addToken = function (regex, handler, options) {\n  options = options || {};\n  var _options = options,\n      optionalFlags = _options.optionalFlags;\n\n  if (options.flag) {\n    registerFlag(options.flag);\n  }\n\n  if (optionalFlags) {\n    optionalFlags = nativ.split.call(optionalFlags, '');\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = optionalFlags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var flag = _step2.value;\n        registerFlag(flag);\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  } // Add to the private list of syntax tokens\n\n\n  tokens.push({\n    regex: copyRegex(regex, {\n      addG: true,\n      addY: hasNativeY,\n      isInternalOnly: true\n    }),\n    handler: handler,\n    scope: options.scope || defaultScope,\n    flag: options.flag,\n    reparse: options.reparse,\n    leadChar: options.leadChar\n  }); // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags\n  // might now produce different results\n\n  XRegExp.cache.flush('patterns');\n};\n/**\n * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with\n * the same pattern and flag combination, the cached copy of the regex is returned.\n *\n * @memberOf XRegExp\n * @param {String} pattern Regex pattern string.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @returns {RegExp} Cached XRegExp object.\n * @example\n *\n * while (match = XRegExp.cache('.', 'gs').exec(str)) {\n *   // The regex is compiled once only\n * }\n */\n\n\nXRegExp.cache = function (pattern, flags) {\n  if (!regexCache[pattern]) {\n    regexCache[pattern] = {};\n  }\n\n  return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));\n}; // Intentionally undocumented; used in tests\n\n\nXRegExp.cache.flush = function (cacheName) {\n  if (cacheName === 'patterns') {\n    // Flush the pattern cache used by the `XRegExp` constructor\n    patternCache = {};\n  } else {\n    // Flush the regex cache populated by `XRegExp.cache`\n    regexCache = {};\n  }\n};\n/**\n * Escapes any regular expression metacharacters, for use when matching literal strings. The result\n * can safely be used at any point within a regex that uses any flags.\n *\n * @memberOf XRegExp\n * @param {String} str String to escape.\n * @returns {String} String with regex metacharacters escaped.\n * @example\n *\n * XRegExp.escape('Escaped? <.>');\n * // -> 'Escaped\\?\\ <\\.>'\n */\n\n\nXRegExp.escape = function (str) {\n  return nativ.replace.call(toObject(str), /[-\\[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n};\n/**\n * Executes a regex search in a specified string. Returns a match array or `null`. If the provided\n * regex uses named capture, named backreference properties are included on the match array.\n * Optional `pos` and `sticky` arguments specify the search start position, and whether the match\n * must start at the specified position only. The `lastIndex` property of the provided regex is not\n * used, but is updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.exec` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Array} Match array with named backreference properties, or `null`.\n * @example\n *\n * // Basic use, with named backreference\n * let match = XRegExp.exec('U+2620', XRegExp('U\\\\+(?<hex>[0-9A-F]{4})'));\n * match.hex; // -> '2620'\n *\n * // With pos and sticky, in a loop\n * let pos = 2, result = [], match;\n * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\\d)>/, pos, 'sticky')) {\n *   result.push(match[1]);\n *   pos = match.index + match[0].length;\n * }\n * // result -> ['2', '3', '4']\n */\n\n\nXRegExp.exec = function (str, regex, pos, sticky) {\n  var cacheKey = 'g';\n  var addY = false;\n  var fakeY = false;\n  var match;\n  addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);\n\n  if (addY) {\n    cacheKey += 'y';\n  } else if (sticky) {\n    // Simulate sticky matching by appending an empty capture to the original regex. The\n    // resulting regex will succeed no matter what at the current index (set with `lastIndex`),\n    // and will not search the rest of the subject string. We'll know that the original regex\n    // has failed if that last capture is `''` rather than `undefined` (i.e., if that last\n    // capture participated in the match).\n    fakeY = true;\n    cacheKey += 'FakeY';\n  }\n\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.match`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: true,\n    addY: addY,\n    source: fakeY ? \"\".concat(regex.source, \"|()\") : undefined,\n    removeY: sticky === false,\n    isInternalOnly: true\n  }));\n  pos = pos || 0;\n  r2.lastIndex = pos; // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.\n\n  match = fixed.exec.call(r2, str); // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means\n  // the original regexp failed (see above).\n\n  if (fakeY && match && match.pop() === '') {\n    match = null;\n  }\n\n  if (regex.global) {\n    regex.lastIndex = match ? r2.lastIndex : 0;\n  }\n\n  return match;\n};\n/**\n * Executes a provided function once per regex match. Searches always start at the beginning of the\n * string and continue until the end, regardless of the state of the regex's `global` property and\n * initial `lastIndex`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Function} callback Function to execute for each match. Invoked with four arguments:\n *   - The match array, with named backreference properties.\n *   - The zero-based match index.\n *   - The string being traversed.\n *   - The regex object being used to traverse the string.\n * @example\n *\n * // Extracts every other digit from a string\n * const evens = [];\n * XRegExp.forEach('1a2345', /\\d/, (match, i) => {\n *   if (i % 2) evens.push(+match[0]);\n * });\n * // evens -> [2, 4]\n */\n\n\nXRegExp.forEach = function (str, regex, callback) {\n  var pos = 0;\n  var i = -1;\n  var match;\n\n  while (match = XRegExp.exec(str, regex, pos)) {\n    // Because `regex` is provided to `callback`, the function could use the deprecated/\n    // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`\n    // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,\n    // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of\n    // regexes, mutating the regex will not have any effect on the iteration or matched strings,\n    // which is a nice side effect that brings extra safety.\n    callback(match, ++i, str, regex);\n    pos = match.index + (match[0].length || 1);\n  }\n};\n/**\n * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with\n * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native\n * regexes are not recompiled using XRegExp syntax.\n *\n * @memberOf XRegExp\n * @param {RegExp} regex Regex to globalize.\n * @returns {RegExp} Copy of the provided regex with flag `g` added.\n * @example\n *\n * const globalCopy = XRegExp.globalize(/regex/);\n * globalCopy.global; // -> true\n */\n\n\nXRegExp.globalize = function (regex) {\n  return copyRegex(regex, {\n    addG: true\n  });\n};\n/**\n * Installs optional features according to the specified options. Can be undone using\n * `XRegExp.uninstall`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.install({\n *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)\n *   astral: true,\n *\n *   // Adds named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.install('astral namespacing');\n */\n\n\nXRegExp.install = function (options) {\n  options = prepareOptions(options);\n\n  if (!features.astral && options.astral) {\n    setAstral(true);\n  }\n\n  if (!features.namespacing && options.namespacing) {\n    setNamespacing(true);\n  }\n};\n/**\n * Checks whether an individual optional feature is installed.\n *\n * @memberOf XRegExp\n * @param {String} feature Name of the feature to check. One of:\n *   - `astral`\n *   - `namespacing`\n * @returns {Boolean} Whether the feature is installed.\n * @example\n *\n * XRegExp.isInstalled('astral');\n */\n\n\nXRegExp.isInstalled = function (feature) {\n  return !!features[feature];\n};\n/**\n * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes\n * created in another frame, when `instanceof` and `constructor` checks would fail.\n *\n * @memberOf XRegExp\n * @param {*} value Object to check.\n * @returns {Boolean} Whether the object is a `RegExp` object.\n * @example\n *\n * XRegExp.isRegExp('string'); // -> false\n * XRegExp.isRegExp(/regex/i); // -> true\n * XRegExp.isRegExp(RegExp('^', 'm')); // -> true\n * XRegExp.isRegExp(XRegExp('(?s).')); // -> true\n */\n\n\nXRegExp.isRegExp = function (value) {\n  return toString.call(value) === '[object RegExp]';\n}; // isType(value, 'RegExp');\n\n/**\n * Returns the first matched string, or in global mode, an array containing all matched strings.\n * This is essentially a more convenient re-implementation of `String.prototype.match` that gives\n * the result types you actually want (string instead of `exec`-style array in match-first mode,\n * and an empty array instead of `null` when no matches are found in match-all mode). It also lets\n * you override flag g and ignore `lastIndex`, and fixes browser bugs.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to\n *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,\n *   `scope` is 'all'.\n * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all\n *   mode: Array of all matched strings, or an empty array.\n * @example\n *\n * // Match first\n * XRegExp.match('abc', /\\w/); // -> 'a'\n * XRegExp.match('abc', /\\w/g, 'one'); // -> 'a'\n * XRegExp.match('abc', /x/g, 'one'); // -> null\n *\n * // Match all\n * XRegExp.match('abc', /\\w/g); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /\\w/, 'all'); // -> ['a', 'b', 'c']\n * XRegExp.match('abc', /x/, 'all'); // -> []\n */\n\n\nXRegExp.match = function (str, regex, scope) {\n  var global = regex.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';\n  regex[REGEX_DATA] = regex[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`replace`\n\n  var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {\n    addG: !!global,\n    removeG: scope === 'one',\n    isInternalOnly: true\n  }));\n  var result = nativ.match.call(toObject(str), r2);\n\n  if (regex.global) {\n    regex.lastIndex = scope === 'one' && result ? // Can't use `r2.lastIndex` since `r2` is nonglobal in this case\n    result.index + result[0].length : 0;\n  }\n\n  return global ? result || [] : result && result[0];\n};\n/**\n * Retrieves the matches from searching a string using a chain of regexes that successively search\n * within previous matches. The provided `chain` array can contain regexes and or objects with\n * `regex` and `backref` properties. When a backreference is specified, the named or numbered\n * backreference is passed forward to the next regex or returned.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} chain Regexes that each search for matches within preceding results.\n * @returns {Array} Matches by the last regex in the chain, or an empty array.\n * @example\n *\n * // Basic usage; matches numbers within <b> tags\n * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [\n *   XRegExp('(?is)<b>.*?</b>'),\n *   /\\d+/\n * ]);\n * // -> ['2', '4', '56']\n *\n * // Passing forward and returning specific backreferences\n * html = '<a href=\"http://xregexp.com/api/\">XRegExp</a>\\\n *         <a href=\"http://www.google.com/\">Google</a>';\n * XRegExp.matchChain(html, [\n *   {regex: /<a href=\"([^\"]+)\">/i, backref: 1},\n *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}\n * ]);\n * // -> ['xregexp.com', 'www.google.com']\n */\n\n\nXRegExp.matchChain = function (str, chain) {\n  return function recurseChain(values, level) {\n    var item = chain[level].regex ? chain[level] : {\n      regex: chain[level]\n    };\n    var matches = [];\n\n    function addMatch(match) {\n      if (item.backref) {\n        var ERR_UNDEFINED_GROUP = \"Backreference to undefined group: \".concat(item.backref);\n        var isNamedBackref = isNaN(item.backref);\n\n        if (isNamedBackref && XRegExp.isInstalled('namespacing')) {\n          // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`\n          if (!(item.backref in match.groups)) {\n            throw new ReferenceError(ERR_UNDEFINED_GROUP);\n          }\n        } else if (!match.hasOwnProperty(item.backref)) {\n          throw new ReferenceError(ERR_UNDEFINED_GROUP);\n        }\n\n        var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];\n        matches.push(backrefValue || '');\n      } else {\n        matches.push(match[0]);\n      }\n    }\n\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var value = _step3.value;\n        XRegExp.forEach(value, item.regex, addMatch);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n\n    return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);\n  }([str], 0);\n};\n/**\n * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string\n * or regex, and the replacement can be a string or a function to be called for each match. To\n * perform a global search and replace, use the optional `scope` argument or include flag g if using\n * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.\n * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser\n * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n *   Replacement strings can include special replacement syntax:\n *     - $$ - Inserts a literal $ character.\n *     - $&, $0 - Inserts the matched substring.\n *     - $` - Inserts the string that precedes the matched substring (left context).\n *     - $' - Inserts the string that follows the matched substring (right context).\n *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts\n *       backreference n/nn.\n *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing\n *       group, inserts backreference n.\n *   Replacement functions are invoked with three or more arguments:\n *     - The matched substring (corresponds to $& above). Named backreferences are accessible as\n *       properties of this first argument.\n *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).\n *     - The zero-based index of the match within the total search string.\n *     - The total string being searched.\n * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not\n *   explicitly specified and using a regex with flag g, `scope` is 'all'.\n * @returns {String} New string with one or all matches replaced.\n * @example\n *\n * // Regex search, using named backreferences in replacement string\n * const name = XRegExp('(?<first>\\\\w+) (?<last>\\\\w+)');\n * XRegExp.replace('John Smith', name, '$<last>, $<first>');\n * // -> 'Smith, John'\n *\n * // Regex search, using named backreferences in replacement function\n * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);\n * // -> 'Smith, John'\n *\n * // String search, with replace-all\n * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');\n * // -> 'XRegExp builds XRegExps'\n */\n\n\nXRegExp.replace = function (str, search, replacement, scope) {\n  var isRegex = XRegExp.isRegExp(search);\n  var global = search.global && scope !== 'one' || scope === 'all';\n  var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';\n  var s2 = search;\n\n  if (isRegex) {\n    search[REGEX_DATA] = search[REGEX_DATA] || {}; // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s\n    // `lastIndex` isn't updated *during* replacement iterations\n\n    s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {\n      addG: !!global,\n      removeG: scope === 'one',\n      isInternalOnly: true\n    }));\n  } else if (global) {\n    s2 = new RegExp(XRegExp.escape(String(search)), 'g');\n  } // Fixed `replace` required for named backreferences, etc.\n\n\n  var result = fixed.replace.call(toObject(str), s2, replacement);\n\n  if (isRegex && search.global) {\n    // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n    search.lastIndex = 0;\n  }\n\n  return result;\n};\n/**\n * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an\n * array of replacement details. Later replacements operate on the output of earlier replacements.\n * Replacement details are accepted as an array with a regex or string to search for, the\n * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp\n * replacement text syntax, which supports named backreference properties via `${name}` or\n * `$<name>`.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {Array} replacements Array of replacement detail arrays.\n * @returns {String} New string with all replacements.\n * @example\n *\n * str = XRegExp.replaceEach(str, [\n *   [XRegExp('(?<name>a)'), 'z${name}'],\n *   [/b/gi, 'y'],\n *   [/c/g, 'x', 'one'], // scope 'one' overrides /g\n *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g\n *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings\n *   [/f/g, ($0) => $0.toUpperCase()]\n * ]);\n */\n\n\nXRegExp.replaceEach = function (str, replacements) {\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = replacements[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var r = _step4.value;\n      str = XRegExp.replace(str, r[0], r[1], r[2]);\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  return str;\n};\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * XRegExp.split('a b c', ' ');\n * // -> ['a', 'b', 'c']\n *\n * // With limit\n * XRegExp.split('a b c', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * XRegExp.split('..word1..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', '..']\n */\n\n\nXRegExp.split = function (str, separator, limit) {\n  return fixed.split.call(toObject(str), separator, limit);\n};\n/**\n * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and\n * `sticky` arguments specify the search start position, and whether the match must start at the\n * specified position only. The `lastIndex` property of the provided regex is not used, but is\n * updated for compatibility. Also fixes browser bugs compared to the native\n * `RegExp.prototype.test` and can be used reliably cross-browser.\n *\n * @memberOf XRegExp\n * @param {String} str String to search.\n * @param {RegExp} regex Regex to search with.\n * @param {Number} [pos=0] Zero-based index at which to start the search.\n * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position\n *   only. The string `'sticky'` is accepted as an alternative to `true`.\n * @returns {Boolean} Whether the regex matched the provided value.\n * @example\n *\n * // Basic use\n * XRegExp.test('abc', /c/); // -> true\n *\n * // With pos and sticky\n * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false\n * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true\n */\n// Do this the easy way :-)\n\n\nXRegExp.test = function (str, regex, pos, sticky) {\n  return !!XRegExp.exec(str, regex, pos, sticky);\n};\n/**\n * Uninstalls optional features according to the specified options. All optional features start out\n * uninstalled, so this is used to undo the actions of `XRegExp.install`.\n *\n * @memberOf XRegExp\n * @param {Object|String} options Options object or string.\n * @example\n *\n * // With an options object\n * XRegExp.uninstall({\n *   // Disables support for astral code points in Unicode addons\n *   astral: true,\n *\n *   // Don't add named capture groups to the `groups` property of matches\n *   namespacing: true\n * });\n *\n * // With an options string\n * XRegExp.uninstall('astral namespacing');\n */\n\n\nXRegExp.uninstall = function (options) {\n  options = prepareOptions(options);\n\n  if (features.astral && options.astral) {\n    setAstral(false);\n  }\n\n  if (features.namespacing && options.namespacing) {\n    setNamespacing(false);\n  }\n};\n/**\n * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as\n * regex objects or strings. Metacharacters are escaped in patterns provided as strings.\n * Backreferences in provided regex objects are automatically renumbered to work correctly within\n * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the\n * `flags` argument.\n *\n * @memberOf XRegExp\n * @param {Array} patterns Regexes and strings to combine.\n * @param {String} [flags] Any combination of XRegExp flags.\n * @param {Object} [options] Options object with optional properties:\n *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.\n * @returns {RegExp} Union of the provided regexes and strings.\n * @example\n *\n * XRegExp.union(['a+b*c', /(dogs)\\1/, /(cats)\\1/], 'i');\n * // -> /a\\+b\\*c|(dogs)\\1|(cats)\\2/i\n *\n * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});\n * // -> /manbearpig/i\n */\n\n\nXRegExp.union = function (patterns, flags, options) {\n  options = options || {};\n  var conjunction = options.conjunction || 'or';\n  var numCaptures = 0;\n  var numPriorCaptures;\n  var captureNames;\n\n  function rewrite(match, paren, backref) {\n    var name = captureNames[numCaptures - numPriorCaptures]; // Capturing group\n\n    if (paren) {\n      ++numCaptures; // If the current capture has a name, preserve the name\n\n      if (name) {\n        return \"(?<\".concat(name, \">\");\n      } // Backreference\n\n    } else if (backref) {\n      // Rewrite the backreference\n      return \"\\\\\".concat(+backref + numPriorCaptures);\n    }\n\n    return match;\n  }\n\n  if (!(isType(patterns, 'Array') && patterns.length)) {\n    throw new TypeError('Must provide a nonempty array of patterns to merge');\n  }\n\n  var parts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var output = [];\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = patterns[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var pattern = _step5.value;\n\n      if (XRegExp.isRegExp(pattern)) {\n        numPriorCaptures = numCaptures;\n        captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || []; // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are\n        // independently valid; helps keep this simple. Named captures are put back\n\n        output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));\n      } else {\n        output.push(XRegExp.escape(pattern));\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  var separator = conjunction === 'none' ? '' : '|';\n  return XRegExp(output.join(separator), flags);\n}; // ==--------------------------==\n// Fixed/extended native methods\n// ==--------------------------==\n\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Array} Match array with named backreference properties, or `null`.\n */\n\n\nfixed.exec = function (str) {\n  var origLastIndex = this.lastIndex;\n  var match = nativ.exec.apply(this, arguments);\n\n  if (match) {\n    // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing\n    // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9\n    // in standards mode follows the spec.\n    if (!correctExecNpcg && match.length > 1 && match.indexOf('') !== -1) {\n      var r2 = copyRegex(this, {\n        removeG: true,\n        isInternalOnly: true\n      }); // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed\n      // matching due to characters outside the match\n\n      nativ.replace.call(String(str).slice(match.index), r2, function () {\n        var len = arguments.length; // Skip index 0 and the last 2\n\n        for (var i = 1; i < len - 2; ++i) {\n          if ((i < 0 || arguments.length <= i ? undefined : arguments[i]) === undefined) {\n            match[i] = undefined;\n          }\n        }\n      });\n    } // Attach named capture properties\n\n\n    var groupsObject = match;\n\n    if (XRegExp.isInstalled('namespacing')) {\n      // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n      match.groups = Object.create(null);\n      groupsObject = match.groups;\n    }\n\n    if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {\n      // Skip index 0\n      for (var i = 1; i < match.length; ++i) {\n        var name = this[REGEX_DATA].captureNames[i - 1];\n\n        if (name) {\n          groupsObject[name] = match[i];\n        }\n      }\n    } // Fix browsers that increment `lastIndex` after zero-length matches\n\n\n    if (this.global && !match[0].length && this.lastIndex > match.index) {\n      this.lastIndex = match.index;\n    }\n  }\n\n  if (!this.global) {\n    // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n    this.lastIndex = origLastIndex;\n  }\n\n  return match;\n};\n/**\n * Fixes browser bugs in the native `RegExp.prototype.test`.\n *\n * @memberOf RegExp\n * @param {String} str String to search.\n * @returns {Boolean} Whether the regex matched the provided value.\n */\n\n\nfixed.test = function (str) {\n  // Do this the easy way :-)\n  return !!fixed.exec.call(this, str);\n};\n/**\n * Adds named capture support (with backreferences returned as `result.name`), and fixes browser\n * bugs in the native `String.prototype.match`.\n *\n * @memberOf String\n * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.\n * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,\n *   the result of calling `regex.exec(this)`.\n */\n\n\nfixed.match = function (regex) {\n  if (!XRegExp.isRegExp(regex)) {\n    // Use the native `RegExp` rather than `XRegExp`\n    regex = new RegExp(regex);\n  } else if (regex.global) {\n    var result = nativ.match.apply(this, arguments); // Fixes IE bug\n\n    regex.lastIndex = 0;\n    return result;\n  }\n\n  return fixed.exec.call(regex, toObject(this));\n};\n/**\n * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement\n * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also\n * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex\n * search value, and the value of a replacement regex's `lastIndex` property during replacement\n * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third\n * (`flags`) argument. Use via `XRegExp.replace`.\n *\n * @memberOf String\n * @param {RegExp|String} search Search pattern to be replaced.\n * @param {String|Function} replacement Replacement string or a function invoked to create it.\n * @returns {String} New string with one or all matches replaced.\n */\n\n\nfixed.replace = function (search, replacement) {\n  var isRegex = XRegExp.isRegExp(search);\n  var origLastIndex;\n  var captureNames;\n  var result;\n\n  if (isRegex) {\n    if (search[REGEX_DATA]) {\n      captureNames = search[REGEX_DATA].captureNames;\n    } // Only needed if `search` is nonglobal\n\n\n    origLastIndex = search.lastIndex;\n  } else {\n    search += ''; // Type-convert\n  } // Don't use `typeof`; some older browsers return 'function' for regex objects\n\n\n  if (isType(replacement, 'Function')) {\n    // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement\n    // functions isn't type-converted to a string\n    result = nativ.replace.call(String(this), search, function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (captureNames) {\n        var groupsObject;\n\n        if (XRegExp.isInstalled('namespacing')) {\n          // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec\n          groupsObject = Object.create(null);\n          args.push(groupsObject);\n        } else {\n          // Change the `args[0]` string primitive to a `String` object that can store\n          // properties. This really does need to use `String` as a constructor\n          args[0] = new String(args[0]);\n          groupsObject = args[0];\n        } // Store named backreferences\n\n\n        for (var i = 0; i < captureNames.length; ++i) {\n          if (captureNames[i]) {\n            groupsObject[captureNames[i]] = args[i + 1];\n          }\n        }\n      } // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari\n      // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)\n\n\n      if (isRegex && search.global) {\n        search.lastIndex = args[args.length - 2] + args[0].length;\n      } // ES6 specs the context for replacement functions as `undefined`\n\n\n      return replacement.apply(void 0, args);\n    });\n  } else {\n    // Ensure that the last value of `args` will be a string when given nonstring `this`,\n    // while still throwing on null or undefined context\n    result = nativ.replace.call(this == null ? this : String(this), search, function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return nativ.replace.call(String(replacement), replacementToken, replacer);\n\n      function replacer($0, bracketed, angled, dollarToken) {\n        bracketed = bracketed || angled; // Named or numbered backreference with curly or angled braces\n\n        if (bracketed) {\n          // XRegExp behavior for `${n}` or `$<n>`:\n          // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the\n          //    entire match. Any number of leading zeros may be used.\n          // 2. Backreference to named capture `n`, if it exists and is not an integer\n          //    overridden by numbered capture. In practice, this does not overlap with\n          //    numbered capture since XRegExp does not allow named capture to use a bare\n          //    integer as the name.\n          // 3. If the name or number does not refer to an existing capturing group, it's\n          //    an error.\n          var n = +bracketed; // Type-convert; drop leading zeros\n\n          if (n <= args.length - 3) {\n            return args[n] || '';\n          } // Groups with the same name is an error, else would need `lastIndexOf`\n\n\n          n = captureNames ? captureNames.indexOf(bracketed) : -1;\n\n          if (n < 0) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[n + 1] || '';\n        } // Else, special variable or numbered backreference without curly braces\n\n\n        if (dollarToken === '$') {\n          // $$\n          return '$';\n        }\n\n        if (dollarToken === '&' || +dollarToken === 0) {\n          // $&, $0 (not followed by 1-9), $00\n          return args[0];\n        }\n\n        if (dollarToken === '`') {\n          // $` (left context)\n          return args[args.length - 1].slice(0, args[args.length - 2]);\n        }\n\n        if (dollarToken === \"'\") {\n          // $' (right context)\n          return args[args.length - 1].slice(args[args.length - 2] + args[0].length);\n        } // Else, numbered backreference without braces\n\n\n        dollarToken = +dollarToken; // Type-convert; drop leading zero\n        // XRegExp behavior for `$n` and `$nn`:\n        // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.\n        // - `$1` is an error if no capturing groups.\n        // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`\n        //   instead.\n        // - `$01` is `$1` if at least one capturing group, else it's an error.\n        // - `$0` (not followed by 1-9) and `$00` are the entire match.\n        // Native behavior, for comparison:\n        // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.\n        // - `$1` is a literal `$1` if no capturing groups.\n        // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.\n        // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.\n        // - `$0` is a literal `$0`.\n\n        if (!isNaN(dollarToken)) {\n          if (dollarToken > args.length - 3) {\n            throw new SyntaxError(\"Backreference to undefined group \".concat($0));\n          }\n\n          return args[dollarToken] || '';\n        } // `$` followed by an unsupported char is an error, unlike native JS\n\n\n        throw new SyntaxError(\"Invalid token \".concat($0));\n      }\n    });\n  }\n\n  if (isRegex) {\n    if (search.global) {\n      // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)\n      search.lastIndex = 0;\n    } else {\n      // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)\n      search.lastIndex = origLastIndex;\n    }\n  }\n\n  return result;\n};\n/**\n * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.\n *\n * @memberOf String\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n */\n\n\nfixed.split = function (separator, limit) {\n  if (!XRegExp.isRegExp(separator)) {\n    // Browsers handle nonregex split correctly, so use the faster native method\n    return nativ.split.apply(this, arguments);\n  }\n\n  var str = String(this);\n  var output = [];\n  var origLastIndex = separator.lastIndex;\n  var lastLastIndex = 0;\n  var lastLength; // Values for `limit`, per the spec:\n  // If undefined: pow(2,32) - 1\n  // If 0, Infinity, or NaN: 0\n  // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);\n  // If negative number: pow(2,32) - floor(abs(limit))\n  // If other: Type-convert, then use the above rules\n  // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless\n  // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+\n\n  limit = (limit === undefined ? -1 : limit) >>> 0;\n  XRegExp.forEach(str, separator, function (match) {\n    // This condition is not the same as `if (match[0].length)`\n    if (match.index + match[0].length > lastLastIndex) {\n      output.push(str.slice(lastLastIndex, match.index));\n\n      if (match.length > 1 && match.index < str.length) {\n        Array.prototype.push.apply(output, match.slice(1));\n      }\n\n      lastLength = match[0].length;\n      lastLastIndex = match.index + lastLength;\n    }\n  });\n\n  if (lastLastIndex === str.length) {\n    if (!nativ.test.call(separator, '') || lastLength) {\n      output.push('');\n    }\n  } else {\n    output.push(str.slice(lastLastIndex));\n  }\n\n  separator.lastIndex = origLastIndex;\n  return output.length > limit ? output.slice(0, limit) : output;\n}; // ==--------------------------==\n// Built-in syntax/flag tokens\n// ==--------------------------==\n\n/*\n * Letter escapes that natively match literal characters: `\\a`, `\\A`, etc. These should be\n * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser\n * consistency and to reserve their syntax, but lets them be superseded by addons.\n */\n\n\nXRegExp.addToken(/\\\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\\dA-Fa-f]{4}|{[\\dA-Fa-f]+})|x(?![\\dA-Fa-f]{2}))/, function (match, scope) {\n  // \\B is allowed in default scope only\n  if (match[1] === 'B' && scope === defaultScope) {\n    return match[0];\n  }\n\n  throw new SyntaxError(\"Invalid escape \".concat(match[0]));\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Unicode code point escape with curly braces: `\\u{N..}`. `N..` is any one or more digit\n * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag\n * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to\n * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior\n * if you follow a `\\u{N..}` token that references a code point above U+FFFF with a quantifier, or\n * if you use the same in a character class.\n */\n\nXRegExp.addToken(/\\\\u{([\\dA-Fa-f]+)}/, function (match, scope, flags) {\n  var code = dec(match[1]);\n\n  if (code > 0x10FFFF) {\n    throw new SyntaxError(\"Invalid Unicode code point \".concat(match[0]));\n  }\n\n  if (code <= 0xFFFF) {\n    // Converting to \\uNNNN avoids needing to escape the literal character and keep it\n    // separate from preceding tokens\n    return \"\\\\u\".concat(pad4(hex(code)));\n  } // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling\n\n\n  if (hasNativeU && flags.indexOf('u') !== -1) {\n    return match[0];\n  }\n\n  throw new SyntaxError('Cannot use Unicode code point above \\\\u{FFFF} without flag u');\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.\n * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because\n * character class endings can't be determined.\n */\n\nXRegExp.addToken(/\\[(\\^?)\\]/, // For cross-browser compatibility with ES3, convert [] to \\b\\B and [^] to [\\s\\S].\n// (?!) should work like \\b\\B, but is unreliable in some versions of Firefox\n\n/* eslint-disable no-confusing-arrow */\nfunction (match) {\n  return match[1] ? '[\\\\s\\\\S]' : '\\\\b\\\\B';\n},\n/* eslint-enable no-confusing-arrow */\n{\n  leadChar: '['\n});\n/*\n * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in\n * free-spacing mode (flag x).\n */\n\nXRegExp.addToken(/\\(\\?#[^)]*\\)/, getContextualTokenSeparator, {\n  leadChar: '('\n});\n/*\n * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.\n */\n\nXRegExp.addToken(/\\s+|#[^\\n]*\\n?/, getContextualTokenSeparator, {\n  flag: 'x'\n});\n/*\n * Dot, in dotall mode (aka singleline mode, flag s) only.\n */\n\nXRegExp.addToken(/\\./, function () {\n  return '[\\\\s\\\\S]';\n}, {\n  flag: 's',\n  leadChar: '.'\n});\n/*\n * Named backreference: `\\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,\n * and $ only. Also allows numbered backreferences as `\\k<n>`.\n */\n\nXRegExp.addToken(/\\\\k<([\\w$]+)>/, function (match) {\n  // Groups with the same name is an error, else would need `lastIndexOf`\n  var index = isNaN(match[1]) ? this.captureNames.indexOf(match[1]) + 1 : +match[1];\n  var endIndex = match.index + match[0].length;\n\n  if (!index || index > this.captureNames.length) {\n    throw new SyntaxError(\"Backreference to undefined group \".concat(match[0]));\n  } // Keep backreferences separate from subsequent literal numbers. This avoids e.g.\n  // inadvertedly changing `(?<n>)\\k<n>1` to `()\\11`.\n\n\n  return \"\\\\\".concat(index).concat(endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');\n}, {\n  leadChar: '\\\\'\n});\n/*\n * Numbered backreference or octal, plus any following digits: `\\0`, `\\11`, etc. Octals except `\\0`\n * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches\n * are returned unaltered. IE < 9 doesn't support backreferences above `\\99` in regex syntax.\n */\n\nXRegExp.addToken(/\\\\(\\d+)/, function (match, scope) {\n  if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {\n    throw new SyntaxError(\"Cannot use octal escape or backreference to undefined group \".concat(match[0]));\n  }\n\n  return match[0];\n}, {\n  scope: 'all',\n  leadChar: '\\\\'\n});\n/*\n * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the\n * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style\n * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively\n * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to\n * Python-style named capture as octals.\n */\n\nXRegExp.addToken(/\\(\\?P?<([\\w$]+)>/, function (match) {\n  // Disallow bare integers as names because named backreferences are added to match arrays\n  // and therefore numeric properties may lead to incorrect lookups\n  if (!isNaN(match[1])) {\n    throw new SyntaxError(\"Cannot use integer as capture name \".concat(match[0]));\n  }\n\n  if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {\n    throw new SyntaxError(\"Cannot use reserved word as capture name \".concat(match[0]));\n  }\n\n  if (this.captureNames.indexOf(match[1]) !== -1) {\n    throw new SyntaxError(\"Cannot use same name for multiple groups \".concat(match[0]));\n  }\n\n  this.captureNames.push(match[1]);\n  this.hasNamedCapture = true;\n  return '(';\n}, {\n  leadChar: '('\n});\n/*\n * Capturing group; match the opening parenthesis only. Required for support of named capturing\n * groups. Also adds explicit capture mode (flag n).\n */\n\nXRegExp.addToken(/\\((?!\\?)/, function (match, scope, flags) {\n  if (flags.indexOf('n') !== -1) {\n    return '(?:';\n  }\n\n  this.captureNames.push(null);\n  return '(';\n}, {\n  optionalFlags: 'n',\n  leadChar: '('\n});\nvar _default = XRegExp;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp.build 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2012-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  var REGEX_DATA = 'xregexp';\n  var subParts = /(\\()(?!\\?)|\\\\([1-9]\\d*)|\\\\[\\s\\S]|\\[(?:[^\\\\\\]]|\\\\[\\s\\S])*\\]/g;\n  var parts = XRegExp.union([/\\({{([\\w$]+)}}\\)|{{([\\w$]+)}}/, subParts], 'g', {\n    conjunction: 'or'\n  });\n  /**\n   * Strips a leading `^` and trailing unescaped `$`, if both are present.\n   *\n   * @private\n   * @param {String} pattern Pattern to process.\n   * @returns {String} Pattern with edge anchors removed.\n   */\n\n  function deanchor(pattern) {\n    // Allow any number of empty noncapturing groups before/after anchors, because regexes\n    // built/generated by XRegExp sometimes include them\n    var leadingAnchor = /^(?:\\(\\?:\\))*\\^/;\n    var trailingAnchor = /\\$(?:\\(\\?:\\))*$/;\n\n    if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) && // Ensure that the trailing `$` isn't escaped\n    trailingAnchor.test(pattern.replace(/\\\\[\\s\\S]/g, ''))) {\n      return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');\n    }\n\n    return pattern;\n  }\n  /**\n   * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.\n   *\n   * @private\n   * @param {String|RegExp} value Value to convert.\n   * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not\n   *   already a regex generated by XRegExp\n   * @returns {RegExp} XRegExp object with XRegExp syntax applied.\n   */\n\n\n  function asXRegExp(value, addFlagX) {\n    var flags = addFlagX ? 'x' : '';\n    return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ? // Don't recompile, to preserve capture names\n    value : // Recompile as XRegExp\n    XRegExp(value.source, flags) : // Compile string as XRegExp\n    XRegExp(value, flags);\n  }\n\n  function interpolate(substitution) {\n    return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);\n  }\n\n  function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {\n    subpatterns[\"subpattern\".concat(subpatternIndex)] = interpolated;\n    return subpatterns;\n  }\n\n  function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {\n    var hasSubpattern = subpatternIndex < rawLiterals.length - 1;\n    return raw + (hasSubpattern ? \"{{subpattern\".concat(subpatternIndex, \"}}\") : '');\n  }\n  /**\n   * Provides tagged template literals that create regexes with XRegExp syntax and flags. The\n   * provided pattern is handled as a raw string, so backslashes don't need to be escaped.\n   *\n   * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated\n   * patterns are treated as atomic units when quantified, interpolated strings have their special\n   * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated\n   * regexes if both are present, and any backreferences within an interpolated regex are\n   * rewritten to work within the overall pattern.\n   *\n   * @memberOf XRegExp\n   * @param {String} [flags] Any combination of XRegExp flags.\n   * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.\n   * @example\n   *\n   * const h12 = /1[0-2]|0?[1-9]/;\n   * const h24 = /2[0-3]|[01][0-9]/;\n   * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;\n   * const minutes = /^[0-5][0-9]$/;\n   * // Note that explicitly naming the 'minutes' group is required for named backreferences\n   * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;\n   * time.test('10:59'); // -> true\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\n   */\n\n\n  XRegExp.tag = function (flags) {\n    return function (literals) {\n      for (var _len = arguments.length, substitutions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        substitutions[_key - 1] = arguments[_key];\n      }\n\n      var subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});\n      var pattern = literals.raw.map(embedSubpatternAfter).join('');\n      return XRegExp.build(pattern, subpatterns, flags);\n    };\n  };\n  /**\n   * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in\n   * the outer pattern and provided subpatterns are automatically renumbered to work correctly.\n   * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.\n   *\n   * @memberOf XRegExp\n   * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows\n   *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within\n   *   character classes.\n   * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A\n   *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.\n   * @param {String} [flags] Any combination of XRegExp flags.\n   * @returns {RegExp} Regex with interpolated subpatterns.\n   * @example\n   *\n   * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {\n   *   hours: XRegExp.build('{{h12}} : | {{h24}}', {\n   *     h12: /1[0-2]|0?[1-9]/,\n   *     h24: /2[0-3]|[01][0-9]/\n   *   }, 'x'),\n   *   minutes: /^[0-5][0-9]$/\n   * });\n   * time.test('10:59'); // -> true\n   * XRegExp.exec('10:59', time).minutes; // -> '59'\n   */\n\n\n  XRegExp.build = function (pattern, subs, flags) {\n    flags = flags || ''; // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how\n    // some browsers convert `RegExp('\\n')` to a regex that contains the literal characters `\\`\n    // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.\n\n    var addFlagX = flags.indexOf('x') !== -1;\n    var inlineFlags = /^\\(\\?([\\w$]+)\\)/.exec(pattern); // Add flags within a leading mode modifier to the overall pattern's flags\n\n    if (inlineFlags) {\n      flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);\n    }\n\n    var data = {};\n\n    for (var p in subs) {\n      if (subs.hasOwnProperty(p)) {\n        // Passing to XRegExp enables extended syntax and ensures independent validity,\n        // lest an unescaped `(`, `)`, `[`, or trailing `\\` breaks the `(?:)` wrapper. For\n        // subpatterns provided as native regexes, it dies on octals and adds the property\n        // used to hold extended regex instance data, for simplicity.\n        var sub = asXRegExp(subs[p], addFlagX);\n        data[p] = {\n          // Deanchoring allows embedding independently useful anchored regexes. If you\n          // really need to keep your anchors, double them (i.e., `^^...$$`).\n          pattern: deanchor(sub.source),\n          names: sub[REGEX_DATA].captureNames || []\n        };\n      }\n    } // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;\n    // helps keep this simple. Named captures will be put back.\n\n\n    var patternAsRegex = asXRegExp(pattern, addFlagX); // 'Caps' is short for 'captures'\n\n    var numCaps = 0;\n    var numPriorCaps;\n    var numOuterCaps = 0;\n    var outerCapsMap = [0];\n    var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];\n    var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {\n      var subName = $1 || $2;\n      var capName;\n      var intro;\n      var localCapIndex; // Named subpattern\n\n      if (subName) {\n        if (!data.hasOwnProperty(subName)) {\n          throw new ReferenceError(\"Undefined property \".concat($0));\n        } // Named subpattern was wrapped in a capturing group\n\n\n        if ($1) {\n          capName = outerCapNames[numOuterCaps];\n          outerCapsMap[++numOuterCaps] = ++numCaps; // If it's a named group, preserve the name. Otherwise, use the subpattern name\n          // as the capture name\n\n          intro = \"(?<\".concat(capName || subName, \">\");\n        } else {\n          intro = '(?:';\n        }\n\n        numPriorCaps = numCaps;\n        var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {\n          // Capturing group\n          if (paren) {\n            capName = data[subName].names[numCaps - numPriorCaps];\n            ++numCaps; // If the current capture has a name, preserve the name\n\n            if (capName) {\n              return \"(?<\".concat(capName, \">\");\n            } // Backreference\n\n          } else if (backref) {\n            localCapIndex = +backref - 1; // Rewrite the backreference\n\n            return data[subName].names[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\n            \"\\\\k<\".concat(data[subName].names[localCapIndex], \">\") : \"\\\\\".concat(+backref + numPriorCaps);\n          }\n\n          return match;\n        });\n        return \"\".concat(intro).concat(rewrittenSubpattern, \")\");\n      } // Capturing group\n\n\n      if ($3) {\n        capName = outerCapNames[numOuterCaps];\n        outerCapsMap[++numOuterCaps] = ++numCaps; // If the current capture has a name, preserve the name\n\n        if (capName) {\n          return \"(?<\".concat(capName, \">\");\n        } // Backreference\n\n      } else if ($4) {\n        localCapIndex = +$4 - 1; // Rewrite the backreference\n\n        return outerCapNames[localCapIndex] ? // Need to preserve the backreference name in case using flag `n`\n        \"\\\\k<\".concat(outerCapNames[localCapIndex], \">\") : \"\\\\\".concat(outerCapsMap[+$4]);\n      }\n\n      return $0;\n    });\n    return XRegExp(output, flags);\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp.matchRecursive 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2009-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Returns a match detail object composed of the provided values.\n   *\n   * @private\n   */\n  function row(name, value, start, end) {\n    return {\n      name: name,\n      value: value,\n      start: start,\n      end: end\n    };\n  }\n  /**\n   * Returns an array of match strings between outermost left and right delimiters, or an array of\n   * objects with detailed match parts and position data. An error is thrown if delimiters are\n   * unbalanced within the data.\n   *\n   * @memberOf XRegExp\n   * @param {String} str String to search.\n   * @param {String} left Left delimiter as an XRegExp pattern.\n   * @param {String} right Right delimiter as an XRegExp pattern.\n   * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\n   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\n   * @returns {Array} Array of matches, or an empty array.\n   * @example\n   *\n   * // Basic usage\n   * let str = '(t((e))s)t()(ing)';\n   * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n   * // -> ['t((e))s', '', 'ing']\n   *\n   * // Extended information mode with valueNames\n   * str = 'Here is <div> <div>an</div></div> example';\n   * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n   *   valueNames: ['between', 'left', 'match', 'right']\n   * });\n   * // -> [\n   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\n   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\n   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n   * // {name: 'right',   value: '</div>',         start: 27, end: 33},\n   * // {name: 'between', value: ' example',       start: 33, end: 41}\n   * // ]\n   *\n   * // Omitting unneeded parts with null valueNames, and using escapeChar\n   * str = '...{1}.\\\\{{function(x,y){return {y:x}}}';\n   * XRegExp.matchRecursive(str, '{', '}', 'g', {\n   *   valueNames: ['literal', null, 'value', null],\n   *   escapeChar: '\\\\'\n   * });\n   * // -> [\n   * // {name: 'literal', value: '...',  start: 0, end: 3},\n   * // {name: 'value',   value: '1',    start: 4, end: 5},\n   * // {name: 'literal', value: '.\\\\{', start: 6, end: 9},\n   * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\n   * // ]\n   *\n   * // Sticky mode via flag y\n   * str = '<1><<<2>>><3>4<5>';\n   * XRegExp.matchRecursive(str, '<', '>', 'gy');\n   * // -> ['1', '<<2>>', '3']\n   */\n\n\n  XRegExp.matchRecursive = function (str, left, right, flags, options) {\n    flags = flags || '';\n    options = options || {};\n    var global = flags.indexOf('g') !== -1;\n    var sticky = flags.indexOf('y') !== -1; // Flag `y` is controlled internally\n\n    var basicFlags = flags.replace(/y/g, '');\n    var _options = options,\n        escapeChar = _options.escapeChar;\n    var vN = options.valueNames;\n    var output = [];\n    var openTokens = 0;\n    var delimStart = 0;\n    var delimEnd = 0;\n    var lastOuterEnd = 0;\n    var outerStart;\n    var innerStart;\n    var leftMatch;\n    var rightMatch;\n    var esc;\n    left = XRegExp(left, basicFlags);\n    right = XRegExp(right, basicFlags);\n\n    if (escapeChar) {\n      if (escapeChar.length > 1) {\n        throw new Error('Cannot use more than one escape character');\n      }\n\n      escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:\n      // `escapeChar`: '%'\n      // `left`: '<'\n      // `right`: '>'\n      // Regex is: /(?:%[\\S\\s]|(?:(?!<|>)[^%])+)+/\n\n      esc = new RegExp(\"(?:\".concat(escapeChar, \"[\\\\S\\\\s]|(?:(?!\").concat( // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.\n      // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax\n      // transformation resulting from those flags was already applied to `left` and\n      // `right` when they were passed through the XRegExp constructor above.\n      XRegExp.union([left, right], '', {\n        conjunction: 'or'\n      }).source, \")[^\").concat(escapeChar, \"])+)+\"), // Flags `gy` not needed here\n      flags.replace(/[^imu]+/g, ''));\n    }\n\n    while (true) {\n      // If using an escape character, advance to the delimiter's next starting position,\n      // skipping any escaped characters in between\n      if (escapeChar) {\n        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\n      }\n\n      leftMatch = XRegExp.exec(str, left, delimEnd);\n      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only\n\n      if (leftMatch && rightMatch) {\n        if (leftMatch.index <= rightMatch.index) {\n          rightMatch = null;\n        } else {\n          leftMatch = null;\n        }\n      } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\n      // LM | RM | OT | Result\n      // 1  | 0  | 1  | loop\n      // 1  | 0  | 0  | loop\n      // 0  | 1  | 1  | loop\n      // 0  | 1  | 0  | throw\n      // 0  | 0  | 1  | throw\n      // 0  | 0  | 0  | break\n      // The paths above don't include the sticky mode special case. The loop ends after the\n      // first completed match if not `global`.\n\n\n      if (leftMatch || rightMatch) {\n        delimStart = (leftMatch || rightMatch).index;\n        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\n      } else if (!openTokens) {\n        break;\n      }\n\n      if (sticky && !openTokens && delimStart > lastOuterEnd) {\n        break;\n      }\n\n      if (leftMatch) {\n        if (!openTokens) {\n          outerStart = delimStart;\n          innerStart = delimEnd;\n        }\n\n        ++openTokens;\n      } else if (rightMatch && openTokens) {\n        if (! --openTokens) {\n          if (vN) {\n            if (vN[0] && outerStart > lastOuterEnd) {\n              output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\n            }\n\n            if (vN[1]) {\n              output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\n            }\n\n            if (vN[2]) {\n              output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\n            }\n\n            if (vN[3]) {\n              output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\n            }\n          } else {\n            output.push(str.slice(innerStart, delimStart));\n          }\n\n          lastOuterEnd = delimEnd;\n\n          if (!global) {\n            break;\n          }\n        }\n      } else {\n        throw new Error('Unbalanced delimiter found in string');\n      } // If the delimiter matched an empty string, avoid an infinite loop\n\n\n      if (delimStart === delimEnd) {\n        ++delimEnd;\n      }\n    }\n\n    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\n      output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\n    }\n\n    return output;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp Unicode Base 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    XRegExp.forEach(range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = charCode(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n\n    return output;\n  } // Generates an inverted BMP range on first use\n\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n\n    if (item.bmp && !item.isBmpLast) {\n      combined = \"[\".concat(item.bmp, \"]\").concat(item.astral ? '|' : '');\n    }\n\n    if (item.astral) {\n      combined += item.astral;\n    }\n\n    if (item.isBmpLast && item.bmp) {\n      combined += \"\".concat(item.astral ? '|' : '', \"[\").concat(item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\P{..} or \\p{^..}\n\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n\n    var slug = normalize(match[4] || match[3]); // Token data object\n\n    var item = unicode[slug];\n\n    if (match[1] === 'P' && match[2]) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n    }\n\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n    } // Switch to the negated form of the referenced Unicode token\n\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n\n      if (!unicode.hasOwnProperty(slug)) {\n        throw new ReferenceError(\"\".concat(ERR_UNKNOWN_REF + match[0], \" -> \").concat(item.inverseOf));\n      }\n\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n    }\n\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n\n      return cacheAstral(slug, isNegated);\n    }\n\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n\n        unicode[normalize(item.name)] = item;\n\n        if (item.alias) {\n          unicode[normalize(item.alias)] = item;\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","module.exports = [\n    {\n        'name': 'InAdlam',\n        'astral': '\\uD83A[\\uDD00-\\uDD5F]'\n    },\n    {\n        'name': 'InAegean_Numbers',\n        'astral': '\\uD800[\\uDD00-\\uDD3F]'\n    },\n    {\n        'name': 'InAhom',\n        'astral': '\\uD805[\\uDF00-\\uDF3F]'\n    },\n    {\n        'name': 'InAlchemical_Symbols',\n        'astral': '\\uD83D[\\uDF00-\\uDF7F]'\n    },\n    {\n        'name': 'InAlphabetic_Presentation_Forms',\n        'bmp': '\\uFB00-\\uFB4F'\n    },\n    {\n        'name': 'InAnatolian_Hieroglyphs',\n        'astral': '\\uD811[\\uDC00-\\uDE7F]'\n    },\n    {\n        'name': 'InAncient_Greek_Musical_Notation',\n        'astral': '\\uD834[\\uDE00-\\uDE4F]'\n    },\n    {\n        'name': 'InAncient_Greek_Numbers',\n        'astral': '\\uD800[\\uDD40-\\uDD8F]'\n    },\n    {\n        'name': 'InAncient_Symbols',\n        'astral': '\\uD800[\\uDD90-\\uDDCF]'\n    },\n    {\n        'name': 'InArabic',\n        'bmp': '\\u0600-\\u06FF'\n    },\n    {\n        'name': 'InArabic_Extended_A',\n        'bmp': '\\u08A0-\\u08FF'\n    },\n    {\n        'name': 'InArabic_Mathematical_Alphabetic_Symbols',\n        'astral': '\\uD83B[\\uDE00-\\uDEFF]'\n    },\n    {\n        'name': 'InArabic_Presentation_Forms_A',\n        'bmp': '\\uFB50-\\uFDFF'\n    },\n    {\n        'name': 'InArabic_Presentation_Forms_B',\n        'bmp': '\\uFE70-\\uFEFF'\n    },\n    {\n        'name': 'InArabic_Supplement',\n        'bmp': '\\u0750-\\u077F'\n    },\n    {\n        'name': 'InArmenian',\n        'bmp': '\\u0530-\\u058F'\n    },\n    {\n        'name': 'InArrows',\n        'bmp': '\\u2190-\\u21FF'\n    },\n    {\n        'name': 'InAvestan',\n        'astral': '\\uD802[\\uDF00-\\uDF3F]'\n    },\n    {\n        'name': 'InBalinese',\n        'bmp': '\\u1B00-\\u1B7F'\n    },\n    {\n        'name': 'InBamum',\n        'bmp': '\\uA6A0-\\uA6FF'\n    },\n    {\n        'name': 'InBamum_Supplement',\n        'astral': '\\uD81A[\\uDC00-\\uDE3F]'\n    },\n    {\n        'name': 'InBasic_Latin',\n        'bmp': '\\0-\\x7F'\n    },\n    {\n        'name': 'InBassa_Vah',\n        'astral': '\\uD81A[\\uDED0-\\uDEFF]'\n    },\n    {\n        'name': 'InBatak',\n        'bmp': '\\u1BC0-\\u1BFF'\n    },\n    {\n        'name': 'InBengali',\n        'bmp': '\\u0980-\\u09FF'\n    },\n    {\n        'name': 'InBhaiksuki',\n        'astral': '\\uD807[\\uDC00-\\uDC6F]'\n    },\n    {\n        'name': 'InBlock_Elements',\n        'bmp': '\\u2580-\\u259F'\n    },\n    {\n        'name': 'InBopomofo',\n        'bmp': '\\u3100-\\u312F'\n    },\n    {\n        'name': 'InBopomofo_Extended',\n        'bmp': '\\u31A0-\\u31BF'\n    },\n    {\n        'name': 'InBox_Drawing',\n        'bmp': '\\u2500-\\u257F'\n    },\n    {\n        'name': 'InBrahmi',\n        'astral': '\\uD804[\\uDC00-\\uDC7F]'\n    },\n    {\n        'name': 'InBraille_Patterns',\n        'bmp': '\\u2800-\\u28FF'\n    },\n    {\n        'name': 'InBuginese',\n        'bmp': '\\u1A00-\\u1A1F'\n    },\n    {\n        'name': 'InBuhid',\n        'bmp': '\\u1740-\\u175F'\n    },\n    {\n        'name': 'InByzantine_Musical_Symbols',\n        'astral': '\\uD834[\\uDC00-\\uDCFF]'\n    },\n    {\n        'name': 'InCJK_Compatibility',\n        'bmp': '\\u3300-\\u33FF'\n    },\n    {\n        'name': 'InCJK_Compatibility_Forms',\n        'bmp': '\\uFE30-\\uFE4F'\n    },\n    {\n        'name': 'InCJK_Compatibility_Ideographs',\n        'bmp': '\\uF900-\\uFAFF'\n    },\n    {\n        'name': 'InCJK_Compatibility_Ideographs_Supplement',\n        'astral': '\\uD87E[\\uDC00-\\uDE1F]'\n    },\n    {\n        'name': 'InCJK_Radicals_Supplement',\n        'bmp': '\\u2E80-\\u2EFF'\n    },\n    {\n        'name': 'InCJK_Strokes',\n        'bmp': '\\u31C0-\\u31EF'\n    },\n    {\n        'name': 'InCJK_Symbols_And_Punctuation',\n        'bmp': '\\u3000-\\u303F'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs',\n        'bmp': '\\u4E00-\\u9FFF'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_A',\n        'bmp': '\\u3400-\\u4DBF'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_B',\n        'astral': '[\\uD840-\\uD868][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDEDF]'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_C',\n        'astral': '\\uD869[\\uDF00-\\uDFFF]|[\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF3F]'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_D',\n        'astral': '\\uD86D[\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1F]'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_E',\n        'astral': '\\uD86E[\\uDC20-\\uDFFF]|[\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD873[\\uDC00-\\uDEAF]'\n    },\n    {\n        'name': 'InCJK_Unified_Ideographs_Extension_F',\n        'astral': '\\uD873[\\uDEB0-\\uDFFF]|[\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD87A[\\uDC00-\\uDFEF]'\n    },\n    {\n        'name': 'InCarian',\n        'astral': '\\uD800[\\uDEA0-\\uDEDF]'\n    },\n    {\n        'name': 'InCaucasian_Albanian',\n        'astral': '\\uD801[\\uDD30-\\uDD6F]'\n    },\n    {\n        'name': 'InChakma',\n        'astral': '\\uD804[\\uDD00-\\uDD4F]'\n    },\n    {\n        'name': 'InCham',\n        'bmp': '\\uAA00-\\uAA5F'\n    },\n    {\n        'name': 'InCherokee',\n        'bmp': '\\u13A0-\\u13FF'\n    },\n    {\n        'name': 'InCherokee_Supplement',\n        'bmp': '\\uAB70-\\uABBF'\n    },\n    {\n        'name': 'InChess_Symbols',\n        'astral': '\\uD83E[\\uDE00-\\uDE6F]'\n    },\n    {\n        'name': 'InCombining_Diacritical_Marks',\n        'bmp': '\\u0300-\\u036F'\n    },\n    {\n        'name': 'InCombining_Diacritical_Marks_Extended',\n        'bmp': '\\u1AB0-\\u1AFF'\n    },\n    {\n        'name': 'InCombining_Diacritical_Marks_For_Symbols',\n        'bmp': '\\u20D0-\\u20FF'\n    },\n    {\n        'name': 'InCombining_Diacritical_Marks_Supplement',\n        'bmp': '\\u1DC0-\\u1DFF'\n    },\n    {\n        'name': 'InCombining_Half_Marks',\n        'bmp': '\\uFE20-\\uFE2F'\n    },\n    {\n        'name': 'InCommon_Indic_Number_Forms',\n        'bmp': '\\uA830-\\uA83F'\n    },\n    {\n        'name': 'InControl_Pictures',\n        'bmp': '\\u2400-\\u243F'\n    },\n    {\n        'name': 'InCoptic',\n        'bmp': '\\u2C80-\\u2CFF'\n    },\n    {\n        'name': 'InCoptic_Epact_Numbers',\n        'astral': '\\uD800[\\uDEE0-\\uDEFF]'\n    },\n    {\n        'name': 'InCounting_Rod_Numerals',\n        'astral': '\\uD834[\\uDF60-\\uDF7F]'\n    },\n    {\n        'name': 'InCuneiform',\n        'astral': '\\uD808[\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'InCuneiform_Numbers_And_Punctuation',\n        'astral': '\\uD809[\\uDC00-\\uDC7F]'\n    },\n    {\n        'name': 'InCurrency_Symbols',\n        'bmp': '\\u20A0-\\u20CF'\n    },\n    {\n        'name': 'InCypriot_Syllabary',\n        'astral': '\\uD802[\\uDC00-\\uDC3F]'\n    },\n    {\n        'name': 'InCyrillic',\n        'bmp': '\\u0400-\\u04FF'\n    },\n    {\n        'name': 'InCyrillic_Extended_A',\n        'bmp': '\\u2DE0-\\u2DFF'\n    },\n    {\n        'name': 'InCyrillic_Extended_B',\n        'bmp': '\\uA640-\\uA69F'\n    },\n    {\n        'name': 'InCyrillic_Extended_C',\n        'bmp': '\\u1C80-\\u1C8F'\n    },\n    {\n        'name': 'InCyrillic_Supplement',\n        'bmp': '\\u0500-\\u052F'\n    },\n    {\n        'name': 'InDeseret',\n        'astral': '\\uD801[\\uDC00-\\uDC4F]'\n    },\n    {\n        'name': 'InDevanagari',\n        'bmp': '\\u0900-\\u097F'\n    },\n    {\n        'name': 'InDevanagari_Extended',\n        'bmp': '\\uA8E0-\\uA8FF'\n    },\n    {\n        'name': 'InDingbats',\n        'bmp': '\\u2700-\\u27BF'\n    },\n    {\n        'name': 'InDogra',\n        'astral': '\\uD806[\\uDC00-\\uDC4F]'\n    },\n    {\n        'name': 'InDomino_Tiles',\n        'astral': '\\uD83C[\\uDC30-\\uDC9F]'\n    },\n    {\n        'name': 'InDuployan',\n        'astral': '\\uD82F[\\uDC00-\\uDC9F]'\n    },\n    {\n        'name': 'InEarly_Dynastic_Cuneiform',\n        'astral': '\\uD809[\\uDC80-\\uDD4F]'\n    },\n    {\n        'name': 'InEgyptian_Hieroglyphs',\n        'astral': '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F]'\n    },\n    {\n        'name': 'InElbasan',\n        'astral': '\\uD801[\\uDD00-\\uDD2F]'\n    },\n    {\n        'name': 'InEmoticons',\n        'astral': '\\uD83D[\\uDE00-\\uDE4F]'\n    },\n    {\n        'name': 'InEnclosed_Alphanumeric_Supplement',\n        'astral': '\\uD83C[\\uDD00-\\uDDFF]'\n    },\n    {\n        'name': 'InEnclosed_Alphanumerics',\n        'bmp': '\\u2460-\\u24FF'\n    },\n    {\n        'name': 'InEnclosed_CJK_Letters_And_Months',\n        'bmp': '\\u3200-\\u32FF'\n    },\n    {\n        'name': 'InEnclosed_Ideographic_Supplement',\n        'astral': '\\uD83C[\\uDE00-\\uDEFF]'\n    },\n    {\n        'name': 'InEthiopic',\n        'bmp': '\\u1200-\\u137F'\n    },\n    {\n        'name': 'InEthiopic_Extended',\n        'bmp': '\\u2D80-\\u2DDF'\n    },\n    {\n        'name': 'InEthiopic_Extended_A',\n        'bmp': '\\uAB00-\\uAB2F'\n    },\n    {\n        'name': 'InEthiopic_Supplement',\n        'bmp': '\\u1380-\\u139F'\n    },\n    {\n        'name': 'InGeneral_Punctuation',\n        'bmp': '\\u2000-\\u206F'\n    },\n    {\n        'name': 'InGeometric_Shapes',\n        'bmp': '\\u25A0-\\u25FF'\n    },\n    {\n        'name': 'InGeometric_Shapes_Extended',\n        'astral': '\\uD83D[\\uDF80-\\uDFFF]'\n    },\n    {\n        'name': 'InGeorgian',\n        'bmp': '\\u10A0-\\u10FF'\n    },\n    {\n        'name': 'InGeorgian_Extended',\n        'bmp': '\\u1C90-\\u1CBF'\n    },\n    {\n        'name': 'InGeorgian_Supplement',\n        'bmp': '\\u2D00-\\u2D2F'\n    },\n    {\n        'name': 'InGlagolitic',\n        'bmp': '\\u2C00-\\u2C5F'\n    },\n    {\n        'name': 'InGlagolitic_Supplement',\n        'astral': '\\uD838[\\uDC00-\\uDC2F]'\n    },\n    {\n        'name': 'InGothic',\n        'astral': '\\uD800[\\uDF30-\\uDF4F]'\n    },\n    {\n        'name': 'InGrantha',\n        'astral': '\\uD804[\\uDF00-\\uDF7F]'\n    },\n    {\n        'name': 'InGreek_And_Coptic',\n        'bmp': '\\u0370-\\u03FF'\n    },\n    {\n        'name': 'InGreek_Extended',\n        'bmp': '\\u1F00-\\u1FFF'\n    },\n    {\n        'name': 'InGujarati',\n        'bmp': '\\u0A80-\\u0AFF'\n    },\n    {\n        'name': 'InGunjala_Gondi',\n        'astral': '\\uD807[\\uDD60-\\uDDAF]'\n    },\n    {\n        'name': 'InGurmukhi',\n        'bmp': '\\u0A00-\\u0A7F'\n    },\n    {\n        'name': 'InHalfwidth_And_Fullwidth_Forms',\n        'bmp': '\\uFF00-\\uFFEF'\n    },\n    {\n        'name': 'InHangul_Compatibility_Jamo',\n        'bmp': '\\u3130-\\u318F'\n    },\n    {\n        'name': 'InHangul_Jamo',\n        'bmp': '\\u1100-\\u11FF'\n    },\n    {\n        'name': 'InHangul_Jamo_Extended_A',\n        'bmp': '\\uA960-\\uA97F'\n    },\n    {\n        'name': 'InHangul_Jamo_Extended_B',\n        'bmp': '\\uD7B0-\\uD7FF'\n    },\n    {\n        'name': 'InHangul_Syllables',\n        'bmp': '\\uAC00-\\uD7AF'\n    },\n    {\n        'name': 'InHanifi_Rohingya',\n        'astral': '\\uD803[\\uDD00-\\uDD3F]'\n    },\n    {\n        'name': 'InHanunoo',\n        'bmp': '\\u1720-\\u173F'\n    },\n    {\n        'name': 'InHatran',\n        'astral': '\\uD802[\\uDCE0-\\uDCFF]'\n    },\n    {\n        'name': 'InHebrew',\n        'bmp': '\\u0590-\\u05FF'\n    },\n    {\n        'name': 'InHigh_Private_Use_Surrogates',\n        'bmp': '\\uDB80-\\uDBFF'\n    },\n    {\n        'name': 'InHigh_Surrogates',\n        'bmp': '\\uD800-\\uDB7F'\n    },\n    {\n        'name': 'InHiragana',\n        'bmp': '\\u3040-\\u309F'\n    },\n    {\n        'name': 'InIPA_Extensions',\n        'bmp': '\\u0250-\\u02AF'\n    },\n    {\n        'name': 'InIdeographic_Description_Characters',\n        'bmp': '\\u2FF0-\\u2FFF'\n    },\n    {\n        'name': 'InIdeographic_Symbols_And_Punctuation',\n        'astral': '\\uD81B[\\uDFE0-\\uDFFF]'\n    },\n    {\n        'name': 'InImperial_Aramaic',\n        'astral': '\\uD802[\\uDC40-\\uDC5F]'\n    },\n    {\n        'name': 'InIndic_Siyaq_Numbers',\n        'astral': '\\uD83B[\\uDC70-\\uDCBF]'\n    },\n    {\n        'name': 'InInscriptional_Pahlavi',\n        'astral': '\\uD802[\\uDF60-\\uDF7F]'\n    },\n    {\n        'name': 'InInscriptional_Parthian',\n        'astral': '\\uD802[\\uDF40-\\uDF5F]'\n    },\n    {\n        'name': 'InJavanese',\n        'bmp': '\\uA980-\\uA9DF'\n    },\n    {\n        'name': 'InKaithi',\n        'astral': '\\uD804[\\uDC80-\\uDCCF]'\n    },\n    {\n        'name': 'InKana_Extended_A',\n        'astral': '\\uD82C[\\uDD00-\\uDD2F]'\n    },\n    {\n        'name': 'InKana_Supplement',\n        'astral': '\\uD82C[\\uDC00-\\uDCFF]'\n    },\n    {\n        'name': 'InKanbun',\n        'bmp': '\\u3190-\\u319F'\n    },\n    {\n        'name': 'InKangxi_Radicals',\n        'bmp': '\\u2F00-\\u2FDF'\n    },\n    {\n        'name': 'InKannada',\n        'bmp': '\\u0C80-\\u0CFF'\n    },\n    {\n        'name': 'InKatakana',\n        'bmp': '\\u30A0-\\u30FF'\n    },\n    {\n        'name': 'InKatakana_Phonetic_Extensions',\n        'bmp': '\\u31F0-\\u31FF'\n    },\n    {\n        'name': 'InKayah_Li',\n        'bmp': '\\uA900-\\uA92F'\n    },\n    {\n        'name': 'InKharoshthi',\n        'astral': '\\uD802[\\uDE00-\\uDE5F]'\n    },\n    {\n        'name': 'InKhmer',\n        'bmp': '\\u1780-\\u17FF'\n    },\n    {\n        'name': 'InKhmer_Symbols',\n        'bmp': '\\u19E0-\\u19FF'\n    },\n    {\n        'name': 'InKhojki',\n        'astral': '\\uD804[\\uDE00-\\uDE4F]'\n    },\n    {\n        'name': 'InKhudawadi',\n        'astral': '\\uD804[\\uDEB0-\\uDEFF]'\n    },\n    {\n        'name': 'InLao',\n        'bmp': '\\u0E80-\\u0EFF'\n    },\n    {\n        'name': 'InLatin_1_Supplement',\n        'bmp': '\\x80-\\xFF'\n    },\n    {\n        'name': 'InLatin_Extended_A',\n        'bmp': '\\u0100-\\u017F'\n    },\n    {\n        'name': 'InLatin_Extended_Additional',\n        'bmp': '\\u1E00-\\u1EFF'\n    },\n    {\n        'name': 'InLatin_Extended_B',\n        'bmp': '\\u0180-\\u024F'\n    },\n    {\n        'name': 'InLatin_Extended_C',\n        'bmp': '\\u2C60-\\u2C7F'\n    },\n    {\n        'name': 'InLatin_Extended_D',\n        'bmp': '\\uA720-\\uA7FF'\n    },\n    {\n        'name': 'InLatin_Extended_E',\n        'bmp': '\\uAB30-\\uAB6F'\n    },\n    {\n        'name': 'InLepcha',\n        'bmp': '\\u1C00-\\u1C4F'\n    },\n    {\n        'name': 'InLetterlike_Symbols',\n        'bmp': '\\u2100-\\u214F'\n    },\n    {\n        'name': 'InLimbu',\n        'bmp': '\\u1900-\\u194F'\n    },\n    {\n        'name': 'InLinear_A',\n        'astral': '\\uD801[\\uDE00-\\uDF7F]'\n    },\n    {\n        'name': 'InLinear_B_Ideograms',\n        'astral': '\\uD800[\\uDC80-\\uDCFF]'\n    },\n    {\n        'name': 'InLinear_B_Syllabary',\n        'astral': '\\uD800[\\uDC00-\\uDC7F]'\n    },\n    {\n        'name': 'InLisu',\n        'bmp': '\\uA4D0-\\uA4FF'\n    },\n    {\n        'name': 'InLow_Surrogates',\n        'bmp': '\\uDC00-\\uDFFF'\n    },\n    {\n        'name': 'InLycian',\n        'astral': '\\uD800[\\uDE80-\\uDE9F]'\n    },\n    {\n        'name': 'InLydian',\n        'astral': '\\uD802[\\uDD20-\\uDD3F]'\n    },\n    {\n        'name': 'InMahajani',\n        'astral': '\\uD804[\\uDD50-\\uDD7F]'\n    },\n    {\n        'name': 'InMahjong_Tiles',\n        'astral': '\\uD83C[\\uDC00-\\uDC2F]'\n    },\n    {\n        'name': 'InMakasar',\n        'astral': '\\uD807[\\uDEE0-\\uDEFF]'\n    },\n    {\n        'name': 'InMalayalam',\n        'bmp': '\\u0D00-\\u0D7F'\n    },\n    {\n        'name': 'InMandaic',\n        'bmp': '\\u0840-\\u085F'\n    },\n    {\n        'name': 'InManichaean',\n        'astral': '\\uD802[\\uDEC0-\\uDEFF]'\n    },\n    {\n        'name': 'InMarchen',\n        'astral': '\\uD807[\\uDC70-\\uDCBF]'\n    },\n    {\n        'name': 'InMasaram_Gondi',\n        'astral': '\\uD807[\\uDD00-\\uDD5F]'\n    },\n    {\n        'name': 'InMathematical_Alphanumeric_Symbols',\n        'astral': '\\uD835[\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'InMathematical_Operators',\n        'bmp': '\\u2200-\\u22FF'\n    },\n    {\n        'name': 'InMayan_Numerals',\n        'astral': '\\uD834[\\uDEE0-\\uDEFF]'\n    },\n    {\n        'name': 'InMedefaidrin',\n        'astral': '\\uD81B[\\uDE40-\\uDE9F]'\n    },\n    {\n        'name': 'InMeetei_Mayek',\n        'bmp': '\\uABC0-\\uABFF'\n    },\n    {\n        'name': 'InMeetei_Mayek_Extensions',\n        'bmp': '\\uAAE0-\\uAAFF'\n    },\n    {\n        'name': 'InMende_Kikakui',\n        'astral': '\\uD83A[\\uDC00-\\uDCDF]'\n    },\n    {\n        'name': 'InMeroitic_Cursive',\n        'astral': '\\uD802[\\uDDA0-\\uDDFF]'\n    },\n    {\n        'name': 'InMeroitic_Hieroglyphs',\n        'astral': '\\uD802[\\uDD80-\\uDD9F]'\n    },\n    {\n        'name': 'InMiao',\n        'astral': '\\uD81B[\\uDF00-\\uDF9F]'\n    },\n    {\n        'name': 'InMiscellaneous_Mathematical_Symbols_A',\n        'bmp': '\\u27C0-\\u27EF'\n    },\n    {\n        'name': 'InMiscellaneous_Mathematical_Symbols_B',\n        'bmp': '\\u2980-\\u29FF'\n    },\n    {\n        'name': 'InMiscellaneous_Symbols',\n        'bmp': '\\u2600-\\u26FF'\n    },\n    {\n        'name': 'InMiscellaneous_Symbols_And_Arrows',\n        'bmp': '\\u2B00-\\u2BFF'\n    },\n    {\n        'name': 'InMiscellaneous_Symbols_And_Pictographs',\n        'astral': '\\uD83C[\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDDFF]'\n    },\n    {\n        'name': 'InMiscellaneous_Technical',\n        'bmp': '\\u2300-\\u23FF'\n    },\n    {\n        'name': 'InModi',\n        'astral': '\\uD805[\\uDE00-\\uDE5F]'\n    },\n    {\n        'name': 'InModifier_Tone_Letters',\n        'bmp': '\\uA700-\\uA71F'\n    },\n    {\n        'name': 'InMongolian',\n        'bmp': '\\u1800-\\u18AF'\n    },\n    {\n        'name': 'InMongolian_Supplement',\n        'astral': '\\uD805[\\uDE60-\\uDE7F]'\n    },\n    {\n        'name': 'InMro',\n        'astral': '\\uD81A[\\uDE40-\\uDE6F]'\n    },\n    {\n        'name': 'InMultani',\n        'astral': '\\uD804[\\uDE80-\\uDEAF]'\n    },\n    {\n        'name': 'InMusical_Symbols',\n        'astral': '\\uD834[\\uDD00-\\uDDFF]'\n    },\n    {\n        'name': 'InMyanmar',\n        'bmp': '\\u1000-\\u109F'\n    },\n    {\n        'name': 'InMyanmar_Extended_A',\n        'bmp': '\\uAA60-\\uAA7F'\n    },\n    {\n        'name': 'InMyanmar_Extended_B',\n        'bmp': '\\uA9E0-\\uA9FF'\n    },\n    {\n        'name': 'InNKo',\n        'bmp': '\\u07C0-\\u07FF'\n    },\n    {\n        'name': 'InNabataean',\n        'astral': '\\uD802[\\uDC80-\\uDCAF]'\n    },\n    {\n        'name': 'InNew_Tai_Lue',\n        'bmp': '\\u1980-\\u19DF'\n    },\n    {\n        'name': 'InNewa',\n        'astral': '\\uD805[\\uDC00-\\uDC7F]'\n    },\n    {\n        'name': 'InNumber_Forms',\n        'bmp': '\\u2150-\\u218F'\n    },\n    {\n        'name': 'InNushu',\n        'astral': '\\uD82C[\\uDD70-\\uDEFF]'\n    },\n    {\n        'name': 'InOgham',\n        'bmp': '\\u1680-\\u169F'\n    },\n    {\n        'name': 'InOl_Chiki',\n        'bmp': '\\u1C50-\\u1C7F'\n    },\n    {\n        'name': 'InOld_Hungarian',\n        'astral': '\\uD803[\\uDC80-\\uDCFF]'\n    },\n    {\n        'name': 'InOld_Italic',\n        'astral': '\\uD800[\\uDF00-\\uDF2F]'\n    },\n    {\n        'name': 'InOld_North_Arabian',\n        'astral': '\\uD802[\\uDE80-\\uDE9F]'\n    },\n    {\n        'name': 'InOld_Permic',\n        'astral': '\\uD800[\\uDF50-\\uDF7F]'\n    },\n    {\n        'name': 'InOld_Persian',\n        'astral': '\\uD800[\\uDFA0-\\uDFDF]'\n    },\n    {\n        'name': 'InOld_Sogdian',\n        'astral': '\\uD803[\\uDF00-\\uDF2F]'\n    },\n    {\n        'name': 'InOld_South_Arabian',\n        'astral': '\\uD802[\\uDE60-\\uDE7F]'\n    },\n    {\n        'name': 'InOld_Turkic',\n        'astral': '\\uD803[\\uDC00-\\uDC4F]'\n    },\n    {\n        'name': 'InOptical_Character_Recognition',\n        'bmp': '\\u2440-\\u245F'\n    },\n    {\n        'name': 'InOriya',\n        'bmp': '\\u0B00-\\u0B7F'\n    },\n    {\n        'name': 'InOrnamental_Dingbats',\n        'astral': '\\uD83D[\\uDE50-\\uDE7F]'\n    },\n    {\n        'name': 'InOsage',\n        'astral': '\\uD801[\\uDCB0-\\uDCFF]'\n    },\n    {\n        'name': 'InOsmanya',\n        'astral': '\\uD801[\\uDC80-\\uDCAF]'\n    },\n    {\n        'name': 'InPahawh_Hmong',\n        'astral': '\\uD81A[\\uDF00-\\uDF8F]'\n    },\n    {\n        'name': 'InPalmyrene',\n        'astral': '\\uD802[\\uDC60-\\uDC7F]'\n    },\n    {\n        'name': 'InPau_Cin_Hau',\n        'astral': '\\uD806[\\uDEC0-\\uDEFF]'\n    },\n    {\n        'name': 'InPhags_Pa',\n        'bmp': '\\uA840-\\uA87F'\n    },\n    {\n        'name': 'InPhaistos_Disc',\n        'astral': '\\uD800[\\uDDD0-\\uDDFF]'\n    },\n    {\n        'name': 'InPhoenician',\n        'astral': '\\uD802[\\uDD00-\\uDD1F]'\n    },\n    {\n        'name': 'InPhonetic_Extensions',\n        'bmp': '\\u1D00-\\u1D7F'\n    },\n    {\n        'name': 'InPhonetic_Extensions_Supplement',\n        'bmp': '\\u1D80-\\u1DBF'\n    },\n    {\n        'name': 'InPlaying_Cards',\n        'astral': '\\uD83C[\\uDCA0-\\uDCFF]'\n    },\n    {\n        'name': 'InPrivate_Use_Area',\n        'bmp': '\\uE000-\\uF8FF'\n    },\n    {\n        'name': 'InPsalter_Pahlavi',\n        'astral': '\\uD802[\\uDF80-\\uDFAF]'\n    },\n    {\n        'name': 'InRejang',\n        'bmp': '\\uA930-\\uA95F'\n    },\n    {\n        'name': 'InRumi_Numeral_Symbols',\n        'astral': '\\uD803[\\uDE60-\\uDE7F]'\n    },\n    {\n        'name': 'InRunic',\n        'bmp': '\\u16A0-\\u16FF'\n    },\n    {\n        'name': 'InSamaritan',\n        'bmp': '\\u0800-\\u083F'\n    },\n    {\n        'name': 'InSaurashtra',\n        'bmp': '\\uA880-\\uA8DF'\n    },\n    {\n        'name': 'InSharada',\n        'astral': '\\uD804[\\uDD80-\\uDDDF]'\n    },\n    {\n        'name': 'InShavian',\n        'astral': '\\uD801[\\uDC50-\\uDC7F]'\n    },\n    {\n        'name': 'InShorthand_Format_Controls',\n        'astral': '\\uD82F[\\uDCA0-\\uDCAF]'\n    },\n    {\n        'name': 'InSiddham',\n        'astral': '\\uD805[\\uDD80-\\uDDFF]'\n    },\n    {\n        'name': 'InSinhala',\n        'bmp': '\\u0D80-\\u0DFF'\n    },\n    {\n        'name': 'InSinhala_Archaic_Numbers',\n        'astral': '\\uD804[\\uDDE0-\\uDDFF]'\n    },\n    {\n        'name': 'InSmall_Form_Variants',\n        'bmp': '\\uFE50-\\uFE6F'\n    },\n    {\n        'name': 'InSogdian',\n        'astral': '\\uD803[\\uDF30-\\uDF6F]'\n    },\n    {\n        'name': 'InSora_Sompeng',\n        'astral': '\\uD804[\\uDCD0-\\uDCFF]'\n    },\n    {\n        'name': 'InSoyombo',\n        'astral': '\\uD806[\\uDE50-\\uDEAF]'\n    },\n    {\n        'name': 'InSpacing_Modifier_Letters',\n        'bmp': '\\u02B0-\\u02FF'\n    },\n    {\n        'name': 'InSpecials',\n        'bmp': '\\uFFF0-\\uFFFF'\n    },\n    {\n        'name': 'InSundanese',\n        'bmp': '\\u1B80-\\u1BBF'\n    },\n    {\n        'name': 'InSundanese_Supplement',\n        'bmp': '\\u1CC0-\\u1CCF'\n    },\n    {\n        'name': 'InSuperscripts_And_Subscripts',\n        'bmp': '\\u2070-\\u209F'\n    },\n    {\n        'name': 'InSupplemental_Arrows_A',\n        'bmp': '\\u27F0-\\u27FF'\n    },\n    {\n        'name': 'InSupplemental_Arrows_B',\n        'bmp': '\\u2900-\\u297F'\n    },\n    {\n        'name': 'InSupplemental_Arrows_C',\n        'astral': '\\uD83E[\\uDC00-\\uDCFF]'\n    },\n    {\n        'name': 'InSupplemental_Mathematical_Operators',\n        'bmp': '\\u2A00-\\u2AFF'\n    },\n    {\n        'name': 'InSupplemental_Punctuation',\n        'bmp': '\\u2E00-\\u2E7F'\n    },\n    {\n        'name': 'InSupplemental_Symbols_And_Pictographs',\n        'astral': '\\uD83E[\\uDD00-\\uDDFF]'\n    },\n    {\n        'name': 'InSupplementary_Private_Use_Area_A',\n        'astral': '[\\uDB80-\\uDBBF][\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'InSupplementary_Private_Use_Area_B',\n        'astral': '[\\uDBC0-\\uDBFF][\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'InSutton_SignWriting',\n        'astral': '\\uD836[\\uDC00-\\uDEAF]'\n    },\n    {\n        'name': 'InSyloti_Nagri',\n        'bmp': '\\uA800-\\uA82F'\n    },\n    {\n        'name': 'InSyriac',\n        'bmp': '\\u0700-\\u074F'\n    },\n    {\n        'name': 'InSyriac_Supplement',\n        'bmp': '\\u0860-\\u086F'\n    },\n    {\n        'name': 'InTagalog',\n        'bmp': '\\u1700-\\u171F'\n    },\n    {\n        'name': 'InTagbanwa',\n        'bmp': '\\u1760-\\u177F'\n    },\n    {\n        'name': 'InTags',\n        'astral': '\\uDB40[\\uDC00-\\uDC7F]'\n    },\n    {\n        'name': 'InTai_Le',\n        'bmp': '\\u1950-\\u197F'\n    },\n    {\n        'name': 'InTai_Tham',\n        'bmp': '\\u1A20-\\u1AAF'\n    },\n    {\n        'name': 'InTai_Viet',\n        'bmp': '\\uAA80-\\uAADF'\n    },\n    {\n        'name': 'InTai_Xuan_Jing_Symbols',\n        'astral': '\\uD834[\\uDF00-\\uDF5F]'\n    },\n    {\n        'name': 'InTakri',\n        'astral': '\\uD805[\\uDE80-\\uDECF]'\n    },\n    {\n        'name': 'InTamil',\n        'bmp': '\\u0B80-\\u0BFF'\n    },\n    {\n        'name': 'InTangut',\n        'astral': '[\\uD81C-\\uD821][\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'InTangut_Components',\n        'astral': '\\uD822[\\uDC00-\\uDEFF]'\n    },\n    {\n        'name': 'InTelugu',\n        'bmp': '\\u0C00-\\u0C7F'\n    },\n    {\n        'name': 'InThaana',\n        'bmp': '\\u0780-\\u07BF'\n    },\n    {\n        'name': 'InThai',\n        'bmp': '\\u0E00-\\u0E7F'\n    },\n    {\n        'name': 'InTibetan',\n        'bmp': '\\u0F00-\\u0FFF'\n    },\n    {\n        'name': 'InTifinagh',\n        'bmp': '\\u2D30-\\u2D7F'\n    },\n    {\n        'name': 'InTirhuta',\n        'astral': '\\uD805[\\uDC80-\\uDCDF]'\n    },\n    {\n        'name': 'InTransport_And_Map_Symbols',\n        'astral': '\\uD83D[\\uDE80-\\uDEFF]'\n    },\n    {\n        'name': 'InUgaritic',\n        'astral': '\\uD800[\\uDF80-\\uDF9F]'\n    },\n    {\n        'name': 'InUnified_Canadian_Aboriginal_Syllabics',\n        'bmp': '\\u1400-\\u167F'\n    },\n    {\n        'name': 'InUnified_Canadian_Aboriginal_Syllabics_Extended',\n        'bmp': '\\u18B0-\\u18FF'\n    },\n    {\n        'name': 'InVai',\n        'bmp': '\\uA500-\\uA63F'\n    },\n    {\n        'name': 'InVariation_Selectors',\n        'bmp': '\\uFE00-\\uFE0F'\n    },\n    {\n        'name': 'InVariation_Selectors_Supplement',\n        'astral': '\\uDB40[\\uDD00-\\uDDEF]'\n    },\n    {\n        'name': 'InVedic_Extensions',\n        'bmp': '\\u1CD0-\\u1CFF'\n    },\n    {\n        'name': 'InVertical_Forms',\n        'bmp': '\\uFE10-\\uFE1F'\n    },\n    {\n        'name': 'InWarang_Citi',\n        'astral': '\\uD806[\\uDCA0-\\uDCFF]'\n    },\n    {\n        'name': 'InYi_Radicals',\n        'bmp': '\\uA490-\\uA4CF'\n    },\n    {\n        'name': 'InYi_Syllables',\n        'bmp': '\\uA000-\\uA48F'\n    },\n    {\n        'name': 'InYijing_Hexagram_Symbols',\n        'bmp': '\\u4DC0-\\u4DFF'\n    },\n    {\n        'name': 'InZanabazar_Square',\n        'astral': '\\uD806[\\uDE00-\\uDE4F]'\n    }\n];\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _blocks = _interopRequireDefault(require(\"../../tools/output/blocks\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\n * XRegExp Unicode Blocks 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2010-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,\n   * `\\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and\n   * underscores are ignored.\n   *\n   * Uses Unicode 11.0.0.\n   *\n   * @requires XRegExp, Unicode Base\n   */\n  if (!XRegExp.addUnicodeData) {\n    throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');\n  }\n\n  XRegExp.addUnicodeData(_blocks.default);\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","module.exports = [\n    {\n        'name': 'C',\n        'alias': 'Other',\n        'isBmpLast': true,\n        'bmp': '\\0-\\x1F\\x7F-\\x9F\\xAD\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F5-\\u0605\\u061C\\u061D\\u06DD\\u070E\\u070F\\u074B\\u074C\\u07B2-\\u07BF\\u07FB\\u07FC\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F\\u086B-\\u089F\\u08B5\\u08BE-\\u08D2\\u08E2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A77-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D04\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180E\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC8-\\u1CCF\\u1CFA-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20C0-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BC9\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E4F-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FF0-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7BA-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uF8FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD-\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFFB\\uFFFE\\uFFFF',\n        'astral': '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE49-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD28-\\uDD2F\\uDD3A-\\uDE5F\\uDE7F-\\uDEFF\\uDF28-\\uDF2F\\uDF5A-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCBD\\uDCC2-\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD47-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5F-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC3C-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDDFF\\uDE48-\\uDE4F\\uDE84\\uDE85\\uDEA3-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF9-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD87B-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDBFF][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE9B-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2-\\uDFFF]|\\uD821[\\uDFF2-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA0-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDD73-\\uDD7A\\uDDE9-\\uDDFF\\uDE46-\\uDEDF\\uDEF4-\\uDEFF\\uDF57-\\uDF5F\\uDF79-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDC70\\uDCB5-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED5-\\uDEDF\\uDEED-\\uDEEF\\uDEFA-\\uDEFF\\uDF74-\\uDF7F\\uDFD9-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD0F\\uDD3F\\uDD71\\uDD72\\uDD77-\\uDD79\\uDD7B\\uDDA3-\\uDDAF\\uDDBA-\\uDDBF\\uDDC3-\\uDDCF\\uDE00-\\uDE5F\\uDE6E-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00-\\uDCFF\\uDDF0-\\uDFFF]'\n    },\n    {\n        'name': 'Cc',\n        'alias': 'Control',\n        'bmp': '\\0-\\x1F\\x7F-\\x9F'\n    },\n    {\n        'name': 'Cf',\n        'alias': 'Format',\n        'bmp': '\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB',\n        'astral': '\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'\n    },\n    {\n        'name': 'Cn',\n        'alias': 'Unassigned',\n        'bmp': '\\u0378\\u0379\\u0380-\\u0383\\u038B\\u038D\\u03A2\\u0530\\u0557\\u0558\\u058B\\u058C\\u0590\\u05C8-\\u05CF\\u05EB-\\u05EE\\u05F5-\\u05FF\\u061D\\u070E\\u074B\\u074C\\u07B2-\\u07BF\\u07FB\\u07FC\\u082E\\u082F\\u083F\\u085C\\u085D\\u085F\\u086B-\\u089F\\u08B5\\u08BE-\\u08D2\\u0984\\u098D\\u098E\\u0991\\u0992\\u09A9\\u09B1\\u09B3-\\u09B5\\u09BA\\u09BB\\u09C5\\u09C6\\u09C9\\u09CA\\u09CF-\\u09D6\\u09D8-\\u09DB\\u09DE\\u09E4\\u09E5\\u09FF\\u0A00\\u0A04\\u0A0B-\\u0A0E\\u0A11\\u0A12\\u0A29\\u0A31\\u0A34\\u0A37\\u0A3A\\u0A3B\\u0A3D\\u0A43-\\u0A46\\u0A49\\u0A4A\\u0A4E-\\u0A50\\u0A52-\\u0A58\\u0A5D\\u0A5F-\\u0A65\\u0A77-\\u0A80\\u0A84\\u0A8E\\u0A92\\u0AA9\\u0AB1\\u0AB4\\u0ABA\\u0ABB\\u0AC6\\u0ACA\\u0ACE\\u0ACF\\u0AD1-\\u0ADF\\u0AE4\\u0AE5\\u0AF2-\\u0AF8\\u0B00\\u0B04\\u0B0D\\u0B0E\\u0B11\\u0B12\\u0B29\\u0B31\\u0B34\\u0B3A\\u0B3B\\u0B45\\u0B46\\u0B49\\u0B4A\\u0B4E-\\u0B55\\u0B58-\\u0B5B\\u0B5E\\u0B64\\u0B65\\u0B78-\\u0B81\\u0B84\\u0B8B-\\u0B8D\\u0B91\\u0B96-\\u0B98\\u0B9B\\u0B9D\\u0BA0-\\u0BA2\\u0BA5-\\u0BA7\\u0BAB-\\u0BAD\\u0BBA-\\u0BBD\\u0BC3-\\u0BC5\\u0BC9\\u0BCE\\u0BCF\\u0BD1-\\u0BD6\\u0BD8-\\u0BE5\\u0BFB-\\u0BFF\\u0C0D\\u0C11\\u0C29\\u0C3A-\\u0C3C\\u0C45\\u0C49\\u0C4E-\\u0C54\\u0C57\\u0C5B-\\u0C5F\\u0C64\\u0C65\\u0C70-\\u0C77\\u0C8D\\u0C91\\u0CA9\\u0CB4\\u0CBA\\u0CBB\\u0CC5\\u0CC9\\u0CCE-\\u0CD4\\u0CD7-\\u0CDD\\u0CDF\\u0CE4\\u0CE5\\u0CF0\\u0CF3-\\u0CFF\\u0D04\\u0D0D\\u0D11\\u0D45\\u0D49\\u0D50-\\u0D53\\u0D64\\u0D65\\u0D80\\u0D81\\u0D84\\u0D97-\\u0D99\\u0DB2\\u0DBC\\u0DBE\\u0DBF\\u0DC7-\\u0DC9\\u0DCB-\\u0DCE\\u0DD5\\u0DD7\\u0DE0-\\u0DE5\\u0DF0\\u0DF1\\u0DF5-\\u0E00\\u0E3B-\\u0E3E\\u0E5C-\\u0E80\\u0E83\\u0E85\\u0E86\\u0E89\\u0E8B\\u0E8C\\u0E8E-\\u0E93\\u0E98\\u0EA0\\u0EA4\\u0EA6\\u0EA8\\u0EA9\\u0EAC\\u0EBA\\u0EBE\\u0EBF\\u0EC5\\u0EC7\\u0ECE\\u0ECF\\u0EDA\\u0EDB\\u0EE0-\\u0EFF\\u0F48\\u0F6D-\\u0F70\\u0F98\\u0FBD\\u0FCD\\u0FDB-\\u0FFF\\u10C6\\u10C8-\\u10CC\\u10CE\\u10CF\\u1249\\u124E\\u124F\\u1257\\u1259\\u125E\\u125F\\u1289\\u128E\\u128F\\u12B1\\u12B6\\u12B7\\u12BF\\u12C1\\u12C6\\u12C7\\u12D7\\u1311\\u1316\\u1317\\u135B\\u135C\\u137D-\\u137F\\u139A-\\u139F\\u13F6\\u13F7\\u13FE\\u13FF\\u169D-\\u169F\\u16F9-\\u16FF\\u170D\\u1715-\\u171F\\u1737-\\u173F\\u1754-\\u175F\\u176D\\u1771\\u1774-\\u177F\\u17DE\\u17DF\\u17EA-\\u17EF\\u17FA-\\u17FF\\u180F\\u181A-\\u181F\\u1879-\\u187F\\u18AB-\\u18AF\\u18F6-\\u18FF\\u191F\\u192C-\\u192F\\u193C-\\u193F\\u1941-\\u1943\\u196E\\u196F\\u1975-\\u197F\\u19AC-\\u19AF\\u19CA-\\u19CF\\u19DB-\\u19DD\\u1A1C\\u1A1D\\u1A5F\\u1A7D\\u1A7E\\u1A8A-\\u1A8F\\u1A9A-\\u1A9F\\u1AAE\\u1AAF\\u1ABF-\\u1AFF\\u1B4C-\\u1B4F\\u1B7D-\\u1B7F\\u1BF4-\\u1BFB\\u1C38-\\u1C3A\\u1C4A-\\u1C4C\\u1C89-\\u1C8F\\u1CBB\\u1CBC\\u1CC8-\\u1CCF\\u1CFA-\\u1CFF\\u1DFA\\u1F16\\u1F17\\u1F1E\\u1F1F\\u1F46\\u1F47\\u1F4E\\u1F4F\\u1F58\\u1F5A\\u1F5C\\u1F5E\\u1F7E\\u1F7F\\u1FB5\\u1FC5\\u1FD4\\u1FD5\\u1FDC\\u1FF0\\u1FF1\\u1FF5\\u1FFF\\u2065\\u2072\\u2073\\u208F\\u209D-\\u209F\\u20C0-\\u20CF\\u20F1-\\u20FF\\u218C-\\u218F\\u2427-\\u243F\\u244B-\\u245F\\u2B74\\u2B75\\u2B96\\u2B97\\u2BC9\\u2BFF\\u2C2F\\u2C5F\\u2CF4-\\u2CF8\\u2D26\\u2D28-\\u2D2C\\u2D2E\\u2D2F\\u2D68-\\u2D6E\\u2D71-\\u2D7E\\u2D97-\\u2D9F\\u2DA7\\u2DAF\\u2DB7\\u2DBF\\u2DC7\\u2DCF\\u2DD7\\u2DDF\\u2E4F-\\u2E7F\\u2E9A\\u2EF4-\\u2EFF\\u2FD6-\\u2FEF\\u2FFC-\\u2FFF\\u3040\\u3097\\u3098\\u3100-\\u3104\\u3130\\u318F\\u31BB-\\u31BF\\u31E4-\\u31EF\\u321F\\u32FF\\u4DB6-\\u4DBF\\u9FF0-\\u9FFF\\uA48D-\\uA48F\\uA4C7-\\uA4CF\\uA62C-\\uA63F\\uA6F8-\\uA6FF\\uA7BA-\\uA7F6\\uA82C-\\uA82F\\uA83A-\\uA83F\\uA878-\\uA87F\\uA8C6-\\uA8CD\\uA8DA-\\uA8DF\\uA954-\\uA95E\\uA97D-\\uA97F\\uA9CE\\uA9DA-\\uA9DD\\uA9FF\\uAA37-\\uAA3F\\uAA4E\\uAA4F\\uAA5A\\uAA5B\\uAAC3-\\uAADA\\uAAF7-\\uAB00\\uAB07\\uAB08\\uAB0F\\uAB10\\uAB17-\\uAB1F\\uAB27\\uAB2F\\uAB66-\\uAB6F\\uABEE\\uABEF\\uABFA-\\uABFF\\uD7A4-\\uD7AF\\uD7C7-\\uD7CA\\uD7FC-\\uD7FF\\uFA6E\\uFA6F\\uFADA-\\uFAFF\\uFB07-\\uFB12\\uFB18-\\uFB1C\\uFB37\\uFB3D\\uFB3F\\uFB42\\uFB45\\uFBC2-\\uFBD2\\uFD40-\\uFD4F\\uFD90\\uFD91\\uFDC8-\\uFDEF\\uFDFE\\uFDFF\\uFE1A-\\uFE1F\\uFE53\\uFE67\\uFE6C-\\uFE6F\\uFE75\\uFEFD\\uFEFE\\uFF00\\uFFBF-\\uFFC1\\uFFC8\\uFFC9\\uFFD0\\uFFD1\\uFFD8\\uFFD9\\uFFDD-\\uFFDF\\uFFE7\\uFFEF-\\uFFF8\\uFFFE\\uFFFF',\n        'astral': '\\uD800[\\uDC0C\\uDC27\\uDC3B\\uDC3E\\uDC4E\\uDC4F\\uDC5E-\\uDC7F\\uDCFB-\\uDCFF\\uDD03-\\uDD06\\uDD34-\\uDD36\\uDD8F\\uDD9C-\\uDD9F\\uDDA1-\\uDDCF\\uDDFE-\\uDE7F\\uDE9D-\\uDE9F\\uDED1-\\uDEDF\\uDEFC-\\uDEFF\\uDF24-\\uDF2C\\uDF4B-\\uDF4F\\uDF7B-\\uDF7F\\uDF9E\\uDFC4-\\uDFC7\\uDFD6-\\uDFFF]|\\uD801[\\uDC9E\\uDC9F\\uDCAA-\\uDCAF\\uDCD4-\\uDCD7\\uDCFC-\\uDCFF\\uDD28-\\uDD2F\\uDD64-\\uDD6E\\uDD70-\\uDDFF\\uDF37-\\uDF3F\\uDF56-\\uDF5F\\uDF68-\\uDFFF]|\\uD802[\\uDC06\\uDC07\\uDC09\\uDC36\\uDC39-\\uDC3B\\uDC3D\\uDC3E\\uDC56\\uDC9F-\\uDCA6\\uDCB0-\\uDCDF\\uDCF3\\uDCF6-\\uDCFA\\uDD1C-\\uDD1E\\uDD3A-\\uDD3E\\uDD40-\\uDD7F\\uDDB8-\\uDDBB\\uDDD0\\uDDD1\\uDE04\\uDE07-\\uDE0B\\uDE14\\uDE18\\uDE36\\uDE37\\uDE3B-\\uDE3E\\uDE49-\\uDE4F\\uDE59-\\uDE5F\\uDEA0-\\uDEBF\\uDEE7-\\uDEEA\\uDEF7-\\uDEFF\\uDF36-\\uDF38\\uDF56\\uDF57\\uDF73-\\uDF77\\uDF92-\\uDF98\\uDF9D-\\uDFA8\\uDFB0-\\uDFFF]|\\uD803[\\uDC49-\\uDC7F\\uDCB3-\\uDCBF\\uDCF3-\\uDCF9\\uDD28-\\uDD2F\\uDD3A-\\uDE5F\\uDE7F-\\uDEFF\\uDF28-\\uDF2F\\uDF5A-\\uDFFF]|\\uD804[\\uDC4E-\\uDC51\\uDC70-\\uDC7E\\uDCC2-\\uDCCC\\uDCCE\\uDCCF\\uDCE9-\\uDCEF\\uDCFA-\\uDCFF\\uDD35\\uDD47-\\uDD4F\\uDD77-\\uDD7F\\uDDCE\\uDDCF\\uDDE0\\uDDF5-\\uDDFF\\uDE12\\uDE3F-\\uDE7F\\uDE87\\uDE89\\uDE8E\\uDE9E\\uDEAA-\\uDEAF\\uDEEB-\\uDEEF\\uDEFA-\\uDEFF\\uDF04\\uDF0D\\uDF0E\\uDF11\\uDF12\\uDF29\\uDF31\\uDF34\\uDF3A\\uDF45\\uDF46\\uDF49\\uDF4A\\uDF4E\\uDF4F\\uDF51-\\uDF56\\uDF58-\\uDF5C\\uDF64\\uDF65\\uDF6D-\\uDF6F\\uDF75-\\uDFFF]|\\uD805[\\uDC5A\\uDC5C\\uDC5F-\\uDC7F\\uDCC8-\\uDCCF\\uDCDA-\\uDD7F\\uDDB6\\uDDB7\\uDDDE-\\uDDFF\\uDE45-\\uDE4F\\uDE5A-\\uDE5F\\uDE6D-\\uDE7F\\uDEB8-\\uDEBF\\uDECA-\\uDEFF\\uDF1B\\uDF1C\\uDF2C-\\uDF2F\\uDF40-\\uDFFF]|\\uD806[\\uDC3C-\\uDC9F\\uDCF3-\\uDCFE\\uDD00-\\uDDFF\\uDE48-\\uDE4F\\uDE84\\uDE85\\uDEA3-\\uDEBF\\uDEF9-\\uDFFF]|\\uD807[\\uDC09\\uDC37\\uDC46-\\uDC4F\\uDC6D-\\uDC6F\\uDC90\\uDC91\\uDCA8\\uDCB7-\\uDCFF\\uDD07\\uDD0A\\uDD37-\\uDD39\\uDD3B\\uDD3E\\uDD48-\\uDD4F\\uDD5A-\\uDD5F\\uDD66\\uDD69\\uDD8F\\uDD92\\uDD99-\\uDD9F\\uDDAA-\\uDEDF\\uDEF9-\\uDFFF]|\\uD808[\\uDF9A-\\uDFFF]|\\uD809[\\uDC6F\\uDC75-\\uDC7F\\uDD44-\\uDFFF]|[\\uD80A\\uD80B\\uD80E-\\uD810\\uD812-\\uD819\\uD823-\\uD82B\\uD82D\\uD82E\\uD830-\\uD833\\uD837\\uD839\\uD83F\\uD87B-\\uD87D\\uD87F-\\uDB3F\\uDB41-\\uDB7F][\\uDC00-\\uDFFF]|\\uD80D[\\uDC2F-\\uDFFF]|\\uD811[\\uDE47-\\uDFFF]|\\uD81A[\\uDE39-\\uDE3F\\uDE5F\\uDE6A-\\uDE6D\\uDE70-\\uDECF\\uDEEE\\uDEEF\\uDEF6-\\uDEFF\\uDF46-\\uDF4F\\uDF5A\\uDF62\\uDF78-\\uDF7C\\uDF90-\\uDFFF]|\\uD81B[\\uDC00-\\uDE3F\\uDE9B-\\uDEFF\\uDF45-\\uDF4F\\uDF7F-\\uDF8E\\uDFA0-\\uDFDF\\uDFE2-\\uDFFF]|\\uD821[\\uDFF2-\\uDFFF]|\\uD822[\\uDEF3-\\uDFFF]|\\uD82C[\\uDD1F-\\uDD6F\\uDEFC-\\uDFFF]|\\uD82F[\\uDC6B-\\uDC6F\\uDC7D-\\uDC7F\\uDC89-\\uDC8F\\uDC9A\\uDC9B\\uDCA4-\\uDFFF]|\\uD834[\\uDCF6-\\uDCFF\\uDD27\\uDD28\\uDDE9-\\uDDFF\\uDE46-\\uDEDF\\uDEF4-\\uDEFF\\uDF57-\\uDF5F\\uDF79-\\uDFFF]|\\uD835[\\uDC55\\uDC9D\\uDCA0\\uDCA1\\uDCA3\\uDCA4\\uDCA7\\uDCA8\\uDCAD\\uDCBA\\uDCBC\\uDCC4\\uDD06\\uDD0B\\uDD0C\\uDD15\\uDD1D\\uDD3A\\uDD3F\\uDD45\\uDD47-\\uDD49\\uDD51\\uDEA6\\uDEA7\\uDFCC\\uDFCD]|\\uD836[\\uDE8C-\\uDE9A\\uDEA0\\uDEB0-\\uDFFF]|\\uD838[\\uDC07\\uDC19\\uDC1A\\uDC22\\uDC25\\uDC2B-\\uDFFF]|\\uD83A[\\uDCC5\\uDCC6\\uDCD7-\\uDCFF\\uDD4B-\\uDD4F\\uDD5A-\\uDD5D\\uDD60-\\uDFFF]|\\uD83B[\\uDC00-\\uDC70\\uDCB5-\\uDDFF\\uDE04\\uDE20\\uDE23\\uDE25\\uDE26\\uDE28\\uDE33\\uDE38\\uDE3A\\uDE3C-\\uDE41\\uDE43-\\uDE46\\uDE48\\uDE4A\\uDE4C\\uDE50\\uDE53\\uDE55\\uDE56\\uDE58\\uDE5A\\uDE5C\\uDE5E\\uDE60\\uDE63\\uDE65\\uDE66\\uDE6B\\uDE73\\uDE78\\uDE7D\\uDE7F\\uDE8A\\uDE9C-\\uDEA0\\uDEA4\\uDEAA\\uDEBC-\\uDEEF\\uDEF2-\\uDFFF]|\\uD83C[\\uDC2C-\\uDC2F\\uDC94-\\uDC9F\\uDCAF\\uDCB0\\uDCC0\\uDCD0\\uDCF6-\\uDCFF\\uDD0D-\\uDD0F\\uDD6C-\\uDD6F\\uDDAD-\\uDDE5\\uDE03-\\uDE0F\\uDE3C-\\uDE3F\\uDE49-\\uDE4F\\uDE52-\\uDE5F\\uDE66-\\uDEFF]|\\uD83D[\\uDED5-\\uDEDF\\uDEED-\\uDEEF\\uDEFA-\\uDEFF\\uDF74-\\uDF7F\\uDFD9-\\uDFFF]|\\uD83E[\\uDC0C-\\uDC0F\\uDC48-\\uDC4F\\uDC5A-\\uDC5F\\uDC88-\\uDC8F\\uDCAE-\\uDCFF\\uDD0C-\\uDD0F\\uDD3F\\uDD71\\uDD72\\uDD77-\\uDD79\\uDD7B\\uDDA3-\\uDDAF\\uDDBA-\\uDDBF\\uDDC3-\\uDDCF\\uDE00-\\uDE5F\\uDE6E-\\uDFFF]|\\uD869[\\uDED7-\\uDEFF]|\\uD86D[\\uDF35-\\uDF3F]|\\uD86E[\\uDC1E\\uDC1F]|\\uD873[\\uDEA2-\\uDEAF]|\\uD87A[\\uDFE1-\\uDFFF]|\\uD87E[\\uDE1E-\\uDFFF]|\\uDB40[\\uDC00\\uDC02-\\uDC1F\\uDC80-\\uDCFF\\uDDF0-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'\n    },\n    {\n        'name': 'Co',\n        'alias': 'Private_Use',\n        'bmp': '\\uE000-\\uF8FF',\n        'astral': '[\\uDB80-\\uDBBE\\uDBC0-\\uDBFE][\\uDC00-\\uDFFF]|[\\uDBBF\\uDBFF][\\uDC00-\\uDFFD]'\n    },\n    {\n        'name': 'Cs',\n        'alias': 'Surrogate',\n        'bmp': '\\uD800-\\uDFFF'\n    },\n    {\n        'name': 'L',\n        'alias': 'Letter',\n        'bmp': 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n        'astral': '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]'\n    },\n    {\n        'name': 'LC',\n        'alias': 'Cased_Letter',\n        'bmp': 'A-Za-z\\xB5\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u01BA\\u01BC-\\u01BF\\u01C4-\\u0293\\u0295-\\u02AF\\u0370-\\u0373\\u0376\\u0377\\u037B-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0560-\\u0588\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2134\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2C7B\\u2C7E-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA640-\\uA66D\\uA680-\\uA69B\\uA722-\\uA76F\\uA771-\\uA787\\uA78B-\\uA78E\\uA790-\\uA7B9\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF21-\\uFF3A\\uFF41-\\uFF5A',\n        'astral': '\\uD801[\\uDC00-\\uDC4F\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB]|\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD806[\\uDCA0-\\uDCDF]|\\uD81B[\\uDE40-\\uDE7F]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDD00-\\uDD43]'\n    },\n    {\n        'name': 'Ll',\n        'alias': 'Lowercase_Letter',\n        'bmp': 'a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n        'astral': '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD81B[\\uDE60-\\uDE7F]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'\n    },\n    {\n        'name': 'Lm',\n        'alias': 'Modifier_Letter',\n        'bmp': '\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5\\u06E6\\u07F4\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA69C\\uA69D\\uA717-\\uA71F\\uA770\\uA788\\uA7F8\\uA7F9\\uA9CF\\uA9E6\\uAA70\\uAADD\\uAAF3\\uAAF4\\uAB5C-\\uAB5F\\uFF70\\uFF9E\\uFF9F',\n        'astral': '\\uD81A[\\uDF40-\\uDF43]|\\uD81B[\\uDF93-\\uDF9F\\uDFE0\\uDFE1]'\n    },\n    {\n        'name': 'Lo',\n        'alias': 'Other_Letter',\n        'bmp': '\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E45\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1100-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA78F\\uA7F7\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9E0-\\uA9E4\\uA9E7-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n        'astral': '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF40\\uDF42-\\uDF49\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF]|\\uD801[\\uDC50-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDD00-\\uDD23\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD44\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF1A]|\\uD806[\\uDC00-\\uDC2B\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDEE0-\\uDEF2]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]'\n    },\n    {\n        'name': 'Lt',\n        'alias': 'Titlecase_Letter',\n        'bmp': '\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC'\n    },\n    {\n        'name': 'Lu',\n        'alias': 'Uppercase_Letter',\n        'bmp': 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uA7B8\\uFF21-\\uFF3A',\n        'astral': '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD81B[\\uDE40-\\uDE5F]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]'\n    },\n    {\n        'name': 'M',\n        'alias': 'Mark',\n        'bmp': '\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n        'astral': '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDF46-\\uDF50]|\\uD804[\\uDC00-\\uDC02\\uDC38-\\uDC46\\uDC7F-\\uDC82\\uDCB0-\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD34\\uDD45\\uDD46\\uDD73\\uDD80-\\uDD82\\uDDB3-\\uDDC0\\uDDC9-\\uDDCC\\uDE2C-\\uDE37\\uDE3E\\uDEDF-\\uDEEA\\uDF00-\\uDF03\\uDF3B\\uDF3C\\uDF3E-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC35-\\uDC46\\uDC5E\\uDCB0-\\uDCC3\\uDDAF-\\uDDB5\\uDDB8-\\uDDC0\\uDDDC\\uDDDD\\uDE30-\\uDE40\\uDEAB-\\uDEB7\\uDF1D-\\uDF2B]|\\uD806[\\uDC2C-\\uDC3A\\uDE01-\\uDE0A\\uDE33-\\uDE39\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE5B\\uDE8A-\\uDE99]|\\uD807[\\uDC2F-\\uDC36\\uDC38-\\uDC3F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD8A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD97\\uDEF3-\\uDEF6]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF51-\\uDF7E\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'\n    },\n    {\n        'name': 'Mc',\n        'alias': 'Spacing_Mark',\n        'bmp': '\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E\\u094F\\u0982\\u0983\\u09BE-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0B02\\u0B03\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0D02\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0F3E\\u0F3F\\u0F7F\\u102B\\u102C\\u1031\\u1038\\u103B\\u103C\\u1056\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1A19\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43\\u1B44\\u1B82\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1C24-\\u1C2B\\u1C34\\u1C35\\u1CE1\\u1CF2\\u1CF3\\u1CF7\\u302E\\u302F\\uA823\\uA824\\uA827\\uA880\\uA881\\uA8B4-\\uA8C3\\uA952\\uA953\\uA983\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BD-\\uA9C0\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA4D\\uAA7B\\uAA7D\\uAAEB\\uAAEE\\uAAEF\\uAAF5\\uABE3\\uABE4\\uABE6\\uABE7\\uABE9\\uABEA\\uABEC',\n        'astral': '\\uD804[\\uDC00\\uDC02\\uDC82\\uDCB0-\\uDCB2\\uDCB7\\uDCB8\\uDD2C\\uDD45\\uDD46\\uDD82\\uDDB3-\\uDDB5\\uDDBF\\uDDC0\\uDE2C-\\uDE2E\\uDE32\\uDE33\\uDE35\\uDEE0-\\uDEE2\\uDF02\\uDF03\\uDF3E\\uDF3F\\uDF41-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF62\\uDF63]|\\uD805[\\uDC35-\\uDC37\\uDC40\\uDC41\\uDC45\\uDCB0-\\uDCB2\\uDCB9\\uDCBB-\\uDCBE\\uDCC1\\uDDAF-\\uDDB1\\uDDB8-\\uDDBB\\uDDBE\\uDE30-\\uDE32\\uDE3B\\uDE3C\\uDE3E\\uDEAC\\uDEAE\\uDEAF\\uDEB6\\uDF20\\uDF21\\uDF26]|\\uD806[\\uDC2C-\\uDC2E\\uDC38\\uDE39\\uDE57\\uDE58\\uDE97]|\\uD807[\\uDC2F\\uDC3E\\uDCA9\\uDCB1\\uDCB4\\uDD8A-\\uDD8E\\uDD93\\uDD94\\uDD96\\uDEF5\\uDEF6]|\\uD81B[\\uDF51-\\uDF7E]|\\uD834[\\uDD65\\uDD66\\uDD6D-\\uDD72]'\n    },\n    {\n        'name': 'Me',\n        'alias': 'Enclosing_Mark',\n        'bmp': '\\u0488\\u0489\\u1ABE\\u20DD-\\u20E0\\u20E2-\\u20E4\\uA670-\\uA672'\n    },\n    {\n        'name': 'Mn',\n        'alias': 'Nonspacing_Mark',\n        'bmp': '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ABD\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F',\n        'astral': '\\uD800[\\uDDFD\\uDEE0\\uDF76-\\uDF7A]|\\uD802[\\uDE01-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE0F\\uDE38-\\uDE3A\\uDE3F\\uDEE5\\uDEE6]|\\uD803[\\uDD24-\\uDD27\\uDF46-\\uDF50]|\\uD804[\\uDC01\\uDC38-\\uDC46\\uDC7F-\\uDC81\\uDCB3-\\uDCB6\\uDCB9\\uDCBA\\uDD00-\\uDD02\\uDD27-\\uDD2B\\uDD2D-\\uDD34\\uDD73\\uDD80\\uDD81\\uDDB6-\\uDDBE\\uDDC9-\\uDDCC\\uDE2F-\\uDE31\\uDE34\\uDE36\\uDE37\\uDE3E\\uDEDF\\uDEE3-\\uDEEA\\uDF00\\uDF01\\uDF3B\\uDF3C\\uDF40\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC38-\\uDC3F\\uDC42-\\uDC44\\uDC46\\uDC5E\\uDCB3-\\uDCB8\\uDCBA\\uDCBF\\uDCC0\\uDCC2\\uDCC3\\uDDB2-\\uDDB5\\uDDBC\\uDDBD\\uDDBF\\uDDC0\\uDDDC\\uDDDD\\uDE33-\\uDE3A\\uDE3D\\uDE3F\\uDE40\\uDEAB\\uDEAD\\uDEB0-\\uDEB5\\uDEB7\\uDF1D-\\uDF1F\\uDF22-\\uDF25\\uDF27-\\uDF2B]|\\uD806[\\uDC2F-\\uDC37\\uDC39\\uDC3A\\uDE01-\\uDE0A\\uDE33-\\uDE38\\uDE3B-\\uDE3E\\uDE47\\uDE51-\\uDE56\\uDE59-\\uDE5B\\uDE8A-\\uDE96\\uDE98\\uDE99]|\\uD807[\\uDC30-\\uDC36\\uDC38-\\uDC3D\\uDC3F\\uDC92-\\uDCA7\\uDCAA-\\uDCB0\\uDCB2\\uDCB3\\uDCB5\\uDCB6\\uDD31-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD45\\uDD47\\uDD90\\uDD91\\uDD95\\uDD97\\uDEF3\\uDEF4]|\\uD81A[\\uDEF0-\\uDEF4\\uDF30-\\uDF36]|\\uD81B[\\uDF8F-\\uDF92]|\\uD82F[\\uDC9D\\uDC9E]|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDCD0-\\uDCD6\\uDD44-\\uDD4A]|\\uDB40[\\uDD00-\\uDDEF]'\n    },\n    {\n        'name': 'N',\n        'alias': 'Number',\n        'bmp': '0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D58-\\u0D5E\\u0D66-\\u0D78\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n        'astral': '\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE48\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDF1D-\\uDF26\\uDF51-\\uDF54]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD807[\\uDC50-\\uDC6C\\uDD50-\\uDD59\\uDDA0-\\uDDA9]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD81B[\\uDE80-\\uDE96]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4]|\\uD83C[\\uDD00-\\uDD0C]'\n    },\n    {\n        'name': 'Nd',\n        'alias': 'Decimal_Number',\n        'bmp': '0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19',\n        'astral': '\\uD801[\\uDCA0-\\uDCA9]|\\uD803[\\uDD30-\\uDD39]|\\uD804[\\uDC66-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDEF0-\\uDEF9]|\\uD805[\\uDC50-\\uDC59\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF39]|\\uD806[\\uDCE0-\\uDCE9]|\\uD807[\\uDC50-\\uDC59\\uDD50-\\uDD59\\uDDA0-\\uDDA9]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDD50-\\uDD59]'\n    },\n    {\n        'name': 'Nl',\n        'alias': 'Letter_Number',\n        'bmp': '\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF',\n        'astral': '\\uD800[\\uDD40-\\uDD74\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD809[\\uDC00-\\uDC6E]'\n    },\n    {\n        'name': 'No',\n        'alias': 'Other_Number',\n        'bmp': '\\xB2\\xB3\\xB9\\xBC-\\xBE\\u09F4-\\u09F9\\u0B72-\\u0B77\\u0BF0-\\u0BF2\\u0C78-\\u0C7E\\u0D58-\\u0D5E\\u0D70-\\u0D78\\u0F2A-\\u0F33\\u1369-\\u137C\\u17F0-\\u17F9\\u19DA\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215F\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA830-\\uA835',\n        'astral': '\\uD800[\\uDD07-\\uDD33\\uDD75-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE48\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E\\uDF1D-\\uDF26\\uDF51-\\uDF54]|\\uD804[\\uDC52-\\uDC65\\uDDE1-\\uDDF4]|\\uD805[\\uDF3A\\uDF3B]|\\uD806[\\uDCEA-\\uDCF2]|\\uD807[\\uDC5A-\\uDC6C]|\\uD81A[\\uDF5B-\\uDF61]|\\uD81B[\\uDE80-\\uDE96]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4]|\\uD83C[\\uDD00-\\uDD0C]'\n    },\n    {\n        'name': 'P',\n        'alias': 'Punctuation',\n        'bmp': '!-#%-\\\\*,-\\\\/:;\\\\?@\\\\[-\\\\]_\\\\{\\\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65',\n        'astral': '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'\n    },\n    {\n        'name': 'Pc',\n        'alias': 'Connector_Punctuation',\n        'bmp': '_\\u203F\\u2040\\u2054\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFF3F'\n    },\n    {\n        'name': 'Pd',\n        'alias': 'Dash_Punctuation',\n        'bmp': '\\\\-\\u058A\\u05BE\\u1400\\u1806\\u2010-\\u2015\\u2E17\\u2E1A\\u2E3A\\u2E3B\\u2E40\\u301C\\u3030\\u30A0\\uFE31\\uFE32\\uFE58\\uFE63\\uFF0D'\n    },\n    {\n        'name': 'Pe',\n        'alias': 'Close_Punctuation',\n        'bmp': '\\\\)\\\\]\\\\}\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63'\n    },\n    {\n        'name': 'Pf',\n        'alias': 'Final_Punctuation',\n        'bmp': '\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21'\n    },\n    {\n        'name': 'Pi',\n        'alias': 'Initial_Punctuation',\n        'bmp': '\\xAB\\u2018\\u201B\\u201C\\u201F\\u2039\\u2E02\\u2E04\\u2E09\\u2E0C\\u2E1C\\u2E20'\n    },\n    {\n        'name': 'Po',\n        'alias': 'Other_Punctuation',\n        'bmp': '!-#%-\\'\\\\*,\\\\.\\\\/:;\\\\?@\\\\\\xA1\\xA7\\xB6\\xB7\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u166D\\u166E\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u1805\\u1807-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2016\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203B-\\u203E\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205E\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00\\u2E01\\u2E06-\\u2E08\\u2E0B\\u2E0E-\\u2E16\\u2E18\\u2E19\\u2E1B\\u2E1E\\u2E1F\\u2E2A-\\u2E2E\\u2E30-\\u2E39\\u2E3C-\\u2E3F\\u2E41\\u2E43-\\u2E4E\\u3001-\\u3003\\u303D\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFE10-\\uFE16\\uFE19\\uFE30\\uFE45\\uFE46\\uFE49-\\uFE4C\\uFE50-\\uFE52\\uFE54-\\uFE57\\uFE5F-\\uFE61\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF07\\uFF0A\\uFF0C\\uFF0E\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3C\\uFF61\\uFF64\\uFF65',\n        'astral': '\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]'\n    },\n    {\n        'name': 'Ps',\n        'alias': 'Open_Punctuation',\n        'bmp': '\\\\(\\\\[\\\\{\\u0F3A\\u0F3C\\u169B\\u201A\\u201E\\u2045\\u207D\\u208D\\u2308\\u230A\\u2329\\u2768\\u276A\\u276C\\u276E\\u2770\\u2772\\u2774\\u27C5\\u27E6\\u27E8\\u27EA\\u27EC\\u27EE\\u2983\\u2985\\u2987\\u2989\\u298B\\u298D\\u298F\\u2991\\u2993\\u2995\\u2997\\u29D8\\u29DA\\u29FC\\u2E22\\u2E24\\u2E26\\u2E28\\u2E42\\u3008\\u300A\\u300C\\u300E\\u3010\\u3014\\u3016\\u3018\\u301A\\u301D\\uFD3F\\uFE17\\uFE35\\uFE37\\uFE39\\uFE3B\\uFE3D\\uFE3F\\uFE41\\uFE43\\uFE47\\uFE59\\uFE5B\\uFE5D\\uFF08\\uFF3B\\uFF5B\\uFF5F\\uFF62'\n    },\n    {\n        'name': 'S',\n        'alias': 'Symbol',\n        'bmp': '\\\\$\\\\+<->\\\\^`\\\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BF\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BC8\\u2BCA-\\u2BFE\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD',\n        'astral': '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83B[\\uDCAC\\uDCB0\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED4\\uDEE0-\\uDEEC\\uDEF0-\\uDEF9\\uDF00-\\uDF73\\uDF80-\\uDFD8]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD00-\\uDD0B\\uDD10-\\uDD3E\\uDD40-\\uDD70\\uDD73-\\uDD76\\uDD7A\\uDD7C-\\uDDA2\\uDDB0-\\uDDB9\\uDDC0-\\uDDC2\\uDDD0-\\uDDFF\\uDE60-\\uDE6D]'\n    },\n    {\n        'name': 'Sc',\n        'alias': 'Currency_Symbol',\n        'bmp': '\\\\$\\xA2-\\xA5\\u058F\\u060B\\u07FE\\u07FF\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BF\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6',\n        'astral': '\\uD83B\\uDCB0'\n    },\n    {\n        'name': 'Sk',\n        'alias': 'Modifier_Symbol',\n        'bmp': '\\\\^`\\xA8\\xAF\\xB4\\xB8\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u309B\\u309C\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uAB5B\\uFBB2-\\uFBC1\\uFF3E\\uFF40\\uFFE3',\n        'astral': '\\uD83C[\\uDFFB-\\uDFFF]'\n    },\n    {\n        'name': 'Sm',\n        'alias': 'Math_Symbol',\n        'bmp': '\\\\+<->\\\\|~\\xAC\\xB1\\xD7\\xF7\\u03F6\\u0606-\\u0608\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u2118\\u2140-\\u2144\\u214B\\u2190-\\u2194\\u219A\\u219B\\u21A0\\u21A3\\u21A6\\u21AE\\u21CE\\u21CF\\u21D2\\u21D4\\u21F4-\\u22FF\\u2320\\u2321\\u237C\\u239B-\\u23B3\\u23DC-\\u23E1\\u25B7\\u25C1\\u25F8-\\u25FF\\u266F\\u27C0-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u27FF\\u2900-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2AFF\\u2B30-\\u2B44\\u2B47-\\u2B4C\\uFB29\\uFE62\\uFE64-\\uFE66\\uFF0B\\uFF1C-\\uFF1E\\uFF5C\\uFF5E\\uFFE2\\uFFE9-\\uFFEC',\n        'astral': '\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD83B[\\uDEF0\\uDEF1]'\n    },\n    {\n        'name': 'So',\n        'alias': 'Other_Symbol',\n        'bmp': '\\xA6\\xA9\\xAE\\xB0\\u0482\\u058D\\u058E\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u09FA\\u0B70\\u0BF3-\\u0BF8\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116\\u2117\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u214A\\u214C\\u214D\\u214F\\u218A\\u218B\\u2195-\\u2199\\u219C-\\u219F\\u21A1\\u21A2\\u21A4\\u21A5\\u21A7-\\u21AD\\u21AF-\\u21CD\\u21D0\\u21D1\\u21D3\\u21D5-\\u21F3\\u2300-\\u2307\\u230C-\\u231F\\u2322-\\u2328\\u232B-\\u237B\\u237D-\\u239A\\u23B4-\\u23DB\\u23E2-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u25B6\\u25B8-\\u25C0\\u25C2-\\u25F7\\u2600-\\u266E\\u2670-\\u2767\\u2794-\\u27BF\\u2800-\\u28FF\\u2B00-\\u2B2F\\u2B45\\u2B46\\u2B4D-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BC8\\u2BCA-\\u2BFE\\u2CE5-\\u2CEA\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u32FE\\u3300-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA828-\\uA82B\\uA836\\uA837\\uA839\\uAA77-\\uAA79\\uFDFD\\uFFE4\\uFFE8\\uFFED\\uFFEE\\uFFFC\\uFFFD',\n        'astral': '\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9B\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD83B\\uDCAC|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD10-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFA]|\\uD83D[\\uDC00-\\uDED4\\uDEE0-\\uDEEC\\uDEF0-\\uDEF9\\uDF00-\\uDF73\\uDF80-\\uDFD8]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD00-\\uDD0B\\uDD10-\\uDD3E\\uDD40-\\uDD70\\uDD73-\\uDD76\\uDD7A\\uDD7C-\\uDDA2\\uDDB0-\\uDDB9\\uDDC0-\\uDDC2\\uDDD0-\\uDDFF\\uDE60-\\uDE6D]'\n    },\n    {\n        'name': 'Z',\n        'alias': 'Separator',\n        'bmp': ' \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n    },\n    {\n        'name': 'Zl',\n        'alias': 'Line_Separator',\n        'bmp': '\\u2028'\n    },\n    {\n        'name': 'Zp',\n        'alias': 'Paragraph_Separator',\n        'bmp': '\\u2029'\n    },\n    {\n        'name': 'Zs',\n        'alias': 'Space_Separator',\n        'bmp': ' \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000'\n    }\n];\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _categories = _interopRequireDefault(require(\"../../tools/output/categories\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\n * XRegExp Unicode Categories 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2010-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds support for Unicode's general categories. E.g., `\\p{Lu}` or `\\p{Uppercase Letter}`. See\n   * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token\n   * names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n   *\n   * Uses Unicode 11.0.0.\n   *\n   * @requires XRegExp, Unicode Base\n   */\n  if (!XRegExp.addUnicodeData) {\n    throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');\n  }\n\n  XRegExp.addUnicodeData(_categories.default);\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","module.exports = [\n    {\n        'name': 'ASCII',\n        'bmp': '\\0-\\x7F'\n    },\n    {\n        'name': 'Alphabetic',\n        'bmp': 'A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0345\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05B0-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0610-\\u061A\\u0620-\\u0657\\u0659-\\u065F\\u066E-\\u06D3\\u06D5-\\u06DC\\u06E1-\\u06E8\\u06ED-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710-\\u073F\\u074D-\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0817\\u081A-\\u082C\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08DF\\u08E3-\\u08E9\\u08F0-\\u093B\\u093D-\\u094C\\u094E-\\u0950\\u0955-\\u0963\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C4\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09F0\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B\\u0A4C\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A70-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0-\\u0AE3\\u0AF9-\\u0AFC\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D-\\u0B44\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4C\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCC\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E46\\u0E4D\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ECD\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F81\\u0F88-\\u0F97\\u0F99-\\u0FBC\\u1000-\\u1036\\u1038\\u103B-\\u103F\\u1050-\\u1062\\u1065-\\u1068\\u106E-\\u1086\\u108E\\u109C\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1713\\u1720-\\u1733\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17B3\\u17B6-\\u17C8\\u17D7\\u17DC\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u1938\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A61-\\u1A74\\u1AA7\\u1B00-\\u1B33\\u1B35-\\u1B43\\u1B45-\\u1B4B\\u1B80-\\u1BA9\\u1BAC-\\u1BAF\\u1BBA-\\u1BE5\\u1BE7-\\u1BF1\\u1C00-\\u1C35\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1DE7-\\u1DF4\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u24B6-\\u24E9\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA674-\\uA67B\\uA67F-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7B9\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA827\\uA840-\\uA873\\uA880-\\uA8C3\\uA8C5\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA90A-\\uA92A\\uA930-\\uA952\\uA960-\\uA97C\\uA980-\\uA9B2\\uA9B4-\\uA9BF\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAABE\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC',\n        'astral': '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDD00-\\uDD27\\uDF00-\\uDF1C\\uDF27\\uDF30-\\uDF45]|\\uD804[\\uDC00-\\uDC45\\uDC82-\\uDCB8\\uDCD0-\\uDCE8\\uDD00-\\uDD32\\uDD44-\\uDD46\\uDD50-\\uDD72\\uDD76\\uDD80-\\uDDBF\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE34\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEE8\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D-\\uDF44\\uDF47\\uDF48\\uDF4B\\uDF4C\\uDF50\\uDF57\\uDF5D-\\uDF63]|\\uD805[\\uDC00-\\uDC41\\uDC43-\\uDC45\\uDC47-\\uDC4A\\uDC80-\\uDCC1\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDB5\\uDDB8-\\uDDBE\\uDDD8-\\uDDDD\\uDE00-\\uDE3E\\uDE40\\uDE44\\uDE80-\\uDEB5\\uDF00-\\uDF1A\\uDF1D-\\uDF2A]|\\uD806[\\uDC00-\\uDC38\\uDCA0-\\uDCDF\\uDCFF\\uDE00-\\uDE32\\uDE35-\\uDE3E\\uDE50-\\uDE83\\uDE86-\\uDE97\\uDE9D\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC3E\\uDC40\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD41\\uDD43\\uDD46\\uDD47\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD96\\uDD98\\uDEE0-\\uDEF6]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE7F\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9E]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43\\uDD47]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]'\n    },\n    {\n        'name': 'Any',\n        'isBmpLast': true,\n        'bmp': '\\0-\\uFFFF',\n        'astral': '[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'Default_Ignorable_Code_Point',\n        'bmp': '\\xAD\\u034F\\u061C\\u115F\\u1160\\u17B4\\u17B5\\u180B-\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u206F\\u3164\\uFE00-\\uFE0F\\uFEFF\\uFFA0\\uFFF0-\\uFFF8',\n        'astral': '\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|[\\uDB40-\\uDB43][\\uDC00-\\uDFFF]'\n    },\n    {\n        'name': 'Lowercase',\n        'bmp': 'a-z\\xAA\\xB5\\xBA\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02B8\\u02C0\\u02C1\\u02E0-\\u02E4\\u0345\\u0371\\u0373\\u0377\\u037A-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0560-\\u0588\\u10D0-\\u10FA\\u10FD-\\u10FF\\u13F8-\\u13FD\\u1C80-\\u1C88\\u1D00-\\u1DBF\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u2071\\u207F\\u2090-\\u209C\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2170-\\u217F\\u2184\\u24D0-\\u24E9\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7D\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B-\\uA69D\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7AF\\uA7B5\\uA7B7\\uA7B9\\uA7F8-\\uA7FA\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A',\n        'astral': '\\uD801[\\uDC28-\\uDC4F\\uDCD8-\\uDCFB]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD81B[\\uDE60-\\uDE7F]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB]|\\uD83A[\\uDD22-\\uDD43]'\n    },\n    {\n        'name': 'Noncharacter_Code_Point',\n        'bmp': '\\uFDD0-\\uFDEF\\uFFFE\\uFFFF',\n        'astral': '[\\uD83F\\uD87F\\uD8BF\\uD8FF\\uD93F\\uD97F\\uD9BF\\uD9FF\\uDA3F\\uDA7F\\uDABF\\uDAFF\\uDB3F\\uDB7F\\uDBBF\\uDBFF][\\uDFFE\\uDFFF]'\n    },\n    {\n        'name': 'Uppercase',\n        'bmp': 'A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017B\\u017D\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019C\\u019D\\u019F\\u01A0\\u01A2\\u01A4\\u01A6\\u01A7\\u01A9\\u01AC\\u01AE\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A\\u023B\\u023D\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0528\\u052A\\u052C\\u052E\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u13A0-\\u13F5\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E\\u213F\\u2145\\u2160-\\u216F\\u2183\\u24B6-\\u24CF\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA698\\uA69A\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA796\\uA798\\uA79A\\uA79C\\uA79E\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA-\\uA7AE\\uA7B0-\\uA7B4\\uA7B6\\uA7B8\\uFF21-\\uFF3A',\n        'astral': '\\uD801[\\uDC00-\\uDC27\\uDCB0-\\uDCD3]|\\uD803[\\uDC80-\\uDCB2]|\\uD806[\\uDCA0-\\uDCBF]|\\uD81B[\\uDE40-\\uDE5F]|\\uD835[\\uDC00-\\uDC19\\uDC34-\\uDC4D\\uDC68-\\uDC81\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB5\\uDCD0-\\uDCE9\\uDD04\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD38\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD6C-\\uDD85\\uDDA0-\\uDDB9\\uDDD4-\\uDDED\\uDE08-\\uDE21\\uDE3C-\\uDE55\\uDE70-\\uDE89\\uDEA8-\\uDEC0\\uDEE2-\\uDEFA\\uDF1C-\\uDF34\\uDF56-\\uDF6E\\uDF90-\\uDFA8\\uDFCA]|\\uD83A[\\uDD00-\\uDD21]|\\uD83C[\\uDD30-\\uDD49\\uDD50-\\uDD69\\uDD70-\\uDD89]'\n    },\n    {\n        'name': 'White_Space',\n        'bmp': '\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\n    }\n];\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _properties = _interopRequireDefault(require(\"../../tools/output/properties\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\n * XRegExp Unicode Properties 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2012-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See\n   * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from\n   * UAX #44 <http://unicode.org/reports/tr44/>:\n   *\n   * - Alphabetic\n   *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +\n   *   Lo + Nl + Other_Alphabetic.\n   *\n   * - Default_Ignorable_Code_Point\n   *   For programmatic determination of default ignorable code points. New characters that should\n   *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,\n   *   permitting programs to correctly handle the default rendering of such characters when not\n   *   otherwise supported.\n   *\n   * - Lowercase\n   *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.\n   *\n   * - Noncharacter_Code_Point\n   *   Code points permanently reserved for internal use.\n   *\n   * - Uppercase\n   *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.\n   *\n   * - White_Space\n   *   Spaces, separator characters and other control characters which should be treated by\n   *   programming languages as \"white space\" for the purpose of parsing elements.\n   *\n   * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS\n   * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are\n   * included in XRegExp's Unicode Categories and Unicode Scripts addons.\n   *\n   * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.\n   *\n   * Uses Unicode 11.0.0.\n   *\n   * @requires XRegExp, Unicode Base\n   */\n  if (!XRegExp.addUnicodeData) {\n    throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');\n  }\n\n  var unicodeData = _properties.default; // Add non-generated data\n\n  unicodeData.push({\n    name: 'Assigned',\n    // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode\n    // Categories addon is required to use this property\n    inverseOf: 'Cn'\n  });\n  XRegExp.addUnicodeData(unicodeData);\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","module.exports = [\n    {\n        'name': 'Adlam',\n        'astral': '\\uD83A[\\uDD00-\\uDD4A\\uDD50-\\uDD59\\uDD5E\\uDD5F]'\n    },\n    {\n        'name': 'Ahom',\n        'astral': '\\uD805[\\uDF00-\\uDF1A\\uDF1D-\\uDF2B\\uDF30-\\uDF3F]'\n    },\n    {\n        'name': 'Anatolian_Hieroglyphs',\n        'astral': '\\uD811[\\uDC00-\\uDE46]'\n    },\n    {\n        'name': 'Arabic',\n        'bmp': '\\u0600-\\u0604\\u0606-\\u060B\\u060D-\\u061A\\u061C\\u061E\\u0620-\\u063F\\u0641-\\u064A\\u0656-\\u066F\\u0671-\\u06DC\\u06DE-\\u06FF\\u0750-\\u077F\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D3-\\u08E1\\u08E3-\\u08FF\\uFB50-\\uFBC1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFD\\uFE70-\\uFE74\\uFE76-\\uFEFC',\n        'astral': '\\uD803[\\uDE60-\\uDE7E]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB\\uDEF0\\uDEF1]'\n    },\n    {\n        'name': 'Armenian',\n        'bmp': '\\u0531-\\u0556\\u0559-\\u0588\\u058A\\u058D-\\u058F\\uFB13-\\uFB17'\n    },\n    {\n        'name': 'Avestan',\n        'astral': '\\uD802[\\uDF00-\\uDF35\\uDF39-\\uDF3F]'\n    },\n    {\n        'name': 'Balinese',\n        'bmp': '\\u1B00-\\u1B4B\\u1B50-\\u1B7C'\n    },\n    {\n        'name': 'Bamum',\n        'bmp': '\\uA6A0-\\uA6F7',\n        'astral': '\\uD81A[\\uDC00-\\uDE38]'\n    },\n    {\n        'name': 'Bassa_Vah',\n        'astral': '\\uD81A[\\uDED0-\\uDEED\\uDEF0-\\uDEF5]'\n    },\n    {\n        'name': 'Batak',\n        'bmp': '\\u1BC0-\\u1BF3\\u1BFC-\\u1BFF'\n    },\n    {\n        'name': 'Bengali',\n        'bmp': '\\u0980-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FE'\n    },\n    {\n        'name': 'Bhaiksuki',\n        'astral': '\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC45\\uDC50-\\uDC6C]'\n    },\n    {\n        'name': 'Bopomofo',\n        'bmp': '\\u02EA\\u02EB\\u3105-\\u312F\\u31A0-\\u31BA'\n    },\n    {\n        'name': 'Brahmi',\n        'astral': '\\uD804[\\uDC00-\\uDC4D\\uDC52-\\uDC6F\\uDC7F]'\n    },\n    {\n        'name': 'Braille',\n        'bmp': '\\u2800-\\u28FF'\n    },\n    {\n        'name': 'Buginese',\n        'bmp': '\\u1A00-\\u1A1B\\u1A1E\\u1A1F'\n    },\n    {\n        'name': 'Buhid',\n        'bmp': '\\u1740-\\u1753'\n    },\n    {\n        'name': 'Canadian_Aboriginal',\n        'bmp': '\\u1400-\\u167F\\u18B0-\\u18F5'\n    },\n    {\n        'name': 'Carian',\n        'astral': '\\uD800[\\uDEA0-\\uDED0]'\n    },\n    {\n        'name': 'Caucasian_Albanian',\n        'astral': '\\uD801[\\uDD30-\\uDD63\\uDD6F]'\n    },\n    {\n        'name': 'Chakma',\n        'astral': '\\uD804[\\uDD00-\\uDD34\\uDD36-\\uDD46]'\n    },\n    {\n        'name': 'Cham',\n        'bmp': '\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA5F'\n    },\n    {\n        'name': 'Cherokee',\n        'bmp': '\\u13A0-\\u13F5\\u13F8-\\u13FD\\uAB70-\\uABBF'\n    },\n    {\n        'name': 'Common',\n        'bmp': '\\0-@\\\\[-`\\\\{-\\xA9\\xAB-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9-\\u02DF\\u02E5-\\u02E9\\u02EC-\\u02FF\\u0374\\u037E\\u0385\\u0387\\u0589\\u0605\\u060C\\u061B\\u061F\\u0640\\u06DD\\u08E2\\u0964\\u0965\\u0E3F\\u0FD5-\\u0FD8\\u10FB\\u16EB-\\u16ED\\u1735\\u1736\\u1802\\u1803\\u1805\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5-\\u1CF7\\u2000-\\u200B\\u200E-\\u2064\\u2066-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20BF\\u2100-\\u2125\\u2127-\\u2129\\u212C-\\u2131\\u2133-\\u214D\\u214F-\\u215F\\u2189-\\u218B\\u2190-\\u2426\\u2440-\\u244A\\u2460-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B98-\\u2BC8\\u2BCA-\\u2BFE\\u2E00-\\u2E4E\\u2FF0-\\u2FFB\\u3000-\\u3004\\u3006\\u3008-\\u3020\\u3030-\\u3037\\u303C-\\u303F\\u309B\\u309C\\u30A0\\u30FB\\u30FC\\u3190-\\u319F\\u31C0-\\u31E3\\u3220-\\u325F\\u327F-\\u32CF\\u3358-\\u33FF\\u4DC0-\\u4DFF\\uA700-\\uA721\\uA788-\\uA78A\\uA830-\\uA839\\uA92E\\uA9CF\\uAB5B\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFF70\\uFF9E\\uFF9F\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD',\n        'astral': '\\uD800[\\uDD00-\\uDD02\\uDD07-\\uDD33\\uDD37-\\uDD3F\\uDD90-\\uDD9B\\uDDD0-\\uDDFC\\uDEE1-\\uDEFB]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD66\\uDD6A-\\uDD7A\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDEE0-\\uDEF3\\uDF00-\\uDF56\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83B[\\uDC71-\\uDCB4]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD00-\\uDD0C\\uDD10-\\uDD6B\\uDD70-\\uDDAC\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED4\\uDEE0-\\uDEEC\\uDEF0-\\uDEF9\\uDF00-\\uDF73\\uDF80-\\uDFD8]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDD00-\\uDD0B\\uDD10-\\uDD3E\\uDD40-\\uDD70\\uDD73-\\uDD76\\uDD7A\\uDD7C-\\uDDA2\\uDDB0-\\uDDB9\\uDDC0-\\uDDC2\\uDDD0-\\uDDFF\\uDE60-\\uDE6D]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]'\n    },\n    {\n        'name': 'Coptic',\n        'bmp': '\\u03E2-\\u03EF\\u2C80-\\u2CF3\\u2CF9-\\u2CFF'\n    },\n    {\n        'name': 'Cuneiform',\n        'astral': '\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC70-\\uDC74\\uDC80-\\uDD43]'\n    },\n    {\n        'name': 'Cypriot',\n        'astral': '\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F]'\n    },\n    {\n        'name': 'Cyrillic',\n        'bmp': '\\u0400-\\u0484\\u0487-\\u052F\\u1C80-\\u1C88\\u1D2B\\u1D78\\u2DE0-\\u2DFF\\uA640-\\uA69F\\uFE2E\\uFE2F'\n    },\n    {\n        'name': 'Deseret',\n        'astral': '\\uD801[\\uDC00-\\uDC4F]'\n    },\n    {\n        'name': 'Devanagari',\n        'bmp': '\\u0900-\\u0950\\u0953-\\u0963\\u0966-\\u097F\\uA8E0-\\uA8FF'\n    },\n    {\n        'name': 'Dogra',\n        'astral': '\\uD806[\\uDC00-\\uDC3B]'\n    },\n    {\n        'name': 'Duployan',\n        'astral': '\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9C-\\uDC9F]'\n    },\n    {\n        'name': 'Egyptian_Hieroglyphs',\n        'astral': '\\uD80C[\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]'\n    },\n    {\n        'name': 'Elbasan',\n        'astral': '\\uD801[\\uDD00-\\uDD27]'\n    },\n    {\n        'name': 'Ethiopic',\n        'bmp': '\\u1200-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E'\n    },\n    {\n        'name': 'Georgian',\n        'bmp': '\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u10FF\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u2D00-\\u2D25\\u2D27\\u2D2D'\n    },\n    {\n        'name': 'Glagolitic',\n        'bmp': '\\u2C00-\\u2C2E\\u2C30-\\u2C5E',\n        'astral': '\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]'\n    },\n    {\n        'name': 'Gothic',\n        'astral': '\\uD800[\\uDF30-\\uDF4A]'\n    },\n    {\n        'name': 'Grantha',\n        'astral': '\\uD804[\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]'\n    },\n    {\n        'name': 'Greek',\n        'bmp': '\\u0370-\\u0373\\u0375-\\u0377\\u037A-\\u037D\\u037F\\u0384\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03E1\\u03F0-\\u03FF\\u1D26-\\u1D2A\\u1D5D-\\u1D61\\u1D66-\\u1D6A\\u1DBF\\u1F00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u2126\\uAB65',\n        'astral': '\\uD800[\\uDD40-\\uDD8E\\uDDA0]|\\uD834[\\uDE00-\\uDE45]'\n    },\n    {\n        'name': 'Gujarati',\n        'bmp': '\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9-\\u0AFF'\n    },\n    {\n        'name': 'Gunjala_Gondi',\n        'astral': '\\uD807[\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD8E\\uDD90\\uDD91\\uDD93-\\uDD98\\uDDA0-\\uDDA9]'\n    },\n    {\n        'name': 'Gurmukhi',\n        'bmp': '\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A76'\n    },\n    {\n        'name': 'Han',\n        'bmp': '\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FEF\\uF900-\\uFA6D\\uFA70-\\uFAD9',\n        'astral': '[\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]'\n    },\n    {\n        'name': 'Hangul',\n        'bmp': '\\u1100-\\u11FF\\u302E\\u302F\\u3131-\\u318E\\u3200-\\u321E\\u3260-\\u327E\\uA960-\\uA97C\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\n    },\n    {\n        'name': 'Hanifi_Rohingya',\n        'astral': '\\uD803[\\uDD00-\\uDD27\\uDD30-\\uDD39]'\n    },\n    {\n        'name': 'Hanunoo',\n        'bmp': '\\u1720-\\u1734'\n    },\n    {\n        'name': 'Hatran',\n        'astral': '\\uD802[\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDCFF]'\n    },\n    {\n        'name': 'Hebrew',\n        'bmp': '\\u0591-\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F4\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFB4F'\n    },\n    {\n        'name': 'Hiragana',\n        'bmp': '\\u3041-\\u3096\\u309D-\\u309F',\n        'astral': '\\uD82C[\\uDC01-\\uDD1E]|\\uD83C\\uDE00'\n    },\n    {\n        'name': 'Imperial_Aramaic',\n        'astral': '\\uD802[\\uDC40-\\uDC55\\uDC57-\\uDC5F]'\n    },\n    {\n        'name': 'Inherited',\n        'bmp': '\\u0300-\\u036F\\u0485\\u0486\\u064B-\\u0655\\u0670\\u0951\\u0952\\u1AB0-\\u1ABE\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u200C\\u200D\\u20D0-\\u20F0\\u302A-\\u302D\\u3099\\u309A\\uFE00-\\uFE0F\\uFE20-\\uFE2D',\n        'astral': '\\uD800[\\uDDFD\\uDEE0]|\\uD804\\uDF3B|\\uD834[\\uDD67-\\uDD69\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD]|\\uDB40[\\uDD00-\\uDDEF]'\n    },\n    {\n        'name': 'Inscriptional_Pahlavi',\n        'astral': '\\uD802[\\uDF60-\\uDF72\\uDF78-\\uDF7F]'\n    },\n    {\n        'name': 'Inscriptional_Parthian',\n        'astral': '\\uD802[\\uDF40-\\uDF55\\uDF58-\\uDF5F]'\n    },\n    {\n        'name': 'Javanese',\n        'bmp': '\\uA980-\\uA9CD\\uA9D0-\\uA9D9\\uA9DE\\uA9DF'\n    },\n    {\n        'name': 'Kaithi',\n        'astral': '\\uD804[\\uDC80-\\uDCC1\\uDCCD]'\n    },\n    {\n        'name': 'Kannada',\n        'bmp': '\\u0C80-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2'\n    },\n    {\n        'name': 'Katakana',\n        'bmp': '\\u30A1-\\u30FA\\u30FD-\\u30FF\\u31F0-\\u31FF\\u32D0-\\u32FE\\u3300-\\u3357\\uFF66-\\uFF6F\\uFF71-\\uFF9D',\n        'astral': '\\uD82C\\uDC00'\n    },\n    {\n        'name': 'Kayah_Li',\n        'bmp': '\\uA900-\\uA92D\\uA92F'\n    },\n    {\n        'name': 'Kharoshthi',\n        'astral': '\\uD802[\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE38-\\uDE3A\\uDE3F-\\uDE48\\uDE50-\\uDE58]'\n    },\n    {\n        'name': 'Khmer',\n        'bmp': '\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u19E0-\\u19FF'\n    },\n    {\n        'name': 'Khojki',\n        'astral': '\\uD804[\\uDE00-\\uDE11\\uDE13-\\uDE3E]'\n    },\n    {\n        'name': 'Khudawadi',\n        'astral': '\\uD804[\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9]'\n    },\n    {\n        'name': 'Lao',\n        'bmp': '\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF'\n    },\n    {\n        'name': 'Latin',\n        'bmp': 'A-Za-z\\xAA\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02E0-\\u02E4\\u1D00-\\u1D25\\u1D2C-\\u1D5C\\u1D62-\\u1D65\\u1D6B-\\u1D77\\u1D79-\\u1DBE\\u1E00-\\u1EFF\\u2071\\u207F\\u2090-\\u209C\\u212A\\u212B\\u2132\\u214E\\u2160-\\u2188\\u2C60-\\u2C7F\\uA722-\\uA787\\uA78B-\\uA7B9\\uA7F7-\\uA7FF\\uAB30-\\uAB5A\\uAB5C-\\uAB64\\uFB00-\\uFB06\\uFF21-\\uFF3A\\uFF41-\\uFF5A'\n    },\n    {\n        'name': 'Lepcha',\n        'bmp': '\\u1C00-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C4F'\n    },\n    {\n        'name': 'Limbu',\n        'bmp': '\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u194F'\n    },\n    {\n        'name': 'Linear_A',\n        'astral': '\\uD801[\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]'\n    },\n    {\n        'name': 'Linear_B',\n        'astral': '\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA]'\n    },\n    {\n        'name': 'Lisu',\n        'bmp': '\\uA4D0-\\uA4FF'\n    },\n    {\n        'name': 'Lycian',\n        'astral': '\\uD800[\\uDE80-\\uDE9C]'\n    },\n    {\n        'name': 'Lydian',\n        'astral': '\\uD802[\\uDD20-\\uDD39\\uDD3F]'\n    },\n    {\n        'name': 'Mahajani',\n        'astral': '\\uD804[\\uDD50-\\uDD76]'\n    },\n    {\n        'name': 'Makasar',\n        'astral': '\\uD807[\\uDEE0-\\uDEF8]'\n    },\n    {\n        'name': 'Malayalam',\n        'bmp': '\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F'\n    },\n    {\n        'name': 'Mandaic',\n        'bmp': '\\u0840-\\u085B\\u085E'\n    },\n    {\n        'name': 'Manichaean',\n        'astral': '\\uD802[\\uDEC0-\\uDEE6\\uDEEB-\\uDEF6]'\n    },\n    {\n        'name': 'Marchen',\n        'astral': '\\uD807[\\uDC70-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6]'\n    },\n    {\n        'name': 'Masaram_Gondi',\n        'astral': '\\uD807[\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]'\n    },\n    {\n        'name': 'Medefaidrin',\n        'astral': '\\uD81B[\\uDE40-\\uDE9A]'\n    },\n    {\n        'name': 'Meetei_Mayek',\n        'bmp': '\\uAAE0-\\uAAF6\\uABC0-\\uABED\\uABF0-\\uABF9'\n    },\n    {\n        'name': 'Mende_Kikakui',\n        'astral': '\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]'\n    },\n    {\n        'name': 'Meroitic_Cursive',\n        'astral': '\\uD802[\\uDDA0-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDDFF]'\n    },\n    {\n        'name': 'Meroitic_Hieroglyphs',\n        'astral': '\\uD802[\\uDD80-\\uDD9F]'\n    },\n    {\n        'name': 'Miao',\n        'astral': '\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]'\n    },\n    {\n        'name': 'Modi',\n        'astral': '\\uD805[\\uDE00-\\uDE44\\uDE50-\\uDE59]'\n    },\n    {\n        'name': 'Mongolian',\n        'bmp': '\\u1800\\u1801\\u1804\\u1806-\\u180E\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18AA',\n        'astral': '\\uD805[\\uDE60-\\uDE6C]'\n    },\n    {\n        'name': 'Mro',\n        'astral': '\\uD81A[\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE6E\\uDE6F]'\n    },\n    {\n        'name': 'Multani',\n        'astral': '\\uD804[\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA9]'\n    },\n    {\n        'name': 'Myanmar',\n        'bmp': '\\u1000-\\u109F\\uA9E0-\\uA9FE\\uAA60-\\uAA7F'\n    },\n    {\n        'name': 'Nabataean',\n        'astral': '\\uD802[\\uDC80-\\uDC9E\\uDCA7-\\uDCAF]'\n    },\n    {\n        'name': 'New_Tai_Lue',\n        'bmp': '\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE\\u19DF'\n    },\n    {\n        'name': 'Newa',\n        'astral': '\\uD805[\\uDC00-\\uDC59\\uDC5B\\uDC5D\\uDC5E]'\n    },\n    {\n        'name': 'Nko',\n        'bmp': '\\u07C0-\\u07FA\\u07FD-\\u07FF'\n    },\n    {\n        'name': 'Nushu',\n        'astral': '\\uD81B\\uDFE1|\\uD82C[\\uDD70-\\uDEFB]'\n    },\n    {\n        'name': 'Ogham',\n        'bmp': '\\u1680-\\u169C'\n    },\n    {\n        'name': 'Ol_Chiki',\n        'bmp': '\\u1C50-\\u1C7F'\n    },\n    {\n        'name': 'Old_Hungarian',\n        'astral': '\\uD803[\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF]'\n    },\n    {\n        'name': 'Old_Italic',\n        'astral': '\\uD800[\\uDF00-\\uDF23\\uDF2D-\\uDF2F]'\n    },\n    {\n        'name': 'Old_North_Arabian',\n        'astral': '\\uD802[\\uDE80-\\uDE9F]'\n    },\n    {\n        'name': 'Old_Permic',\n        'astral': '\\uD800[\\uDF50-\\uDF7A]'\n    },\n    {\n        'name': 'Old_Persian',\n        'astral': '\\uD800[\\uDFA0-\\uDFC3\\uDFC8-\\uDFD5]'\n    },\n    {\n        'name': 'Old_Sogdian',\n        'astral': '\\uD803[\\uDF00-\\uDF27]'\n    },\n    {\n        'name': 'Old_South_Arabian',\n        'astral': '\\uD802[\\uDE60-\\uDE7F]'\n    },\n    {\n        'name': 'Old_Turkic',\n        'astral': '\\uD803[\\uDC00-\\uDC48]'\n    },\n    {\n        'name': 'Oriya',\n        'bmp': '\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77'\n    },\n    {\n        'name': 'Osage',\n        'astral': '\\uD801[\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB]'\n    },\n    {\n        'name': 'Osmanya',\n        'astral': '\\uD801[\\uDC80-\\uDC9D\\uDCA0-\\uDCA9]'\n    },\n    {\n        'name': 'Pahawh_Hmong',\n        'astral': '\\uD81A[\\uDF00-\\uDF45\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]'\n    },\n    {\n        'name': 'Palmyrene',\n        'astral': '\\uD802[\\uDC60-\\uDC7F]'\n    },\n    {\n        'name': 'Pau_Cin_Hau',\n        'astral': '\\uD806[\\uDEC0-\\uDEF8]'\n    },\n    {\n        'name': 'Phags_Pa',\n        'bmp': '\\uA840-\\uA877'\n    },\n    {\n        'name': 'Phoenician',\n        'astral': '\\uD802[\\uDD00-\\uDD1B\\uDD1F]'\n    },\n    {\n        'name': 'Psalter_Pahlavi',\n        'astral': '\\uD802[\\uDF80-\\uDF91\\uDF99-\\uDF9C\\uDFA9-\\uDFAF]'\n    },\n    {\n        'name': 'Rejang',\n        'bmp': '\\uA930-\\uA953\\uA95F'\n    },\n    {\n        'name': 'Runic',\n        'bmp': '\\u16A0-\\u16EA\\u16EE-\\u16F8'\n    },\n    {\n        'name': 'Samaritan',\n        'bmp': '\\u0800-\\u082D\\u0830-\\u083E'\n    },\n    {\n        'name': 'Saurashtra',\n        'bmp': '\\uA880-\\uA8C5\\uA8CE-\\uA8D9'\n    },\n    {\n        'name': 'Sharada',\n        'astral': '\\uD804[\\uDD80-\\uDDCD\\uDDD0-\\uDDDF]'\n    },\n    {\n        'name': 'Shavian',\n        'astral': '\\uD801[\\uDC50-\\uDC7F]'\n    },\n    {\n        'name': 'Siddham',\n        'astral': '\\uD805[\\uDD80-\\uDDB5\\uDDB8-\\uDDDD]'\n    },\n    {\n        'name': 'SignWriting',\n        'astral': '\\uD836[\\uDC00-\\uDE8B\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]'\n    },\n    {\n        'name': 'Sinhala',\n        'bmp': '\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4',\n        'astral': '\\uD804[\\uDDE1-\\uDDF4]'\n    },\n    {\n        'name': 'Sogdian',\n        'astral': '\\uD803[\\uDF30-\\uDF59]'\n    },\n    {\n        'name': 'Sora_Sompeng',\n        'astral': '\\uD804[\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9]'\n    },\n    {\n        'name': 'Soyombo',\n        'astral': '\\uD806[\\uDE50-\\uDE83\\uDE86-\\uDEA2]'\n    },\n    {\n        'name': 'Sundanese',\n        'bmp': '\\u1B80-\\u1BBF\\u1CC0-\\u1CC7'\n    },\n    {\n        'name': 'Syloti_Nagri',\n        'bmp': '\\uA800-\\uA82B'\n    },\n    {\n        'name': 'Syriac',\n        'bmp': '\\u0700-\\u070D\\u070F-\\u074A\\u074D-\\u074F\\u0860-\\u086A'\n    },\n    {\n        'name': 'Tagalog',\n        'bmp': '\\u1700-\\u170C\\u170E-\\u1714'\n    },\n    {\n        'name': 'Tagbanwa',\n        'bmp': '\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773'\n    },\n    {\n        'name': 'Tai_Le',\n        'bmp': '\\u1950-\\u196D\\u1970-\\u1974'\n    },\n    {\n        'name': 'Tai_Tham',\n        'bmp': '\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD'\n    },\n    {\n        'name': 'Tai_Viet',\n        'bmp': '\\uAA80-\\uAAC2\\uAADB-\\uAADF'\n    },\n    {\n        'name': 'Takri',\n        'astral': '\\uD805[\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]'\n    },\n    {\n        'name': 'Tamil',\n        'bmp': '\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA'\n    },\n    {\n        'name': 'Tangut',\n        'astral': '\\uD81B\\uDFE0|[\\uD81C-\\uD820][\\uDC00-\\uDFFF]|\\uD821[\\uDC00-\\uDFF1]|\\uD822[\\uDC00-\\uDEF2]'\n    },\n    {\n        'name': 'Telugu',\n        'bmp': '\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7F'\n    },\n    {\n        'name': 'Thaana',\n        'bmp': '\\u0780-\\u07B1'\n    },\n    {\n        'name': 'Thai',\n        'bmp': '\\u0E01-\\u0E3A\\u0E40-\\u0E5B'\n    },\n    {\n        'name': 'Tibetan',\n        'bmp': '\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FD4\\u0FD9\\u0FDA'\n    },\n    {\n        'name': 'Tifinagh',\n        'bmp': '\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F'\n    },\n    {\n        'name': 'Tirhuta',\n        'astral': '\\uD805[\\uDC80-\\uDCC7\\uDCD0-\\uDCD9]'\n    },\n    {\n        'name': 'Ugaritic',\n        'astral': '\\uD800[\\uDF80-\\uDF9D\\uDF9F]'\n    },\n    {\n        'name': 'Vai',\n        'bmp': '\\uA500-\\uA62B'\n    },\n    {\n        'name': 'Warang_Citi',\n        'astral': '\\uD806[\\uDCA0-\\uDCF2\\uDCFF]'\n    },\n    {\n        'name': 'Yi',\n        'bmp': '\\uA000-\\uA48C\\uA490-\\uA4C6'\n    },\n    {\n        'name': 'Zanabazar_Square',\n        'astral': '\\uD806[\\uDE00-\\uDE47]'\n    }\n];\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _scripts = _interopRequireDefault(require(\"../../tools/output/scripts\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*!\n * XRegExp Unicode Scripts 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2010-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds support for all Unicode scripts. E.g., `\\p{Latin}`. Token names are case insensitive,\n   * and any spaces, hyphens, and underscores are ignored.\n   *\n   * Uses Unicode 11.0.0.\n   *\n   * @requires XRegExp, Unicode Base\n   */\n  if (!XRegExp.addUnicodeData) {\n    throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');\n  }\n\n  XRegExp.addUnicodeData(_scripts.default);\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _xregexp = _interopRequireDefault(require(\"./xregexp\"));\n\nvar _build = _interopRequireDefault(require(\"./addons/build\"));\n\nvar _matchrecursive = _interopRequireDefault(require(\"./addons/matchrecursive\"));\n\nvar _unicodeBase = _interopRequireDefault(require(\"./addons/unicode-base\"));\n\nvar _unicodeBlocks = _interopRequireDefault(require(\"./addons/unicode-blocks\"));\n\nvar _unicodeCategories = _interopRequireDefault(require(\"./addons/unicode-categories\"));\n\nvar _unicodeProperties = _interopRequireDefault(require(\"./addons/unicode-properties\"));\n\nvar _unicodeScripts = _interopRequireDefault(require(\"./addons/unicode-scripts\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _build.default)(_xregexp.default);\n(0, _matchrecursive.default)(_xregexp.default);\n(0, _unicodeBase.default)(_xregexp.default);\n(0, _unicodeBlocks.default)(_xregexp.default);\n(0, _unicodeCategories.default)(_xregexp.default);\n(0, _unicodeProperties.default)(_xregexp.default);\n(0, _unicodeScripts.default)(_xregexp.default);\nvar _default = _xregexp.default;\nexports.default = _default;\nmodule.exports = exports[\"default\"];","import * as XRegExp from \"xregexp\";\n\nexport class FormatUtility {\n    static preProcess(query: string, toLower: boolean = true): string {\n        if (toLower) {\n            query = query.toLowerCase()\n        }\n\n        return query\n            .replace(/０/g, \"0\")\n            .replace(/１/g, \"1\")\n            .replace(/２/g, \"2\")\n            .replace(/３/g, \"3\")\n            .replace(/４/g, \"4\")\n            .replace(/５/g, \"5\")\n            .replace(/６/g, \"6\")\n            .replace(/７/g, \"7\")\n            .replace(/８/g, \"8\")\n            .replace(/９/g, \"9\")\n            .replace(/：/g, \":\")\n            .replace(/－/g, \"-\")\n            .replace(/，/g, \",\")\n            .replace(/／/g, \"/\")\n            .replace(/Ｇ/g, \"G\")\n            .replace(/Ｍ/g, \"M\")\n            .replace(/Ｔ/g, \"T\")\n            .replace(/Ｋ/g, \"K\")\n            .replace(/ｋ/g, \"k\")\n            .replace(/．/g, \".\")\n            .replace(/（/g, \"(\")\n            .replace(/）/g, \")\")\n    }\n}\n\nexport class Match {\n    constructor(index: number, length: number, value: string, groups) {\n        this.index = index;\n        this.length = length;\n        this.value = value;\n        this.innerGroups = groups;\n    }\n\n    index: number;\n    length: number;\n    value: string;\n    private innerGroups: { [id: string]: { value: string, index: number, length: number, captures: string[] } };\n\n    groups(key: string): { value: string, index: number, length: number, captures: string[] } {\n        return this.innerGroups[key] ? this.innerGroups[key] : { value: '', index: 0, length: 0, captures: [] };\n    }\n}\n\nexport class RegExpUtility {\n    static getMatches(regex: RegExp, source: string): Array<Match> {\n        if (!regex) return [];\n        let rawRegex: string = (regex as any).xregexp.source;\n        if (!rawRegex.includes('(?<nlb__')) {\n            return this.getMatchesSimple(regex, source);\n        }\n        let realMatches = new Array<Match>();\n\n        let negativeLookbehindRegexes = new Array<RegExp>();\n\n        let flags = regex.flags;\n\n        let closePos = 0;\n        let startPos = rawRegex.indexOf('(?<nlb__', 0);\n        while (startPos >= 0) {\n            closePos = this.getClosePos(rawRegex, startPos);\n            let nlbRegex = XRegExp(rawRegex.substring(startPos, closePos + 1), flags);\n            let nextRegex = RegExpUtility.getNextRegex(rawRegex, startPos);\n            (nlbRegex as any).nextRegex = nextRegex ? XRegExp(nextRegex, flags) : null;\n            negativeLookbehindRegexes.push(nlbRegex);\n            rawRegex = rawRegex.substr(0, startPos) + rawRegex.substr(closePos + 1);\n            startPos = rawRegex.indexOf('(?<nlb__', 0);\n        }\n\n        let tempRegex = XRegExp(rawRegex, flags);\n        let tempMatches = RegExpUtility.getMatchesSimple(tempRegex, source);\n        tempMatches.forEach(match => {\n            let clean = true;\n            negativeLookbehindRegexes.forEach(regex => {\n                let negativeLookbehindMatches = RegExpUtility.getMatchesSimple(regex, source);\n                negativeLookbehindMatches.forEach(negativeLookbehindMatch => {\n                    let negativeLookbehindEnd = negativeLookbehindMatch.index + negativeLookbehindMatch.length;\n                    let nextRegex = (regex as any).nextRegex;\n                    if (match.index === negativeLookbehindEnd) {\n                        if (!nextRegex) {\n                            clean = false;\n                            return;\n                        } else {\n                            let nextMatch = RegExpUtility.getFirstMatchIndex(nextRegex, source.substring(negativeLookbehindMatch.index));\n                            if (nextMatch.matched && ((nextMatch.index === negativeLookbehindMatch.length) || (source.includes(nextMatch.value + match.value)))) {\n                                clean = false;\n                                return;\n                            }\n                        }\n                    }\n                    if (negativeLookbehindMatch.value.includes(match.value)) {\n                        let preMatches = RegExpUtility.getMatchesSimple(regex, source.substring(0, match.index));\n                        preMatches.forEach(preMatch => {\n                            if (source.includes(preMatch.value + match.value)) {\n                                clean = false;\n                                return;\n                            }\n                        });\n                    }\n                });\n                if (!clean) {\n                    return;\n                }\n            });\n            if (clean) {\n                realMatches.push(match);\n            }\n        });\n\n        return realMatches;\n    }\n\n    static getMatchesSimple(regex: RegExp, source: string): Array<Match> {\n\n        // Word boundary (\\b) in JS is not unicode-aware, so words starting/ending with accentuated characters will not match\n        // use a normalized string to match, the return matches' values using the original one\n        // http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode\n        // https://stackoverflow.com/questions/2881445/utf-8-word-boundary-regex-in-javascript\n        let normalized = StringUtility.removeDiacriticsFromWordBoundaries(source);\n\n        let matches = new Array<Match>();\n        XRegExp.forEach(normalized, regex, match => {\n            let positiveLookbehinds = [];\n            let groups: { [id: string]: { value: string, index: number, length: number, captures: string[] } } = {};\n            let lastGroup = '';\n\n            Object.keys(match).forEach(key => {\n                if (!key.includes('__')) return;\n                if (key.startsWith('plb') && match[key]) {\n                    if (match[0].indexOf(match[key]) !== 0 && !StringUtility.isNullOrEmpty(lastGroup)) {\n                        let index = match.index + match[0].indexOf(match[key]);\n                        let length = match[key].length;\n                        let value = source.substr(index, length);\n\n                        groups[lastGroup].value = groups[lastGroup].value + value;\n                    }\n                    positiveLookbehinds.push({ key: key, value: match[key] });\n                    return;\n                }\n                if (key.startsWith('nlb')) {\n                    return;\n                }\n\n                let groupKey = key.substr(0, key.lastIndexOf('__'));\n                lastGroup = groupKey;\n\n                if (!groups[groupKey]) groups[groupKey] = { value: '', index: 0, length: 0, captures: [] };\n\n                if (match[key]) {\n                    let index = match.index + match[0].indexOf(match[key]);\n                    let length = match[key].length;\n                    let value = source.substr(index, length);\n                    groups[groupKey].index = index;\n                    groups[groupKey].length = length;\n                    groups[groupKey].value = value;\n                    groups[groupKey].captures.push(value);\n                }\n            });\n\n            let value = match[0];\n            let index = match.index;\n            let length = value.length;\n\n            if (positiveLookbehinds && positiveLookbehinds.length > 0 && value.indexOf(positiveLookbehinds[0].value) === 0) {\n                value = source.substr(index, length).substr(positiveLookbehinds[0].value.length)\n                index += positiveLookbehinds[0].value.length\n                length -= positiveLookbehinds[0].value.length\n            } else {\n                value = source.substr(index, length);\n            }\n\n            matches.push(new Match(index, length, value, groups));\n        });\n\n        return matches;\n    }\n\n    static getSafeRegExp(source: string, flags?: string): RegExp {\n        let sanitizedSource = this.sanitizeGroups(source);\n        return XRegExp(sanitizedSource, flags || 'gis');\n    }\n\n    static getFirstMatchIndex(regex: RegExp, source: string): { matched: boolean; index: number; value: string; } {\n        let matches = RegExpUtility.getMatches(regex, source);\n        if (matches.length) {\n            return {\n                matched: true,\n                index: matches[0].index,\n                value: matches[0].value\n            };\n        }\n\n        return { matched: false, index: -1, value: null };\n    }\n\n    static split(regex: RegExp, source: string): string[] {\n        return XRegExp.split(source, regex);\n    }\n\n    static isMatch(regex: RegExp, source: string): boolean {\n        return !StringUtility.isNullOrEmpty(source)\n            && this.getMatches(regex, source).length > 0;\n    }\n\n    private static matchGroup = XRegExp(String.raw`\\?<(?<name>\\w+)>`, 'gis');\n    private static matchPositiveLookbehind = XRegExp(String.raw`\\(\\?<=`, 'gis');\n    private static matchNegativeLookbehind = XRegExp(String.raw`\\(\\?<!`, 'gis');\n\n    private static sanitizeGroups(source: string): string {\n        let index = 0;\n        let result = XRegExp.replace(source, this.matchGroup, (match, name) => match.replace(name, `${name}__${index++}`));\n        index = 0;\n        result = XRegExp.replace(result, this.matchPositiveLookbehind, () => `(?<plb__${index++}>`);\n        index = 0;\n        result = XRegExp.replace(result, this.matchNegativeLookbehind, () => `(?<nlb__${index++}>`);\n        return result;\n    }\n\n    private static getNextRegex(source: string, startPos: number) {\n        startPos = RegExpUtility.getClosePos(source, startPos) + 1;\n        let closePos = RegExpUtility.getClosePos(source, startPos);\n        if (source[startPos] !== '(') {\n            closePos--;\n        }\n\n        let next = (startPos === closePos)\n            ? null\n            : source.substring(startPos, closePos + 1);\n\n        return next;\n    }\n\n    private static getClosePos(source: string, startPos: number): number {\n        let counter = 1;\n        let closePos = startPos;\n        while (counter > 0 && closePos < source.length) {\n            let c = source[++closePos];\n            if (c === '(') counter++;\n            else if (c === ')') counter--;\n        }\n        return closePos;\n    }\n}\n\n\n\nexport class StringUtility {\n    static isNullOrWhitespace(input: string): boolean {\n        return !input || !input.trim();\n    }\n\n    static isNullOrEmpty(input: string): boolean {\n        return !input || input === '';\n    }\n\n    static isWhitespace(input: string): boolean {\n        return input && input !== '' && !input.trim();\n    }\n\n    static insertInto(input: string, value: string, index: number): string {\n        return input.substr(0, index) + value + input.substr(index);\n    }\n\n    static removeDiacriticsFromWordBoundaries(input: string) {\n        return input\n            .split(' ')\n            .map((s) => {\n                let length = s.length;\n                if (length === 0) return s;\n                let first =  StringUtility.removeDiacritics(s.substring(0, 1));\n                if(length === 1) return first;\n                let last = length > 1 ? StringUtility.removeDiacritics(s.substring(length - 1)) : '';\n                let mid = s.substring(1, length - 1);\n                // console.log(first + mid + last)\n                return first + mid + last;\n            })\n            .join(' ');\n    }\n\n    static removeDiacritics(c: string): string {\n        let clean = StringUtility.diacriticsRemovalMap[c];\n        return !clean ? c : clean;\n    }\n\n    private static readonly diacriticsRemovalMap = {\n        \"Ⓐ\": \"A\",\n        \"Ａ\": \"A\",\n        \"À\": \"A\",\n        \"Á\": \"A\",\n        \"Â\": \"A\",\n        \"Ầ\": \"A\",\n        \"Ấ\": \"A\",\n        \"Ẫ\": \"A\",\n        \"Ẩ\": \"A\",\n        \"Ã\": \"A\",\n        \"Ā\": \"A\",\n        \"Ă\": \"A\",\n        \"Ằ\": \"A\",\n        \"Ắ\": \"A\",\n        \"Ẵ\": \"A\",\n        \"Ẳ\": \"A\",\n        \"Ȧ\": \"A\",\n        \"Ǡ\": \"A\",\n        \"Ä\": \"A\",\n        \"Ǟ\": \"A\",\n        \"Ả\": \"A\",\n        \"Å\": \"A\",\n        \"Ǻ\": \"A\",\n        \"Ǎ\": \"A\",\n        \"Ȁ\": \"A\",\n        \"Ȃ\": \"A\",\n        \"Ạ\": \"A\",\n        \"Ậ\": \"A\",\n        \"Ặ\": \"A\",\n        \"Ḁ\": \"A\",\n        \"Ą\": \"A\",\n        \"Ⱥ\": \"A\",\n        \"Ɐ\": \"A\",\n        \"Ⓑ\": \"B\",\n        \"Ｂ\": \"B\",\n        \"Ḃ\": \"B\",\n        \"Ḅ\": \"B\",\n        \"Ḇ\": \"B\",\n        \"Ƀ\": \"B\",\n        \"Ƃ\": \"B\",\n        \"Ɓ\": \"B\",\n        \"Ⓒ\": \"C\",\n        \"Ｃ\": \"C\",\n        \"Ć\": \"C\",\n        \"Ĉ\": \"C\",\n        \"Ċ\": \"C\",\n        \"Č\": \"C\",\n        \"Ç\": \"C\",\n        \"Ḉ\": \"C\",\n        \"Ƈ\": \"C\",\n        \"Ȼ\": \"C\",\n        \"Ꜿ\": \"C\",\n        \"Ⓓ\": \"D\",\n        \"Ｄ\": \"D\",\n        \"Ḋ\": \"D\",\n        \"Ď\": \"D\",\n        \"Ḍ\": \"D\",\n        \"Ḑ\": \"D\",\n        \"Ḓ\": \"D\",\n        \"Ḏ\": \"D\",\n        \"Đ\": \"D\",\n        \"Ƌ\": \"D\",\n        \"Ɗ\": \"D\",\n        \"Ɖ\": \"D\",\n        \"Ꝺ\": \"D\",\n        \"Ⓔ\": \"E\",\n        \"Ｅ\": \"E\",\n        \"È\": \"E\",\n        \"É\": \"E\",\n        \"Ê\": \"E\",\n        \"Ề\": \"E\",\n        \"Ế\": \"E\",\n        \"Ễ\": \"E\",\n        \"Ể\": \"E\",\n        \"Ẽ\": \"E\",\n        \"Ē\": \"E\",\n        \"Ḕ\": \"E\",\n        \"Ḗ\": \"E\",\n        \"Ĕ\": \"E\",\n        \"Ė\": \"E\",\n        \"Ë\": \"E\",\n        \"Ẻ\": \"E\",\n        \"Ě\": \"E\",\n        \"Ȅ\": \"E\",\n        \"Ȇ\": \"E\",\n        \"Ẹ\": \"E\",\n        \"Ệ\": \"E\",\n        \"Ȩ\": \"E\",\n        \"Ḝ\": \"E\",\n        \"Ę\": \"E\",\n        \"Ḙ\": \"E\",\n        \"Ḛ\": \"E\",\n        \"Ɛ\": \"E\",\n        \"Ǝ\": \"E\",\n        \"Ⓕ\": \"F\",\n        \"Ｆ\": \"F\",\n        \"Ḟ\": \"F\",\n        \"Ƒ\": \"F\",\n        \"Ꝼ\": \"F\",\n        \"Ⓖ\": \"G\",\n        \"Ｇ\": \"G\",\n        \"Ǵ\": \"G\",\n        \"Ĝ\": \"G\",\n        \"Ḡ\": \"G\",\n        \"Ğ\": \"G\",\n        \"Ġ\": \"G\",\n        \"Ǧ\": \"G\",\n        \"Ģ\": \"G\",\n        \"Ǥ\": \"G\",\n        \"Ɠ\": \"G\",\n        \"Ꞡ\": \"G\",\n        \"Ᵹ\": \"G\",\n        \"Ꝿ\": \"G\",\n        \"Ⓗ\": \"H\",\n        \"Ｈ\": \"H\",\n        \"Ĥ\": \"H\",\n        \"Ḣ\": \"H\",\n        \"Ḧ\": \"H\",\n        \"Ȟ\": \"H\",\n        \"Ḥ\": \"H\",\n        \"Ḩ\": \"H\",\n        \"Ḫ\": \"H\",\n        \"Ħ\": \"H\",\n        \"Ⱨ\": \"H\",\n        \"Ⱶ\": \"H\",\n        \"Ɥ\": \"H\",\n        \"Ⓘ\": \"I\",\n        \"Ｉ\": \"I\",\n        \"Ì\": \"I\",\n        \"Í\": \"I\",\n        \"Î\": \"I\",\n        \"Ĩ\": \"I\",\n        \"Ī\": \"I\",\n        \"Ĭ\": \"I\",\n        \"İ\": \"I\",\n        \"Ï\": \"I\",\n        \"Ḯ\": \"I\",\n        \"Ỉ\": \"I\",\n        \"Ǐ\": \"I\",\n        \"Ȉ\": \"I\",\n        \"Ȋ\": \"I\",\n        \"Ị\": \"I\",\n        \"Į\": \"I\",\n        \"Ḭ\": \"I\",\n        \"Ɨ\": \"I\",\n        \"Ⓙ\": \"J\",\n        \"Ｊ\": \"J\",\n        \"Ĵ\": \"J\",\n        \"Ɉ\": \"J\",\n        \"Ⓚ\": \"K\",\n        \"Ｋ\": \"K\",\n        \"Ḱ\": \"K\",\n        \"Ǩ\": \"K\",\n        \"Ḳ\": \"K\",\n        \"Ķ\": \"K\",\n        \"Ḵ\": \"K\",\n        \"Ƙ\": \"K\",\n        \"Ⱪ\": \"K\",\n        \"Ꝁ\": \"K\",\n        \"Ꝃ\": \"K\",\n        \"Ꝅ\": \"K\",\n        \"Ꞣ\": \"K\",\n        \"Ⓛ\": \"L\",\n        \"Ｌ\": \"L\",\n        \"Ŀ\": \"L\",\n        \"Ĺ\": \"L\",\n        \"Ľ\": \"L\",\n        \"Ḷ\": \"L\",\n        \"Ḹ\": \"L\",\n        \"Ļ\": \"L\",\n        \"Ḽ\": \"L\",\n        \"Ḻ\": \"L\",\n        \"Ł\": \"L\",\n        \"Ƚ\": \"L\",\n        \"Ɫ\": \"L\",\n        \"Ⱡ\": \"L\",\n        \"Ꝉ\": \"L\",\n        \"Ꝇ\": \"L\",\n        \"Ꞁ\": \"L\",\n        \"Ⓜ\": \"M\",\n        \"Ｍ\": \"M\",\n        \"Ḿ\": \"M\",\n        \"Ṁ\": \"M\",\n        \"Ṃ\": \"M\",\n        \"Ɱ\": \"M\",\n        \"Ɯ\": \"M\",\n        \"Ⓝ\": \"N\",\n        \"Ｎ\": \"N\",\n        \"Ǹ\": \"N\",\n        \"Ń\": \"N\",\n        \"Ñ\": \"N\",\n        \"Ṅ\": \"N\",\n        \"Ň\": \"N\",\n        \"Ṇ\": \"N\",\n        \"Ņ\": \"N\",\n        \"Ṋ\": \"N\",\n        \"Ṉ\": \"N\",\n        \"Ƞ\": \"N\",\n        \"Ɲ\": \"N\",\n        \"Ꞑ\": \"N\",\n        \"Ꞥ\": \"N\",\n        \"Ⓞ\": \"O\",\n        \"Ｏ\": \"O\",\n        \"Ò\": \"O\",\n        \"Ó\": \"O\",\n        \"Ô\": \"O\",\n        \"Ồ\": \"O\",\n        \"Ố\": \"O\",\n        \"Ỗ\": \"O\",\n        \"Ổ\": \"O\",\n        \"Õ\": \"O\",\n        \"Ṍ\": \"O\",\n        \"Ȭ\": \"O\",\n        \"Ṏ\": \"O\",\n        \"Ō\": \"O\",\n        \"Ṑ\": \"O\",\n        \"Ṓ\": \"O\",\n        \"Ŏ\": \"O\",\n        \"Ȯ\": \"O\",\n        \"Ȱ\": \"O\",\n        \"Ö\": \"O\",\n        \"Ȫ\": \"O\",\n        \"Ỏ\": \"O\",\n        \"Ő\": \"O\",\n        \"Ǒ\": \"O\",\n        \"Ȍ\": \"O\",\n        \"Ȏ\": \"O\",\n        \"Ơ\": \"O\",\n        \"Ờ\": \"O\",\n        \"Ớ\": \"O\",\n        \"Ỡ\": \"O\",\n        \"Ở\": \"O\",\n        \"Ợ\": \"O\",\n        \"Ọ\": \"O\",\n        \"Ộ\": \"O\",\n        \"Ǫ\": \"O\",\n        \"Ǭ\": \"O\",\n        \"Ø\": \"O\",\n        \"Ǿ\": \"O\",\n        \"Ɔ\": \"O\",\n        \"Ɵ\": \"O\",\n        \"Ꝋ\": \"O\",\n        \"Ꝍ\": \"O\",\n        \"Ⓟ\": \"P\",\n        \"Ｐ\": \"P\",\n        \"Ṕ\": \"P\",\n        \"Ṗ\": \"P\",\n        \"Ƥ\": \"P\",\n        \"Ᵽ\": \"P\",\n        \"Ꝑ\": \"P\",\n        \"Ꝓ\": \"P\",\n        \"Ꝕ\": \"P\",\n        \"Ⓠ\": \"Q\",\n        \"Ｑ\": \"Q\",\n        \"Ꝗ\": \"Q\",\n        \"Ꝙ\": \"Q\",\n        \"Ɋ\": \"Q\",\n        \"Ⓡ\": \"R\",\n        \"Ｒ\": \"R\",\n        \"Ŕ\": \"R\",\n        \"Ṙ\": \"R\",\n        \"Ř\": \"R\",\n        \"Ȑ\": \"R\",\n        \"Ȓ\": \"R\",\n        \"Ṛ\": \"R\",\n        \"Ṝ\": \"R\",\n        \"Ŗ\": \"R\",\n        \"Ṟ\": \"R\",\n        \"Ɍ\": \"R\",\n        \"Ɽ\": \"R\",\n        \"Ꝛ\": \"R\",\n        \"Ꞧ\": \"R\",\n        \"Ꞃ\": \"R\",\n        \"Ⓢ\": \"S\",\n        \"Ｓ\": \"S\",\n        \"ẞ\": \"S\",\n        \"Ś\": \"S\",\n        \"Ṥ\": \"S\",\n        \"Ŝ\": \"S\",\n        \"Ṡ\": \"S\",\n        \"Š\": \"S\",\n        \"Ṧ\": \"S\",\n        \"Ṣ\": \"S\",\n        \"Ṩ\": \"S\",\n        \"Ș\": \"S\",\n        \"Ş\": \"S\",\n        \"Ȿ\": \"S\",\n        \"Ꞩ\": \"S\",\n        \"Ꞅ\": \"S\",\n        \"Ⓣ\": \"T\",\n        \"Ｔ\": \"T\",\n        \"Ṫ\": \"T\",\n        \"Ť\": \"T\",\n        \"Ṭ\": \"T\",\n        \"Ț\": \"T\",\n        \"Ţ\": \"T\",\n        \"Ṱ\": \"T\",\n        \"Ṯ\": \"T\",\n        \"Ŧ\": \"T\",\n        \"Ƭ\": \"T\",\n        \"Ʈ\": \"T\",\n        \"Ⱦ\": \"T\",\n        \"Ꞇ\": \"T\",\n        \"Ⓤ\": \"U\",\n        \"Ｕ\": \"U\",\n        \"Ù\": \"U\",\n        \"Ú\": \"U\",\n        \"Û\": \"U\",\n        \"Ũ\": \"U\",\n        \"Ṹ\": \"U\",\n        \"Ū\": \"U\",\n        \"Ṻ\": \"U\",\n        \"Ŭ\": \"U\",\n        \"Ü\": \"U\",\n        \"Ǜ\": \"U\",\n        \"Ǘ\": \"U\",\n        \"Ǖ\": \"U\",\n        \"Ǚ\": \"U\",\n        \"Ủ\": \"U\",\n        \"Ů\": \"U\",\n        \"Ű\": \"U\",\n        \"Ǔ\": \"U\",\n        \"Ȕ\": \"U\",\n        \"Ȗ\": \"U\",\n        \"Ư\": \"U\",\n        \"Ừ\": \"U\",\n        \"Ứ\": \"U\",\n        \"Ữ\": \"U\",\n        \"Ử\": \"U\",\n        \"Ự\": \"U\",\n        \"Ụ\": \"U\",\n        \"Ṳ\": \"U\",\n        \"Ų\": \"U\",\n        \"Ṷ\": \"U\",\n        \"Ṵ\": \"U\",\n        \"Ʉ\": \"U\",\n        \"Ⓥ\": \"V\",\n        \"Ｖ\": \"V\",\n        \"Ṽ\": \"V\",\n        \"Ṿ\": \"V\",\n        \"Ʋ\": \"V\",\n        \"Ꝟ\": \"V\",\n        \"Ʌ\": \"V\",\n        \"Ⓦ\": \"W\",\n        \"Ｗ\": \"W\",\n        \"Ẁ\": \"W\",\n        \"Ẃ\": \"W\",\n        \"Ŵ\": \"W\",\n        \"Ẇ\": \"W\",\n        \"Ẅ\": \"W\",\n        \"Ẉ\": \"W\",\n        \"Ⱳ\": \"W\",\n        \"Ⓧ\": \"X\",\n        \"Ｘ\": \"X\",\n        \"Ẋ\": \"X\",\n        \"Ẍ\": \"X\",\n        \"Ⓨ\": \"Y\",\n        \"Ｙ\": \"Y\",\n        \"Ỳ\": \"Y\",\n        \"Ý\": \"Y\",\n        \"Ŷ\": \"Y\",\n        \"Ỹ\": \"Y\",\n        \"Ȳ\": \"Y\",\n        \"Ẏ\": \"Y\",\n        \"Ÿ\": \"Y\",\n        \"Ỷ\": \"Y\",\n        \"Ỵ\": \"Y\",\n        \"Ƴ\": \"Y\",\n        \"Ɏ\": \"Y\",\n        \"Ỿ\": \"Y\",\n        \"Ⓩ\": \"Z\",\n        \"Ｚ\": \"Z\",\n        \"Ź\": \"Z\",\n        \"Ẑ\": \"Z\",\n        \"Ż\": \"Z\",\n        \"Ž\": \"Z\",\n        \"Ẓ\": \"Z\",\n        \"Ẕ\": \"Z\",\n        \"Ƶ\": \"Z\",\n        \"Ȥ\": \"Z\",\n        \"Ɀ\": \"Z\",\n        \"Ⱬ\": \"Z\",\n        \"Ꝣ\": \"Z\",\n        \"ⓐ\": \"a\",\n        \"ａ\": \"a\",\n        \"ẚ\": \"a\",\n        \"à\": \"a\",\n        \"á\": \"a\",\n        \"â\": \"a\",\n        \"ầ\": \"a\",\n        \"ấ\": \"a\",\n        \"ẫ\": \"a\",\n        \"ẩ\": \"a\",\n        \"ã\": \"a\",\n        \"ā\": \"a\",\n        \"ă\": \"a\",\n        \"ằ\": \"a\",\n        \"ắ\": \"a\",\n        \"ẵ\": \"a\",\n        \"ẳ\": \"a\",\n        \"ȧ\": \"a\",\n        \"ǡ\": \"a\",\n        \"ä\": \"a\",\n        \"ǟ\": \"a\",\n        \"ả\": \"a\",\n        \"å\": \"a\",\n        \"ǻ\": \"a\",\n        \"ǎ\": \"a\",\n        \"ȁ\": \"a\",\n        \"ȃ\": \"a\",\n        \"ạ\": \"a\",\n        \"ậ\": \"a\",\n        \"ặ\": \"a\",\n        \"ḁ\": \"a\",\n        \"ą\": \"a\",\n        \"ⱥ\": \"a\",\n        \"ɐ\": \"a\",\n        \"ⓑ\": \"b\",\n        \"ｂ\": \"b\",\n        \"ḃ\": \"b\",\n        \"ḅ\": \"b\",\n        \"ḇ\": \"b\",\n        \"ƀ\": \"b\",\n        \"ƃ\": \"b\",\n        \"ɓ\": \"b\",\n        \"ⓒ\": \"c\",\n        \"ｃ\": \"c\",\n        \"ć\": \"c\",\n        \"ĉ\": \"c\",\n        \"ċ\": \"c\",\n        \"č\": \"c\",\n        \"ç\": \"c\",\n        \"ḉ\": \"c\",\n        \"ƈ\": \"c\",\n        \"ȼ\": \"c\",\n        \"ꜿ\": \"c\",\n        \"ↄ\": \"c\",\n        \"ⓓ\": \"d\",\n        \"ｄ\": \"d\",\n        \"ḋ\": \"d\",\n        \"ď\": \"d\",\n        \"ḍ\": \"d\",\n        \"ḑ\": \"d\",\n        \"ḓ\": \"d\",\n        \"ḏ\": \"d\",\n        \"đ\": \"d\",\n        \"ƌ\": \"d\",\n        \"ɖ\": \"d\",\n        \"ɗ\": \"d\",\n        \"ꝺ\": \"d\",\n        \"ⓔ\": \"e\",\n        \"ｅ\": \"e\",\n        \"è\": \"e\",\n        \"é\": \"e\",\n        \"ê\": \"e\",\n        \"ề\": \"e\",\n        \"ế\": \"e\",\n        \"ễ\": \"e\",\n        \"ể\": \"e\",\n        \"ẽ\": \"e\",\n        \"ē\": \"e\",\n        \"ḕ\": \"e\",\n        \"ḗ\": \"e\",\n        \"ĕ\": \"e\",\n        \"ė\": \"e\",\n        \"ë\": \"e\",\n        \"ẻ\": \"e\",\n        \"ě\": \"e\",\n        \"ȅ\": \"e\",\n        \"ȇ\": \"e\",\n        \"ẹ\": \"e\",\n        \"ệ\": \"e\",\n        \"ȩ\": \"e\",\n        \"ḝ\": \"e\",\n        \"ę\": \"e\",\n        \"ḙ\": \"e\",\n        \"ḛ\": \"e\",\n        \"ɇ\": \"e\",\n        \"ɛ\": \"e\",\n        \"ǝ\": \"e\",\n        \"ⓕ\": \"f\",\n        \"ｆ\": \"f\",\n        \"ḟ\": \"f\",\n        \"ƒ\": \"f\",\n        \"ꝼ\": \"f\",\n        \"ⓖ\": \"g\",\n        \"ｇ\": \"g\",\n        \"ǵ\": \"g\",\n        \"ĝ\": \"g\",\n        \"ḡ\": \"g\",\n        \"ğ\": \"g\",\n        \"ġ\": \"g\",\n        \"ǧ\": \"g\",\n        \"ģ\": \"g\",\n        \"ǥ\": \"g\",\n        \"ɠ\": \"g\",\n        \"ꞡ\": \"g\",\n        \"ᵹ\": \"g\",\n        \"ꝿ\": \"g\",\n        \"ⓗ\": \"h\",\n        \"ｈ\": \"h\",\n        \"ĥ\": \"h\",\n        \"ḣ\": \"h\",\n        \"ḧ\": \"h\",\n        \"ȟ\": \"h\",\n        \"ḥ\": \"h\",\n        \"ḩ\": \"h\",\n        \"ḫ\": \"h\",\n        \"ẖ\": \"h\",\n        \"ħ\": \"h\",\n        \"ⱨ\": \"h\",\n        \"ⱶ\": \"h\",\n        \"ɥ\": \"h\",\n        \"ⓘ\": \"i\",\n        \"ｉ\": \"i\",\n        \"ì\": \"i\",\n        \"í\": \"i\",\n        \"î\": \"i\",\n        \"ĩ\": \"i\",\n        \"ī\": \"i\",\n        \"ĭ\": \"i\",\n        \"ï\": \"i\",\n        \"ḯ\": \"i\",\n        \"ỉ\": \"i\",\n        \"ǐ\": \"i\",\n        \"ȉ\": \"i\",\n        \"ȋ\": \"i\",\n        \"ị\": \"i\",\n        \"į\": \"i\",\n        \"ḭ\": \"i\",\n        \"ɨ\": \"i\",\n        \"ı\": \"i\",\n        \"ⓙ\": \"j\",\n        \"ｊ\": \"j\",\n        \"ĵ\": \"j\",\n        \"ǰ\": \"j\",\n        \"ɉ\": \"j\",\n        \"ⓚ\": \"k\",\n        \"ｋ\": \"k\",\n        \"ḱ\": \"k\",\n        \"ǩ\": \"k\",\n        \"ḳ\": \"k\",\n        \"ķ\": \"k\",\n        \"ḵ\": \"k\",\n        \"ƙ\": \"k\",\n        \"ⱪ\": \"k\",\n        \"ꝁ\": \"k\",\n        \"ꝃ\": \"k\",\n        \"ꝅ\": \"k\",\n        \"ꞣ\": \"k\",\n        \"ⓛ\": \"l\",\n        \"ｌ\": \"l\",\n        \"ŀ\": \"l\",\n        \"ĺ\": \"l\",\n        \"ľ\": \"l\",\n        \"ḷ\": \"l\",\n        \"ḹ\": \"l\",\n        \"ļ\": \"l\",\n        \"ḽ\": \"l\",\n        \"ḻ\": \"l\",\n        \"ſ\": \"l\",\n        \"ł\": \"l\",\n        \"ƚ\": \"l\",\n        \"ɫ\": \"l\",\n        \"ⱡ\": \"l\",\n        \"ꝉ\": \"l\",\n        \"ꞁ\": \"l\",\n        \"ꝇ\": \"l\",\n        \"ⓜ\": \"m\",\n        \"ｍ\": \"m\",\n        \"ḿ\": \"m\",\n        \"ṁ\": \"m\",\n        \"ṃ\": \"m\",\n        \"ɱ\": \"m\",\n        \"ɯ\": \"m\",\n        \"ⓝ\": \"n\",\n        \"ｎ\": \"n\",\n        \"ǹ\": \"n\",\n        \"ń\": \"n\",\n        \"ñ\": \"n\",\n        \"ṅ\": \"n\",\n        \"ň\": \"n\",\n        \"ṇ\": \"n\",\n        \"ņ\": \"n\",\n        \"ṋ\": \"n\",\n        \"ṉ\": \"n\",\n        \"ƞ\": \"n\",\n        \"ɲ\": \"n\",\n        \"ŉ\": \"n\",\n        \"ꞑ\": \"n\",\n        \"ꞥ\": \"n\",\n        \"ⓞ\": \"o\",\n        \"ｏ\": \"o\",\n        \"ò\": \"o\",\n        \"ó\": \"o\",\n        \"ô\": \"o\",\n        \"ồ\": \"o\",\n        \"ố\": \"o\",\n        \"ỗ\": \"o\",\n        \"ổ\": \"o\",\n        \"õ\": \"o\",\n        \"ṍ\": \"o\",\n        \"ȭ\": \"o\",\n        \"ṏ\": \"o\",\n        \"ō\": \"o\",\n        \"ṑ\": \"o\",\n        \"ṓ\": \"o\",\n        \"ŏ\": \"o\",\n        \"ȯ\": \"o\",\n        \"ȱ\": \"o\",\n        \"ö\": \"o\",\n        \"ȫ\": \"o\",\n        \"ỏ\": \"o\",\n        \"ő\": \"o\",\n        \"ǒ\": \"o\",\n        \"ȍ\": \"o\",\n        \"ȏ\": \"o\",\n        \"ơ\": \"o\",\n        \"ờ\": \"o\",\n        \"ớ\": \"o\",\n        \"ỡ\": \"o\",\n        \"ở\": \"o\",\n        \"ợ\": \"o\",\n        \"ọ\": \"o\",\n        \"ộ\": \"o\",\n        \"ǫ\": \"o\",\n        \"ǭ\": \"o\",\n        \"ø\": \"o\",\n        \"ǿ\": \"o\",\n        \"ɔ\": \"o\",\n        \"ꝋ\": \"o\",\n        \"ꝍ\": \"o\",\n        \"ɵ\": \"o\",\n        \"ⓟ\": \"p\",\n        \"ｐ\": \"p\",\n        \"ṕ\": \"p\",\n        \"ṗ\": \"p\",\n        \"ƥ\": \"p\",\n        \"ᵽ\": \"p\",\n        \"ꝑ\": \"p\",\n        \"ꝓ\": \"p\",\n        \"ꝕ\": \"p\",\n        \"ⓠ\": \"q\",\n        \"ｑ\": \"q\",\n        \"ɋ\": \"q\",\n        \"ꝗ\": \"q\",\n        \"ꝙ\": \"q\",\n        \"ⓡ\": \"r\",\n        \"ｒ\": \"r\",\n        \"ŕ\": \"r\",\n        \"ṙ\": \"r\",\n        \"ř\": \"r\",\n        \"ȑ\": \"r\",\n        \"ȓ\": \"r\",\n        \"ṛ\": \"r\",\n        \"ṝ\": \"r\",\n        \"ŗ\": \"r\",\n        \"ṟ\": \"r\",\n        \"ɍ\": \"r\",\n        \"ɽ\": \"r\",\n        \"ꝛ\": \"r\",\n        \"ꞧ\": \"r\",\n        \"ꞃ\": \"r\",\n        \"ⓢ\": \"s\",\n        \"ｓ\": \"s\",\n        \"ß\": \"s\",\n        \"ś\": \"s\",\n        \"ṥ\": \"s\",\n        \"ŝ\": \"s\",\n        \"ṡ\": \"s\",\n        \"š\": \"s\",\n        \"ṧ\": \"s\",\n        \"ṣ\": \"s\",\n        \"ṩ\": \"s\",\n        \"ș\": \"s\",\n        \"ş\": \"s\",\n        \"ȿ\": \"s\",\n        \"ꞩ\": \"s\",\n        \"ꞅ\": \"s\",\n        \"ẛ\": \"s\",\n        \"ⓣ\": \"t\",\n        \"ｔ\": \"t\",\n        \"ṫ\": \"t\",\n        \"ẗ\": \"t\",\n        \"ť\": \"t\",\n        \"ṭ\": \"t\",\n        \"ț\": \"t\",\n        \"ţ\": \"t\",\n        \"ṱ\": \"t\",\n        \"ṯ\": \"t\",\n        \"ŧ\": \"t\",\n        \"ƭ\": \"t\",\n        \"ʈ\": \"t\",\n        \"ⱦ\": \"t\",\n        \"ꞇ\": \"t\",\n        \"ⓤ\": \"u\",\n        \"ｕ\": \"u\",\n        \"ù\": \"u\",\n        \"ú\": \"u\",\n        \"û\": \"u\",\n        \"ũ\": \"u\",\n        \"ṹ\": \"u\",\n        \"ū\": \"u\",\n        \"ṻ\": \"u\",\n        \"ŭ\": \"u\",\n        \"ü\": \"u\",\n        \"ǜ\": \"u\",\n        \"ǘ\": \"u\",\n        \"ǖ\": \"u\",\n        \"ǚ\": \"u\",\n        \"ủ\": \"u\",\n        \"ů\": \"u\",\n        \"ű\": \"u\",\n        \"ǔ\": \"u\",\n        \"ȕ\": \"u\",\n        \"ȗ\": \"u\",\n        \"ư\": \"u\",\n        \"ừ\": \"u\",\n        \"ứ\": \"u\",\n        \"ữ\": \"u\",\n        \"ử\": \"u\",\n        \"ự\": \"u\",\n        \"ụ\": \"u\",\n        \"ṳ\": \"u\",\n        \"ų\": \"u\",\n        \"ṷ\": \"u\",\n        \"ṵ\": \"u\",\n        \"ʉ\": \"u\",\n        \"ⓥ\": \"v\",\n        \"ｖ\": \"v\",\n        \"ṽ\": \"v\",\n        \"ṿ\": \"v\",\n        \"ʋ\": \"v\",\n        \"ꝟ\": \"v\",\n        \"ʌ\": \"v\",\n        \"ⓦ\": \"w\",\n        \"ｗ\": \"w\",\n        \"ẁ\": \"w\",\n        \"ẃ\": \"w\",\n        \"ŵ\": \"w\",\n        \"ẇ\": \"w\",\n        \"ẅ\": \"w\",\n        \"ẘ\": \"w\",\n        \"ẉ\": \"w\",\n        \"ⱳ\": \"w\",\n        \"ⓧ\": \"x\",\n        \"ｘ\": \"x\",\n        \"ẋ\": \"x\",\n        \"ẍ\": \"x\",\n        \"ⓨ\": \"y\",\n        \"ｙ\": \"y\",\n        \"ỳ\": \"y\",\n        \"ý\": \"y\",\n        \"ŷ\": \"y\",\n        \"ỹ\": \"y\",\n        \"ȳ\": \"y\",\n        \"ẏ\": \"y\",\n        \"ÿ\": \"y\",\n        \"ỷ\": \"y\",\n        \"ẙ\": \"y\",\n        \"ỵ\": \"y\",\n        \"ƴ\": \"y\",\n        \"ɏ\": \"y\",\n        \"ỿ\": \"y\",\n        \"ⓩ\": \"z\",\n        \"ｚ\": \"z\",\n        \"ź\": \"z\",\n        \"ẑ\": \"z\",\n        \"ż\": \"z\",\n        \"ž\": \"z\",\n        \"ẓ\": \"z\",\n        \"ẕ\": \"z\",\n        \"ƶ\": \"z\",\n        \"ȥ\": \"z\",\n        \"ɀ\": \"z\",\n        \"ⱬ\": \"z\",\n        \"ꝣ\": \"z\"\n    }\n}","import { Culture } from \"./culture\";\nimport { match, cache } from \"xregexp\";\nimport { StringUtility } from \"./utilities\";\n\nexport interface IModel {\n    readonly modelTypeName: string\n    parse(query: string): Array<ModelResult>\n}\n\nexport class ModelResult {\n    text: string\n    start: number\n    end: number\n    typeName: string\n    resolution: { [key: string]: any }\n}\n\nexport class ExtendedModelResult extends ModelResult {\n    parentText: string\n\n    constructor(source: ModelResult = null) {\n        super()\n        if (source) {\n            this.text = source.text;\n            this.start = source.start;\n            this.end = source.end;\n            this.typeName = source.typeName;\n            this.resolution = source.resolution;\n        }\n    }\n}\n\nclass ModelFactoryKey<TModelOptions> {\n    culture: string;\n    modelType: string;\n    options: TModelOptions;\n    constructor(culture: string, modelType: string, options: TModelOptions = null) {\n        this.culture = culture ? culture.toLowerCase() : null;\n        this.modelType = modelType;\n        this.options = options;\n    }\n\n    public toString(): string {\n        return JSON.stringify(this);\n    }\n\n    public static fromString<TModelOptions>(key: string): ModelFactoryKey<TModelOptions> {\n        return JSON.parse(key) as ModelFactoryKey<TModelOptions>;\n    }\n}\n\nexport class ModelFactory<TModelOptions> {\n    static readonly fallbackCulture: string = Culture.English;\n\n    private modelFactories: Map<string, (options: TModelOptions) => IModel> = new Map<string, (options: TModelOptions) => IModel>();\n\n    private static cache: Map<string, IModel> = new Map<string, IModel>();\n\n    getModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean, options: TModelOptions): IModel {\n\n        let result = this.tryGetModel(modelTypeName, culture, options);\n        if (!result.containsModel && fallbackToDefaultCulture) {\n            result = this.tryGetModel(modelTypeName, ModelFactory.fallbackCulture, options);\n        }\n\n        if (result.containsModel) {\n            return result.model;\n        }\n\n        throw new Error(`Could not find Model with the specified configuration: ${culture},${modelTypeName}`);\n    }\n\n    tryGetModel(modelTypeName: string, culture: string, options: TModelOptions): { containsModel: boolean; model?: IModel } {\n        culture = Culture.mapToNearestLanguage(culture);\n        let cacheResult = this.getModelFromCache(modelTypeName, culture, options);\n        if (cacheResult) return { containsModel: true, model: cacheResult };\n\n        let key = this.generateKey(modelTypeName, culture);\n        if (this.modelFactories.has(key)) {\n            let model = this.modelFactories.get(key)(options);\n            this.registerModelInCache(modelTypeName, culture, options, model);\n            return { containsModel: true, model: model };\n        }\n\n        return { containsModel: false };\n    }\n\n    registerModel(modelTypeName: string, culture: string, modelCreator: (options: TModelOptions) => IModel) {\n        let key = this.generateKey(modelTypeName, culture);\n        if (this.modelFactories.has(key)) {\n            throw new Error(`${culture}-${modelTypeName} has already been registered.`);\n        }\n\n        this.modelFactories.set(key, modelCreator);\n    }\n\n    initializeModels(targetCulture: string, options: TModelOptions) {\n        this.modelFactories.forEach((value, key) => {\n            let modelFactoryKey = ModelFactoryKey.fromString<TModelOptions>(key);\n            if (StringUtility.isNullOrEmpty(targetCulture) || modelFactoryKey.culture === targetCulture) {\n                this.tryGetModel(modelFactoryKey.modelType, modelFactoryKey.culture, modelFactoryKey.options)\n            }\n        });\n    }\n\n    private generateKey(modelTypeName: string, culture: string): string {\n        return new ModelFactoryKey(culture, modelTypeName).toString();\n    }\n\n    private getModelFromCache(modelTypeName: string, culture: string, options: TModelOptions): IModel {\n        let key = this.generateCacheKey(modelTypeName, culture, options);\n        return ModelFactory.cache.get(key);\n    }\n\n    private registerModelInCache(modelTypeName: string, culture: string, options: TModelOptions, model: IModel) {\n        let key = this.generateCacheKey(modelTypeName, culture, options);\n        ModelFactory.cache.set(key, model);\n    }\n\n    private generateCacheKey(modelTypeName: string, culture: string, options: TModelOptions): string {\n        return new ModelFactoryKey<TModelOptions>(culture, modelTypeName, options).toString();\n    }\n}","import { IModel, ModelFactory } from \"./models\"\n\nexport abstract class Recognizer<TRecognizerOptions> {\n  public readonly Options: TRecognizerOptions;\n  public readonly TargetCulture: string;\n\n  private readonly modelFactory: ModelFactory<TRecognizerOptions> = new ModelFactory<TRecognizerOptions>();\n\n  protected constructor(targetCulture: string, options: TRecognizerOptions, lazyInitialization: boolean);\n  protected constructor(targetCulture: string, options: any, lazyInitialization: boolean) {\n    if(!this.IsValidOptions(options)) throw new Error(`${options} is not a valid options value.`)\n    this.TargetCulture = targetCulture;\n    this.Options = options;\n    this.InitializeConfiguration();\n\n    if (!lazyInitialization) {\n      this.initializeModels(targetCulture, options)\n    }\n  }\n\n  protected abstract InitializeConfiguration();\n\n  protected abstract IsValidOptions(options): boolean;\n\n  getModel(modelTypeName: string, culture: string, fallbackToDefaultCulture: boolean): IModel {\n    return this.modelFactory.getModel(modelTypeName, culture || this.TargetCulture, fallbackToDefaultCulture, this.Options);\n  }\n\n  registerModel(modelTypeName: string, culture: string, modelCreator: (options: TRecognizerOptions) => IModel) {\n    this.modelFactory.registerModel(modelTypeName, culture, modelCreator);\n  }\n\n  private initializeModels(targetCulture: string, options: TRecognizerOptions) {\n    this.modelFactory.initializeModels(targetCulture, options);\n  }\n}","export interface IExtractor {\n    extract(input: string): Array<ExtractResult>\n}\n\nexport class ExtractResult {\n    start: number;\n    length: number;\n    text: string;\n    type: string;\n    data?: any;\n\n    static isOverlap(erA: ExtractResult, erB: ExtractResult): boolean {\n        return !( erA.start >= erB.start + erB.length ) && !( erB.start >= erA.start + erA.length );\n    }\n\n    static isCover(er1: ExtractResult, er2: ExtractResult): boolean {\n        return ((er2.start < er1.start) && ((er2.start + er2.length) >= (er1.start + er1.length)))\n        || ((er2.start <= er1.start) && ((er2.start + er2.length) > (er1.start + er1.length)));\n    }\n\n    static getFromText(source: string): ExtractResult {\n        return {\n            start: 0,\n            length: source.length,\n            text: source,\n            type: 'custom'\n        }\n    }\n}\n","import { ExtractResult } from \"./extractors\";\n\nexport interface IParser {\n    parse(extResult: ExtractResult): ParseResult | null\n}\n\nexport class ParseResult extends ExtractResult {\n    constructor(er?: ExtractResult) {\n        super();\n        if (er) {\n            this.length = er.length;\n            this.start = er.start;\n            this.data = er.data;\n            this.text = er.text;\n            this.type = er.type;\n        }\n        this.resolutionStr = \"\";\n    }\n\n    // Value is for resolution.\n    // e.g. 1000 for \"one thousand\".\n    // The resolutions are different for different parsers.\n    // Therefore, we use object here.\n    value?: any;\n\n    // Output the value in string format.\n    // It is used in some parsers.\n    resolutionStr?: string;\n}","export { Culture, CultureInfo } from \"./culture\";\nexport { IModel, ModelResult, ModelFactory } from \"./models\";\nexport { Recognizer } from \"./recognizer\";\nexport { IExtractor, ExtractResult } from \"./extractors\";\nexport { IParser, ParseResult } from \"./parsers\";\nexport { FormatUtility, StringUtility, Match, RegExpUtility } from \"./utilities\";"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","XRegExp","culture","culture_1","utilities_1","models_1","extractors_1"],"mappings":"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"}