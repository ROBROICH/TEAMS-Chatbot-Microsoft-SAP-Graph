"use strict";
/**
 * -------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.
 * See License in the project root for license information.
 * -------------------------------------------------------------------------------------------
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * @module ImplicitMSALAuthenticationProvider
 */
var msal_1 = require("msal");
/**
 * @class
 * Class representing ImplicitMSALAuthenticationProvider
 * @extends AuthenticationProvider
 */
var ImplicitMSALAuthenticationProvider = /** @class */ (function () {
    /**
     * @public
     * @constructor
     * Creates an instance of ImplicitMSALAuthenticationProvider
     * @param {UserAgentApplication} msalApplication - An instance of MSAL UserAgentApplication
     * @param {MSALAuthenticationProviderOptions} options - An instance of MSALAuthenticationProviderOptions
     * @returns An instance of ImplicitMSALAuthenticationProvider
     */
    function ImplicitMSALAuthenticationProvider(msalApplication, options) {
        this.options = options;
        this.msalApplication = msalApplication;
    }
    /**
     * @public
     * @async
     * To get the access token
     * @param {AuthenticationProviderOptions} authenticationProviderOptions - The authentication provider options object
     * @returns The promise that resolves to an access token
     */
    ImplicitMSALAuthenticationProvider.prototype.getAccessToken = function (authenticationProviderOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var options, scopes, error, tokenRequest, authResponse, error_1, authResponse, error_2, tokenRequest, authResponse, error_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = authenticationProviderOptions;
                        if (typeof options !== "undefined") {
                            scopes = options.scopes;
                        }
                        if (typeof scopes === "undefined" || scopes.length === 0) {
                            scopes = this.options.scopes;
                        }
                        if (scopes.length === 0) {
                            error = new Error();
                            error.name = "EmptyScopes";
                            error.message = "Scopes cannot be empty, Please provide a scopes";
                            throw error;
                        }
                        if (!this.msalApplication.getAccount()) return [3 /*break*/, 11];
                        tokenRequest = {
                            scopes: scopes,
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 10]);
                        return [4 /*yield*/, this.msalApplication.acquireTokenSilent(tokenRequest)];
                    case 2:
                        authResponse = _a.sent();
                        return [2 /*return*/, authResponse.accessToken];
                    case 3:
                        error_1 = _a.sent();
                        if (!(error_1 instanceof msal_1.InteractionRequiredAuthError)) return [3 /*break*/, 8];
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this.msalApplication.acquireTokenPopup(tokenRequest)];
                    case 5:
                        authResponse = _a.sent();
                        return [2 /*return*/, authResponse.accessToken];
                    case 6:
                        error_2 = _a.sent();
                        throw error_2;
                    case 7: return [3 /*break*/, 9];
                    case 8: throw error_1;
                    case 9: return [3 /*break*/, 10];
                    case 10: return [3 /*break*/, 15];
                    case 11:
                        _a.trys.push([11, 14, , 15]);
                        tokenRequest = {
                            scopes: scopes,
                        };
                        return [4 /*yield*/, this.msalApplication.loginPopup(tokenRequest)];
                    case 12:
                        _a.sent();
                        return [4 /*yield*/, this.msalApplication.acquireTokenSilent(tokenRequest)];
                    case 13:
                        authResponse = _a.sent();
                        return [2 /*return*/, authResponse.accessToken];
                    case 14:
                        error_3 = _a.sent();
                        throw error_3;
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    return ImplicitMSALAuthenticationProvider;
}());
exports.ImplicitMSALAuthenticationProvider = ImplicitMSALAuthenticationProvider;
//# sourceMappingURL=ImplicitMSALAuthenticationProvider.js.map