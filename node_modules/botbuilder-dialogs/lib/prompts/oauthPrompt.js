"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const botbuilder_core_1 = require("botbuilder-core");
const dialog_1 = require("../dialog");
const channel_1 = require("../choices/channel");
const skillsHelpers_1 = require("./skillsHelpers");
/**
 * Creates a new prompt that asks the user to sign in using the Bot Frameworks Single Sign On (SSO)
 * service.
 *
 * @remarks
 * The prompt will attempt to retrieve the users current token and if the user isn't signed in, it
 * will send them an `OAuthCard` containing a button they can press to signin. Depending on the
 * channel, the user will be sent through one of two possible signin flows:
 *
 * - The automatic signin flow where once the user signs in and the SSO service will forward the bot
 * the users access token using either an `event` or `invoke` activity.
 * - The "magic code" flow where where once the user signs in they will be prompted by the SSO
 * service to send the bot a six digit code confirming their identity. This code will be sent as a
 * standard `message` activity.
 *
 * Both flows are automatically supported by the `OAuthPrompt` and the only thing you need to be
 * careful of is that you don't block the `event` and `invoke` activities that the prompt might
 * be waiting on.
 *
 * > [!NOTE]
 * > You should avoid persisting the access token with your bots other state. The Bot Frameworks
 * > SSO service will securely store the token on your behalf. If you store it in your bots state
 * > it could expire or be revoked in between turns.
 * >
 * > When calling the prompt from within a waterfall step you should use the token within the step
 * > following the prompt and then let the token go out of scope at the end of your function.
 *
 * #### Prompt Usage
 *
 * When used with your bots `DialogSet` you can simply add a new instance of the prompt as a named
 * dialog using `DialogSet.add()`. You can then start the prompt from a waterfall step using either
 * `DialogContext.beginDialog()` or `DialogContext.prompt()`. The user will be prompted to signin as
 * needed and their access token will be passed as an argument to the callers next waterfall step:
 *
 * ```JavaScript
 * const { ConversationState, MemoryStorage, OAuthLoginTimeoutMsValue } = require('botbuilder');
 * const { DialogSet, OAuthPrompt, WaterfallDialog } = require('botbuilder-dialogs');
 *
 * const convoState = new ConversationState(new MemoryStorage());
 * const dialogState = convoState.createProperty('dialogState');
 * const dialogs = new DialogSet(dialogState);
 *
 * dialogs.add(new OAuthPrompt('loginPrompt', {
 *    connectionName: 'GitConnection',
 *    title: 'Login To GitHub',
 *    timeout: OAuthLoginTimeoutMsValue   // User has 15 minutes to login
 * }));
 *
 * dialogs.add(new WaterfallDialog('taskNeedingLogin', [
 *      async (step) => {
 *          return await step.beginDialog('loginPrompt');
 *      },
 *      async (step) => {
 *          const token = step.result;
 *          if (token) {
 *
 *              // ... continue with task needing access token ...
 *
 *          } else {
 *              await step.context.sendActivity(`Sorry... We couldn't log you in. Try again later.`);
 *              return await step.endDialog();
 *          }
 *      }
 * ]));
 * ```
 */
class OAuthPrompt extends dialog_1.Dialog {
    /**
     * Creates a new OAuthPrompt instance.
     * @param dialogId Unique ID of the dialog within its parent `DialogSet` or `ComponentDialog`.
     * @param settings Settings used to configure the prompt.
     * @param validator (Optional) validator that will be called each time the user responds to the prompt.
     */
    constructor(dialogId, settings, validator) {
        super(dialogId);
        this.settings = settings;
        this.validator = validator;
    }
    beginDialog(dc, options) {
        return __awaiter(this, void 0, void 0, function* () {
            // Ensure prompts have input hint set
            const o = Object.assign({}, options);
            if (o.prompt && typeof o.prompt === 'object' && typeof o.prompt.inputHint !== 'string') {
                o.prompt.inputHint = botbuilder_core_1.InputHints.AcceptingInput;
            }
            if (o.retryPrompt && typeof o.retryPrompt === 'object' && typeof o.retryPrompt.inputHint !== 'string') {
                o.retryPrompt.inputHint = botbuilder_core_1.InputHints.AcceptingInput;
            }
            // Initialize prompt state
            const timeout = typeof this.settings.timeout === 'number' ? this.settings.timeout : 900000;
            const state = dc.activeDialog.state;
            state.state = {};
            state.options = o;
            state.expires = new Date().getTime() + timeout;
            // Attempt to get the users token
            const output = yield this.getUserToken(dc.context);
            if (output !== undefined) {
                // Return token
                return yield dc.endDialog(output);
            }
            else {
                // Prompt user to login
                yield this.sendOAuthCardAsync(dc.context, state.options.prompt);
                return dialog_1.Dialog.EndOfTurn;
            }
        });
    }
    continueDialog(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            // Recognize token
            const recognized = yield this.recognizeToken(dc.context);
            // Check for timeout
            const state = dc.activeDialog.state;
            const isMessage = dc.context.activity.type === botbuilder_core_1.ActivityTypes.Message;
            const hasTimedOut = isMessage && (new Date().getTime() > state.expires);
            if (hasTimedOut) {
                return yield dc.endDialog(undefined);
            }
            else {
                if (state.state['attemptCount'] === undefined) {
                    state.state['attemptCount'] = 0;
                }
                // Validate the return value
                let isValid = false;
                if (this.validator) {
                    isValid = yield this.validator({
                        context: dc.context,
                        recognized: recognized,
                        state: state.state,
                        options: state.options,
                        attemptCount: ++state.state['attemptCount']
                    });
                }
                else if (recognized.succeeded) {
                    isValid = true;
                }
                // Return recognized value or re-prompt
                if (isValid) {
                    return yield dc.endDialog(recognized.value);
                }
                else {
                    // Send retry prompt
                    if (!dc.context.responded && isMessage && state.options.retryPrompt) {
                        yield dc.context.sendActivity(state.options.retryPrompt);
                    }
                    return dialog_1.Dialog.EndOfTurn;
                }
            }
        });
    }
    /**
     * Attempts to retrieve the stored token for the current user.
     * @param context Context reference the user that's being looked up.
     * @param code (Optional) login code received from the user.
     */
    getUserToken(context, code) {
        return __awaiter(this, void 0, void 0, function* () {
            // Validate adapter type
            if (!('getUserToken' in context.adapter)) {
                throw new Error(`OAuthPrompt.getUserToken(): not supported for the current adapter.`);
            }
            // Get the token and call validator
            const adapter = context.adapter;
            return yield adapter.getUserToken(context, this.settings.connectionName, code);
        });
    }
    /**
     * Signs the user out of the service.
     *
     * @remarks
     * This example shows creating an instance of the prompt and then signing out the user.
     *
     * ```JavaScript
     * const prompt = new OAuthPrompt({
     *    connectionName: 'GitConnection',
     *    title: 'Login To GitHub'
     * });
     * await prompt.signOutUser(context);
     * ```
     * @param context Context referencing the user that's being signed out.
     */
    signOutUser(context) {
        return __awaiter(this, void 0, void 0, function* () {
            // Validate adapter type
            if (!('signOutUser' in context.adapter)) {
                throw new Error(`OAuthPrompt.signOutUser(): not supported for the current adapter.`);
            }
            // Sign out user
            const adapter = context.adapter;
            return adapter.signOutUser(context, this.settings.connectionName);
        });
    }
    sendOAuthCardAsync(context, prompt) {
        return __awaiter(this, void 0, void 0, function* () {
            // Validate adapter type
            if (!('getUserToken' in context.adapter)) {
                throw new Error(`OAuthPrompt.prompt(): not supported for the current adapter.`);
            }
            // Initialize outgoing message
            const msg = typeof prompt === 'object' ? Object.assign({}, prompt) : botbuilder_core_1.MessageFactory.text(prompt, undefined, botbuilder_core_1.InputHints.AcceptingInput);
            if (!Array.isArray(msg.attachments)) {
                msg.attachments = [];
            }
            // Add login card as needed
            if (this.channelSupportsOAuthCard(context.activity.channelId)) {
                const cards = msg.attachments.filter((a) => a.contentType === botbuilder_core_1.CardFactory.contentTypes.oauthCard);
                if (cards.length === 0) {
                    let cardActionType = botbuilder_core_1.ActionTypes.Signin;
                    let link;
                    if (OAuthPrompt.isFromStreamingConnection(context.activity)) {
                        link = yield context.adapter.getSignInLink(context, this.settings.connectionName);
                    }
                    else {
                        // Retrieve the ClaimsIdentity from a BotFrameworkAdapter. For more information see
                        // https://github.com/microsoft/botbuilder-js/commit/b7932e37bb6e421985d5ce53edd9e82af6240a63#diff-3e3af334c0c6adf4906ee5e2a23beaebR250
                        const identity = context.turnState.get(context.adapter.BotIdentityKey);
                        if (identity && skillsHelpers_1.isSkillClaim(identity.claims)) {
                            // Force magic code for Skills (to be addressed in R8)
                            link = yield context.adapter.getSignInLink(context, this.settings.connectionName);
                            cardActionType = botbuilder_core_1.ActionTypes.OpenUrl;
                        }
                    }
                    // Append oauth card
                    const card = botbuilder_core_1.CardFactory.oauthCard(this.settings.connectionName, this.settings.title, this.settings.text, link);
                    // Set the appropriate ActionType for the button.
                    card.content.buttons[0].type = cardActionType;
                    msg.attachments.push(card);
                }
            }
            else {
                const cards = msg.attachments.filter((a) => a.contentType === botbuilder_core_1.CardFactory.contentTypes.signinCard);
                if (cards.length === 0) {
                    // Append signin card
                    const link = yield context.adapter.getSignInLink(context, this.settings.connectionName);
                    msg.attachments.push(botbuilder_core_1.CardFactory.signinCard(this.settings.title, link, this.settings.text));
                }
            }
            // Add the login timeout specified in OAuthPromptSettings to TurnState so it can be referenced if polling is needed
            if (!context.turnState.get(botbuilder_core_1.OAuthLoginTimeoutKey) && this.settings.timeout) {
                context.turnState.set(botbuilder_core_1.OAuthLoginTimeoutKey, this.settings.timeout);
            }
            // Send prompt
            yield context.sendActivity(msg);
        });
    }
    recognizeToken(context) {
        return __awaiter(this, void 0, void 0, function* () {
            let token;
            if (this.isTokenResponseEvent(context)) {
                token = context.activity.value;
            }
            else if (this.isTeamsVerificationInvoke(context)) {
                const code = context.activity.value.state;
                try {
                    token = yield this.getUserToken(context, code);
                    if (token !== undefined) {
                        yield context.sendActivity({ type: 'invokeResponse', value: { status: 200 } });
                    }
                    else {
                        yield context.sendActivity({ type: 'invokeResponse', value: { status: 404 } });
                    }
                }
                catch (e) {
                    yield context.sendActivity({ type: 'invokeResponse', value: { status: 500 } });
                }
            }
            else if (context.activity.type === botbuilder_core_1.ActivityTypes.Message) {
                const matched = /(\d{6})/.exec(context.activity.text);
                if (matched && matched.length > 1) {
                    token = yield this.getUserToken(context, matched[1]);
                }
            }
            return token !== undefined ? { succeeded: true, value: token } : { succeeded: false };
        });
    }
    static isFromStreamingConnection(activity) {
        return activity && activity.serviceUrl && !activity.serviceUrl.toLowerCase().startsWith('http');
    }
    isTokenResponseEvent(context) {
        const activity = context.activity;
        return activity.type === botbuilder_core_1.ActivityTypes.Event && activity.name === 'tokens/response';
    }
    isTeamsVerificationInvoke(context) {
        const activity = context.activity;
        return activity.type === botbuilder_core_1.ActivityTypes.Invoke && activity.name === 'signin/verifyState';
    }
    channelSupportsOAuthCard(channelId) {
        switch (channelId) {
            case channel_1.channels.msteams:
            case channel_1.channels.cortana:
            case channel_1.channels.skype:
            case channel_1.channels.skypeforbusiness:
                return false;
            default:
        }
        return true;
    }
}
exports.OAuthPrompt = OAuthPrompt;
//# sourceMappingURL=oauthPrompt.js.map