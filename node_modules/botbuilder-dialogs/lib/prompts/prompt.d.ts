/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Activity, TurnContext } from 'botbuilder-core';
import { Choice, ChoiceFactoryOptions } from '../choices';
import { Dialog, DialogInstance, DialogReason, DialogTurnResult } from '../dialog';
import { DialogContext } from '../dialogContext';
/**
 * Controls the way that choices for a `ChoicePrompt` or yes/no options for a `ConfirmPrompt` are
 * presented to a user.
 */
export declare enum ListStyle {
    /**
     * Don't include any choices for prompt.
     */
    none = 0,
    /**
     * Automatically select the appropriate style for the current channel.
     */
    auto = 1,
    /**
     * Add choices to prompt as an inline list.
     */
    inline = 2,
    /**
     * Add choices to prompt as a numbered list.
     */
    list = 3,
    /**
     * Add choices to prompt as suggested actions.
     */
    suggestedAction = 4,
    /**
     * Add choices to prompt as a HeroCard with buttons.
     */
    heroCard = 5
}
/**
 * Basic configuration options supported by all prompts.
 */
export interface PromptOptions {
    /**
     * (Optional) Initial prompt to send the user.
     */
    prompt?: string | Partial<Activity>;
    /**
     * (Optional) Retry prompt to send the user.
     */
    retryPrompt?: string | Partial<Activity>;
    /**
     * (Optional) List of choices associated with the prompt.
     */
    choices?: (string | Choice)[];
    /**
     * (Optional) Property that can be used to override or set the value of ChoicePrompt.Style
     * when the prompt is executed using DialogContext.prompt.
     */
    style?: ListStyle;
    /**
     * (Optional) Additional validation rules to pass the prompts validator routine.
     */
    validations?: object;
}
/**
 * Result returned by a prompts recognizer function.
 * @param T Type of value being recognized.
 */
export interface PromptRecognizerResult<T> {
    /**
     * If `true` the users utterance was successfully recognized and [value](#value) contains the
     * recognized result.
     */
    succeeded: boolean;
    /**
     * Value that was recognized if [succeeded](#succeeded) is `true`.
     */
    value?: T;
}
/**
 * Function signature for providing a custom prompt validator.
 *
 * ```TypeScript
 * type PromptValidator<T> = (prompt: PromptValidatorContext<T>) => Promise<boolean>;
 * ```
 *
 * @remarks
 * The validator should be an asynchronous function that returns `true` if
 * `prompt.recognized.value` is valid and the prompt should end.
 *
 * > [!NOTE]
 * > If the validator returns `false` the prompts default re-prompt logic will be run unless the
 * > validator sends a custom re-prompt to the user using `prompt.context.sendActivity()`. In that
 * > case the prompts default re-rpompt logic will not be run.
 * @param T Type of recognizer result being validated.
 * @param PromptValidator.prompt Contextual information containing the recognizer result and original options passed to the prompt.
 */
export declare type PromptValidator<T> = (prompt: PromptValidatorContext<T>) => Promise<boolean>;
/**
 * Contextual information passed to a custom `PromptValidator`.
 * @param T Type of recognizer result being validated.
 */
export interface PromptValidatorContext<T> {
    /**
     * The context for the current turn of conversation with the user.
     *
     * @remarks
     * The validator can use this to re-prompt the user.
     */
    readonly context: TurnContext;
    /**
     * Result returned from the prompts recognizer function.
     *
     * @remarks
     * The `prompt.recognized.succeeded` field can be checked to determine of the recognizer found
     * anything and then the value can be retrieved from `prompt.recognized.value`.
     */
    readonly recognized: PromptRecognizerResult<T>;
    /**
     * A dictionary of values persisted for each conversational turn while the prompt is active.
     *
     * @remarks
     * The validator can use this to persist things like turn counts or other state information.
     */
    readonly state: object;
    /**
     * Original set of options passed to the prompt by the calling dialog.
     *
     * @remarks
     * The validator can extend this interface to support additional prompt options.
     */
    readonly options: PromptOptions;
    /**
     * A count of the number of times the prompt has been executed.
     *
     * A number indicating how many times the prompt was invoked (starting at 1 for the first time it was invoked).
     */
    readonly attemptCount: number;
}
/**
 * Base class for all prompts.
 * @param T Type of value being returned by the prompts recognizer function.
 */
export declare abstract class Prompt<T> extends Dialog {
    private validator?;
    /**
     * Creates a new Prompt instance.
     * @param dialogId Unique ID of the prompt within its parent `DialogSet` or `ComponentDialog`.
     * @param validator (Optional) custom validator used to provide additional validation and re-prompting logic for the prompt.
     */
    protected constructor(dialogId: string, validator?: PromptValidator<T>);
    beginDialog(dc: DialogContext, options: PromptOptions): Promise<DialogTurnResult>;
    continueDialog(dc: DialogContext): Promise<DialogTurnResult>;
    resumeDialog(dc: DialogContext, reason: DialogReason, result?: any): Promise<DialogTurnResult>;
    repromptDialog(context: TurnContext, instance: DialogInstance): Promise<void>;
    /**
     * Called anytime the derived class should send the user a prompt.
     * @param context Context for the current turn of conversation with the user.
     * @param state Additional state being persisted for the prompt.
     * @param options Options that the prompt was started with in the call to `DialogContext.prompt()`.
     * @param isRetry If `true` the users response wasn't recognized and the re-prompt should be sent.
     */
    protected abstract onPrompt(context: TurnContext, state: object, options: PromptOptions, isRetry: boolean): Promise<void>;
    /**
     * Called to recognize an utterance received from the user.
     *
     * @remarks
     * The Prompt class filters out non-message activities so its safe to assume that the users
     * utterance can be retrieved from `context.activity.text`.
     * @param context Context for the current turn of conversation with the user.
     * @param state Additional state being persisted for the prompt.
     * @param options Options that the prompt was started with in the call to `DialogContext.prompt()`.
     */
    protected abstract onRecognize(context: TurnContext, state: object, options: PromptOptions): Promise<PromptRecognizerResult<T>>;
    /**
     * Helper function to compose an output activity containing a set of choices.
     * @param prompt The prompt to append the users choices to.
     * @param channelId ID of the channel the prompt is being sent to.
     * @param choices List of choices to append.
     * @param style Configured style for the list of choices.
     * @param options (Optional) options to configure the underlying ChoiceFactory call.
     */
    protected appendChoices(prompt: string | Partial<Activity>, channelId: string, choices: (string | Choice)[], style: ListStyle, options?: ChoiceFactoryOptions): Partial<Activity>;
}
