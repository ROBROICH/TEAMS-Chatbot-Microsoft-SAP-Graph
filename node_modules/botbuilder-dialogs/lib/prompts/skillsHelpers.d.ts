/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
export declare const AuthConstants: {
    AppIdClaim: string;
    AudienceClaim: string;
    AuthorizedParty: string;
    ToBotFromChannelTokenIssuer: string;
    VersionClaim: string;
};
export declare const GovConstants: {
    ToBotFromChannelTokenIssuer: string;
};
/**
 * @ignore
 * Checks if the given object of claims represents a skill.
 * @remarks
 * A skill claim should contain:
 *     An "AuthenticationConstants.VersionClaim" claim.
 *     An "AuthenticationConstants.AudienceClaim" claim.
 *     An "AuthenticationConstants.AppIdClaim" claim (v1) or an a "AuthenticationConstants.AuthorizedParty" claim (v2).
 * And the appId claim should be different than the audience claim.
 * The audience claim should be a guid, indicating that it is from another bot/skill.
 * @param claims An object of claims.
 * @returns {boolean} True if the object of claims is a skill claim, false if is not.
 */
export declare function isSkillClaim(claims: {
    [key: string]: any;
}[]): boolean;
/**
 * @ignore
 * Gets the AppId from a claims list.
 * @remarks
 * In v1 tokens the AppId is in the "ver" AuthenticationConstants.AppIdClaim claim.
 * In v2 tokens the AppId is in the "azp" AuthenticationConstants.AuthorizedParty claim.
 * If the AuthenticationConstants.VersionClaim is not present, this method will attempt to
 * obtain the attribute from the AuthenticationConstants.AppIdClaim or if present.
 *
 * Throws a TypeError if claims is falsy.
 * @param claims An object containing claims types and their values.
 */
export declare function getAppIdFromClaims(claims: {
    [key: string]: any;
}[]): string;
