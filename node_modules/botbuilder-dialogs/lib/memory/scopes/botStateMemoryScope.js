"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const memoryScope_1 = require("./memoryScope");
/**
 * Base class for memory scopes based on BotState.
 */
class BotStateMemoryScope extends memoryScope_1.MemoryScope {
    constructor(name, botState, propertyName) {
        super(name, true);
        // Create property accessor
        this._state = botState;
        this._propertyName = propertyName || name;
    }
    getMemory(dc) {
        // Get state
        const state = this._state.get(dc.context);
        if (state == undefined) {
            throw new Error(`BotStateMemory.getMemory: load() should be called before retrieving memory.`);
        }
        // Ensure memory initialized
        let memory = state[this._propertyName];
        if (typeof memory !== "object") {
            state[this._propertyName] = memory = {};
        }
        // Return memory
        return memory;
    }
    setMemory(dc, memory) {
        this._state.get(dc.context)[this._propertyName] = memory;
    }
    load(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._state.load(dc.context);
        });
    }
    saveChanges(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._state.saveChanges(dc.context);
        });
    }
    delete(dc) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._state.delete(dc.context);
            // The state cache is cleared after deletion so we should re-load to
            // avoid potential errors from the bot touching memory after a delete.
            yield this._state.load(dc.context);
        });
    }
}
exports.BotStateMemoryScope = BotStateMemoryScope;
//# sourceMappingURL=botStateMemoryScope.js.map