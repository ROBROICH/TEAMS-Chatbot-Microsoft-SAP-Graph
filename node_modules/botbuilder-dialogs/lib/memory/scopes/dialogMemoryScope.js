"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botbuilder-dialogs
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const memoryScope_1 = require("./memoryScope");
const scopePath_1 = require("./scopePath");
const dialogContainer_1 = require("../../dialogContainer");
/**
 * DialogMemoryScope maps "dialog" -> dc.parent.activeDialog.state || dc.activeDialog.state
 */
class DialogMemoryScope extends memoryScope_1.MemoryScope {
    constructor() {
        super(scopePath_1.ScopePath.DIALOG);
    }
    getMemory(dc) {
        // If active dialog is a container dialog then "dialog" binds to it.
        // Otherwise the "dialog" will bind to the dialogs parent assuming it 
        // is a container.
        let parent = dc;
        if (!this.isContainer(parent) && this.isContainer(parent.parent)) {
            parent = parent.parent;
        }
        // If there's no active dialog then throw an error.
        if (!parent.activeDialog) {
            throw new Error(`DialogMemoryScope.getMemory: no active dialog found.`);
        }
        return parent.activeDialog.state;
    }
    setMemory(dc, memory) {
        if (memory == undefined) {
            throw new Error(`DialogMemoryScope.setMemory: undefined memory object passed in.`);
        }
        // If active dialog is a container dialog then "dialog" binds to it.
        // Otherwise the "dialog" will bind to the dialogs parent assuming it 
        // is a container.
        let parent = dc;
        if (!this.isContainer(parent) && this.isContainer(parent.parent)) {
            parent = parent.parent;
        }
        // If there's no active dialog then throw an error.
        if (!parent.activeDialog) {
            throw new Error(`DialogMemoryScope.setMemory: no active dialog found.`);
        }
        parent.activeDialog.state = memory;
    }
    isContainer(dc) {
        if (dc != undefined && dc.activeDialog != undefined) {
            var dialog = dc.findDialog(dc.activeDialog.id);
            if (dialog instanceof dialogContainer_1.DialogContainer) {
                return true;
            }
        }
        return false;
    }
}
exports.DialogMemoryScope = DialogMemoryScope;
//# sourceMappingURL=dialogMemoryScope.js.map