"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const subscribableStream_1 = require("../subscribableStream");
/**
 * Base class streaming payload disassembling.
 */
class PayloadDisassembler {
    constructor(sender, id) {
        this.sender = sender;
        this.id = id;
    }
    static serialize(item) {
        let stream = new subscribableStream_1.SubscribableStream();
        stream.write(JSON.stringify(item));
        stream.end();
        return { stream, streamLength: stream.length };
    }
    disassemble() {
        return __awaiter(this, void 0, void 0, function* () {
            let { stream, streamLength } = yield this.getStream();
            this.stream = stream;
            this.streamLength = streamLength;
            return this.send();
        });
    }
    send() {
        return __awaiter(this, void 0, void 0, function* () {
            let header = { payloadType: this.payloadType, payloadLength: this.streamLength, id: this.id, end: true };
            this.sender.sendPayload(header, this.stream);
        });
    }
}
exports.PayloadDisassembler = PayloadDisassembler;
//# sourceMappingURL=payloadDisassembler.js.map