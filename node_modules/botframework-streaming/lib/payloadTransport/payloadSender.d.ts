/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { SubscribableStream } from '../subscribableStream';
import { TransportDisconnectedEvent } from './transportDisconnectedEvent';
import { TransportDisconnectedEventHandler } from './transportDisconnectedEventHandler';
import { ITransportSender } from '../interfaces/ITransportSender';
import { IHeader } from '../interfaces/IHeader';
/**
 * Streaming payload sender.
 */
export declare class PayloadSender {
    disconnected?: TransportDisconnectedEventHandler;
    private sender;
    /**
     * Tests whether the transport sender is connected.
     *
     * @returns true if connected to a transport sender.
     */
    readonly isConnected: boolean;
    /**
     * Connects to the given transport sender.
     *
     * @param sender The transport sender to connect this payload sender to.
     */
    connect(sender: ITransportSender): void;
    /**
     * Sends a payload out over the connected transport sender.
     *
     * @param header The header to attach to the outgoing payload.
     * @param payload The stream of buffered data to send.
     * @param sentCalback The function to execute when the send has completed.
     */
    sendPayload(header: IHeader, payload?: SubscribableStream, sentCallback?: () => Promise<void>): void;
    /**
     * Disconnects this payload sender.
     *
     * @param e The disconnected event arguments to include in the disconnected event broadcast.
     */
    disconnect(e?: TransportDisconnectedEvent): void;
    private writePacket;
}
