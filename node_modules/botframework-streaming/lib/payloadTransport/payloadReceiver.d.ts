/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TransportDisconnectedEventHandler } from '.';
import { SubscribableStream } from '../subscribableStream';
import { TransportDisconnectedEvent } from './transportDisconnectedEvent';
import { ITransportReceiver } from '../interfaces/ITransportReceiver';
import { IHeader } from '../interfaces/IHeader';
/**
 * Payload receiver for straming.
 */
export declare class PayloadReceiver {
    isConnected: boolean;
    disconnected: TransportDisconnectedEventHandler;
    private _receiver;
    private _receiveHeaderBuffer;
    private _receivePayloadBuffer;
    private _getStream;
    private _receiveAction;
    /**
     * Connects to a transport receiver
     *
     * @param receiver The [ITransportReceiver](xref:botframework-streaming.ITransportReceiver) object to pull incoming data from.
     */
    connect(receiver: ITransportReceiver): void;
    /**
     * Allows subscribing to this receiver in order to be notified when new data comes in.
     *
     * @param getStream Callback when a new stream has been received.
     * @param receiveAction Callback when a new message has been received.
     */
    subscribe(getStream: (header: IHeader) => SubscribableStream, receiveAction: (header: IHeader, stream: SubscribableStream, count: number) => void): void;
    /**
     * Force this receiver to disconnect.
     *
     * @param e Event arguments to include when broadcasting disconnection event.
     */
    disconnect(e?: TransportDisconnectedEvent): void;
    private runReceive;
    private receivePackets;
}
