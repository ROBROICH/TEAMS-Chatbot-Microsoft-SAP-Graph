/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import * as WebSocket from 'ws';
import { INodeIncomingMessage, INodeBuffer, INodeSocket, ISocket } from '../interfaces';
export declare class NodeWebSocket implements ISocket {
    private wsSocket;
    protected wsServer: WebSocket.Server;
    /**
     * Creates a new instance of the [NodeWebSocket](xref:botframework-streaming.NodeWebSocket) class.
     *
     * @param socket The `ws` WebSocket instance to build this connection on.
     */
    constructor(wsSocket?: WebSocket);
    /**
     * Create and set a `ws` WebSocket with an HTTP Request, Socket and Buffer.
     * @param req INodeIncomingMessage
     * @param socket INodeSocket
     * @param head INodeBuffer
     */
    create(req: INodeIncomingMessage, socket: INodeSocket, head: INodeBuffer): Promise<void>;
    /**
     * True if the 'ws' WebSocket is currently connected.
     */
    readonly isConnected: boolean;
    /**
     * Writes a buffer to the socket and sends it.
     *
     * @param buffer The buffer of data to send across the connection.
     */
    write(buffer: INodeBuffer): void;
    /**
     * Connects to the supporting socket using WebSocket protocol.
     *
     * @param serverAddress The address the server is listening on.
     * @param port The port the server is listening on, defaults to 8082.
     */
    connect(serverAddress: any, port?: number): Promise<void>;
    /**
     * Set the handler for `'data'` and `'message'` events received on the socket.
     */
    setOnMessageHandler(handler: (x: any) => void): void;
    /**
     * Close the socket.
     * @remarks
     * Optionally pass in a status code and string explaining why the connection is closing.
     * @param code
     * @param data
     */
    close(code?: number, data?: string): void;
    /**
     * Set the callback to call when encountering socket closures.
     */
    setOnCloseHandler(handler: (x: any) => void): void;
    /**
     * Set the callback to call when encountering errors.
     */
    setOnErrorHandler(handler: (x: any) => void): void;
}
