/// <reference types="node" />
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { ISocket } from '../interfaces';
import { ITransportSender } from '../interfaces/ITransportSender';
import { ITransportReceiver } from '../interfaces/ITransportReceiver';
/**
 * Web socket based transport.
 */
export declare class WebSocketTransport implements ITransportSender, ITransportReceiver {
    private _socket;
    private readonly _queue;
    private _active;
    private _activeOffset;
    private _activeReceiveResolve;
    private _activeReceiveReject;
    private _activeReceiveCount;
    /**
     * Creates a new instance of the [WebSocketTransport](xref:botframework-streaming.WebSocketTransport) class.
     *
     * @param ws The ISocket to build this transport on top of.
     */
    constructor(ws: ISocket);
    /**
     * Sends the given buffer out over the socket's connection.
     *
     * @param buffer The buffered data to send out over the connection.
     */
    send(buffer: Buffer): number;
    /**
     * Returns true if the transport is connected to a socket.
     */
    readonly isConnected: boolean;
    /**
     * Close the socket this transport is connected to.
     */
    close(): void;
    /**
     * Attempt to receive incoming data from the connected socket.
     *
     * @param count The number of bytes to attempt to receive.
     * @returns A buffer populated with the received data.
     */
    receive(count: number): Promise<Buffer>;
    /**
     * Sets the transport to attempt to receive incoming data that has not yet arrived.
     *
     * @param data A buffer to store incoming data in.
     */
    onReceive(data: Buffer): void;
    private onClose;
    private onError;
    private trySignalData;
}
