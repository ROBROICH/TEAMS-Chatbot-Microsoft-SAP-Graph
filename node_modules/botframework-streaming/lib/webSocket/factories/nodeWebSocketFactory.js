"use strict";
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const nodeWebSocket_1 = require("../nodeWebSocket");
const nodeWebSocketFactoryBase_1 = require("./nodeWebSocketFactoryBase");
class NodeWebSocketFactory extends nodeWebSocketFactoryBase_1.NodeWebSocketFactoryBase {
    constructor() {
        super();
    }
    /**
     * Creates a NodeWebSocket instance.
     * @remarks
     * The parameters for this method should be associated with an 'upgrade' event off of a Node.js HTTP Server.
     * @param req An IncomingMessage from the 'http' module in Node.js.
     * @param socket The Socket connecting the bot and the server, from the 'net' module in Node.js.
     * @param head The first packet of the upgraded stream which may be empty per https://nodejs.org/api/http.html#http_event_upgrade_1.
     */
    createWebSocket(req, socket, head) {
        return __awaiter(this, void 0, void 0, function* () {
            const s = new nodeWebSocket_1.NodeWebSocket();
            yield s.create(req, socket, head);
            return s;
        });
    }
}
exports.NodeWebSocketFactory = NodeWebSocketFactory;
//# sourceMappingURL=nodeWebSocketFactory.js.map