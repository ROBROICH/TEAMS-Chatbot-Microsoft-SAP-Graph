"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class ContentStream {
    constructor(id, assembler) {
        if (!assembler) {
            throw Error('Null Argument Exception');
        }
        this.id = id;
        this.assembler = assembler;
    }
    get contentType() {
        return this.assembler.payloadType;
    }
    get length() {
        return this.assembler.contentLength;
    }
    getStream() {
        if (!this.stream) {
            this.stream = this.assembler.getPayloadStream();
        }
        return this.stream;
    }
    cancel() {
        this.assembler.close();
    }
    readAsString() {
        return __awaiter(this, void 0, void 0, function* () {
            const { bufferArray } = yield this.readAll();
            return (bufferArray || []).map(result => result.toString('utf8')).join('');
        });
    }
    readAsJson() {
        return __awaiter(this, void 0, void 0, function* () {
            let stringToParse = yield this.readAsString();
            try {
                return JSON.parse(stringToParse);
            }
            catch (error) {
                throw error;
            }
        });
    }
    readAll() {
        return __awaiter(this, void 0, void 0, function* () {
            // do a read-all
            let allData = [];
            let count = 0;
            let stream = this.getStream();
            // populate the array with any existing buffers
            while (count < stream.length) {
                let chunk = stream.read(stream.length);
                allData.push(chunk);
                count += chunk.length;
            }
            if (count < this.length) {
                let readToEnd = new Promise((resolve) => {
                    let callback = (cs) => (chunk) => {
                        allData.push(chunk);
                        count += chunk.length;
                        if (count === cs.length) {
                            resolve(true);
                        }
                    };
                    stream.subscribe(callback(this));
                });
                yield readToEnd;
            }
            return { bufferArray: allData, size: count };
        });
    }
}
exports.ContentStream = ContentStream;
//# sourceMappingURL=contentStream.js.map