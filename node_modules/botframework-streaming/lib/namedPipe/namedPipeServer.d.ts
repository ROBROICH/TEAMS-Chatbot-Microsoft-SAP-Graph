import { RequestHandler } from '../requestHandler';
import { StreamingRequest } from '../streamingRequest';
import { IStreamingTransportServer, IReceiveResponse } from '../interfaces';
/**
* Streaming transport server implementation that uses named pipes for inter-process communication.
*/
export declare class NamedPipeServer implements IStreamingTransportServer {
    private _outgoingServer;
    private _incomingServer;
    private readonly _baseName;
    private readonly _requestHandler;
    private readonly _sender;
    private readonly _receiver;
    private readonly _requestManager;
    private readonly _protocolAdapter;
    private readonly _autoReconnect;
    private _isDisconnecting;
    /**
    * Creates a new instance of the [NamedPipeServer](xref:botframework-streaming.NamedPipeServer) class.
     *
     * @param baseName The named pipe to connect to.
     * @param requestHandler Optional [RequestHandler](xref:botframework-streaming.RequestHandler) to process incoming messages received by this client.
     * @param autoReconnect Optional setting to determine if the client sould attempt to reconnect automatically on disconnection events. Defaults to true.
     */
    constructor(baseName: string, requestHandler?: RequestHandler, autoReconnect?: boolean);
    /**
     * Returns true if currently connected.
     */
    readonly isConnected: boolean;
    /**
     * Used to establish the connection used by this server and begin listening for incoming messages.
     *
     * @returns A promised string that will not resolve as long as the server is running.
     */
    start(): Promise<string>;
    /**
     * Allows for manually disconnecting the server.
     */
    disconnect(): void;
    /**
     * Task used to send data over this client connection.
     *
     * @param request The [StreamingRequest](xref:botframework-streaming.StreamingRequest) to send.
     * @returns A promise for an instance of [IReceiveResponse](xref:botframework-streaming.IReceiveResponse) on completion of the send operation.
     */
    send(request: StreamingRequest): Promise<IReceiveResponse>;
    private onConnectionDisconnected;
}
