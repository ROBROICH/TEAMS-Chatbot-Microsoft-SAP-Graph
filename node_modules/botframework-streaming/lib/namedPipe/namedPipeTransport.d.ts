/// <reference types="node" />
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Socket } from 'net';
import { ITransportSender } from '../interfaces/ITransportSender';
import { ITransportReceiver } from '../interfaces/ITransportReceiver';
/**
 * Named pipes based transport sender and receiver abstraction
 */
export declare class NamedPipeTransport implements ITransportSender, ITransportReceiver {
    static readonly PipePath: string;
    static readonly ServerIncomingPath: string;
    static readonly ServerOutgoingPath: string;
    private _socket;
    private readonly _queue;
    private _active;
    private _activeOffset;
    private _activeReceiveResolve;
    private _activeReceiveReject;
    private _activeReceiveCount;
    /**
     * Creates a new instance of the [NamedPipeTransport](xref:botframework-streaming.NamedPipeTransport) class.
     *
     * @param socket The socket object to build this connection on.
     */
    constructor(socket: Socket);
    /**
     * Writes to the pipe and sends.
     *
     * @param buffer The buffer full of data to send out across the socket.
     */
    send(buffer: Buffer): number;
    /**
     * Returns true if currently connected.
     */
    readonly isConnected: boolean;
    /**
     * Closes the transport.
     */
    close(): void;
    /**
     * Receive from the transport into the buffer.
     */
    receive(count: number): Promise<Buffer>;
    private socketReceive;
    private socketClose;
    private socketError;
    private trySignalData;
}
