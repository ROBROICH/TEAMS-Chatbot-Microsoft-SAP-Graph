"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @module botframework-streaming
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
const net_1 = require("net");
const protocolAdapter_1 = require("../protocolAdapter");
const payloads_1 = require("../payloads");
const payloadTransport_1 = require("../payloadTransport");
const namedPipeTransport_1 = require("./namedPipeTransport");
/**
* Streaming transport server implementation that uses named pipes for inter-process communication.
*/
class NamedPipeServer {
    /**
    * Creates a new instance of the [NamedPipeServer](xref:botframework-streaming.NamedPipeServer) class.
     *
     * @param baseName The named pipe to connect to.
     * @param requestHandler Optional [RequestHandler](xref:botframework-streaming.RequestHandler) to process incoming messages received by this client.
     * @param autoReconnect Optional setting to determine if the client sould attempt to reconnect automatically on disconnection events. Defaults to true.
     */
    constructor(baseName, requestHandler, autoReconnect = true) {
        if (!baseName) {
            throw new TypeError('NamedPipeServer: Missing baseName parameter');
        }
        this._baseName = baseName;
        this._requestHandler = requestHandler;
        this._autoReconnect = autoReconnect;
        this._requestManager = new payloads_1.RequestManager();
        this._sender = new payloadTransport_1.PayloadSender();
        this._receiver = new payloadTransport_1.PayloadReceiver();
        this._protocolAdapter = new protocolAdapter_1.ProtocolAdapter(this._requestHandler, this._requestManager, this._sender, this._receiver);
        this._sender.disconnected = this.onConnectionDisconnected.bind(this);
        this._receiver.disconnected = this.onConnectionDisconnected.bind(this);
    }
    /**
     * Returns true if currently connected.
     */
    get isConnected() {
        return !!(this._receiver.isConnected && this._sender.isConnected);
    }
    /**
     * Used to establish the connection used by this server and begin listening for incoming messages.
     *
     * @returns A promised string that will not resolve as long as the server is running.
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._receiver.isConnected || this._sender.isConnected || this._incomingServer || this._outgoingServer) {
                this.disconnect();
            }
            const incoming = new Promise(resolve => {
                this._incomingServer = new net_1.Server((socket) => {
                    this._receiver.connect(new namedPipeTransport_1.NamedPipeTransport(socket));
                    resolve();
                });
            });
            const outgoing = new Promise(resolve => {
                this._outgoingServer = new net_1.Server((socket) => {
                    this._sender.connect(new namedPipeTransport_1.NamedPipeTransport(socket));
                    resolve();
                });
            });
            // These promises will only resolve when the underlying connection has terminated.
            // Anything awaiting on them will be blocked for the duration of the session,
            // which is useful when detecting premature terminations, but requires an unawaited
            // promise during the process of establishing the connection.
            Promise.all([incoming, outgoing]);
            const { PipePath, ServerIncomingPath, ServerOutgoingPath } = namedPipeTransport_1.NamedPipeTransport;
            const incomingPipeName = PipePath + this._baseName + ServerIncomingPath;
            const outgoingPipeName = PipePath + this._baseName + ServerOutgoingPath;
            this._incomingServer.listen(incomingPipeName);
            this._outgoingServer.listen(outgoingPipeName);
            return 'connected';
        });
    }
    /**
     * Allows for manually disconnecting the server.
     */
    disconnect() {
        this._sender.disconnect();
        this._receiver.disconnect();
        if (this._incomingServer) {
            this._incomingServer.close();
            this._incomingServer = null;
        }
        if (this._outgoingServer) {
            this._outgoingServer.close();
            this._outgoingServer = null;
        }
    }
    /**
     * Task used to send data over this client connection.
     *
     * @param request The [StreamingRequest](xref:botframework-streaming.StreamingRequest) to send.
     * @returns A promise for an instance of [IReceiveResponse](xref:botframework-streaming.IReceiveResponse) on completion of the send operation.
     */
    send(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._protocolAdapter.sendRequest(request);
        });
    }
    onConnectionDisconnected() {
        if (!this._isDisconnecting) {
            this._isDisconnecting = true;
            try {
                if (this._sender.isConnected) {
                    this._sender.disconnect();
                }
                if (this._receiver.isConnected) {
                    this._receiver.disconnect();
                }
                if (this._autoReconnect) {
                    this.start()
                        .catch((err) => { throw (new Error(`Unable to reconnect: ${err.message}`)); });
                }
            }
            finally {
                this._isDisconnecting = false;
            }
        }
    }
}
exports.NamedPipeServer = NamedPipeServer;
//# sourceMappingURL=namedPipeServer.js.map